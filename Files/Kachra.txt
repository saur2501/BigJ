IQ - Actually using the desktops or screens or spaces for different work spaces
    different threads of work at workplace for parallelism and for home also.
Movie - Chhalang
    3S - Stamina, Strength, Speed.
    Chilli on thumb or another problem you give - to hold shorts. It's not easy. Nth is easy - backing out is.
    Any facility you want pay the price for it - guava then dogs, chicken then chase them. Want juice - no, then extract and give to us.
HomeErp - Gift for mama in Udhampur - Scenery.
HomeErp - SRM - Spiritual - Travelled to ekachakra,  mayapur the eating place - the service that they gave.
HomeErp - SRM - sadda pind explored
Focus on abstract training - concrete is important but fundamentals are most.
https://dzone.com/articles/kafka-gt-hdfss3-batch-ingestion-through-spark - kafka batch reading.
set delete.topic.enable to true in config/server.properties
zookeeper and kafka servers in the background - nohup - but better don't do it cuz these are servers with logs.
get count in spark faster - df.cache(); df.count()
Apply function in a class in scala
    https://stackoverflow.com/questions/9737352/what-is-the-apply-function-in-scala#:~:text=apply%20serves%20the%20purpose%20of,Function1%5BInt%2CInt%5D%20.&text=Writing%20f.
Youtube - Personal branding,
IQ - Debug Decision tree - thru discussions, figure out where the problem is thru checking what's working and what's not.
can't find sca-maven-plugin or fortify one - java 8 - 1 of maven modules had problem - removed it to make maven sync well.
Movie - Chhalang
    Vakil - At least fight b4 accepting defeat. Even if defeat obvious, decision made after fight.
    saam - compare, daam - prize of computer stud, dand - punishment that you don't know, bhed - they don't want your well being.
    team lead by 8 not 80 - congratulate them for minor loss.
        training against dogs helped for run.
    skills but foundation when going gets tough. lesson of perseverence when going gets tough proved to be far valuable to them
    Thank opponent that your arrival - I realized my responsibilities and that I was spoiling them.
        you still are a better coach and gotta learn a lot from you
    e1 wants to be known sportsman - it takes their parents, PTI - our children will become but first we must.
        PTI chaddo election mein khade hovo
Movie - gulabo sitabo
    2 meaning talks - koi tucha chor hi hoga jisne bulb churaya. 
    Not leaving then bulb, chandelier, fuse removal. Sensitive wall - I touched it broke I am leaving.
    Locking rooms. charpayi taken to road in the night -  police complaint.
SQ - Krishna is not good or bad - nor are we supposed to stay till this realm - we gotta transcend to the realm beyond good and bad
    BG Krishna says he is both good and bad but being conditioned we want good or bad in terms of grats - we have to rise beyond.
    Why Krishna did sth to sages in past like Hiranya's time - cuz even they had to rise beyond good and bad in terms of experiences.
    Good experience give a great incentive and thus facilitate progress but so can bad experiences sometimes.
    That doesn't change his being supreme well wisher - cuz best self interest is not getting what we want conditionally but constitutionally.
CS - RnD Thinking - Layers 
    About - Human being is network of and pipelines of the following.
        The idea of distribution or networking (peers and servers) drills down to all the layers.
    [Digitized ]Data Interactions - Producers and Consumers - People, Browsers, Scraping programs, IOT Sensors and Actuators.
        @Senses - read, write, act.
        TOC, Regex, Compilers, NLP, DIP, etc.
    Data Source and Data Sink - Application and Data Servers.
        @Mind - store, recall.
        Standardization - G3 -> G4 languages - SQL doesn't find a way but exploits a standardized way - "what" to standardized "how".
        minor transformations. recall based mostly.
    Data Manipulation and churning - sync or async.
        @Intel - decision making algorithm to get to a desired goal.
        synchronous at runtime (small data), async batch, streaming.
        Standardization - G5 Languages (model -> (initial to end state))
            AI, ML, Give only the model of the problem and current state and end state - it will find the way etc.
            Many of DL applications tend to move to higher layers not this layer exactly (in terms of application and not means)
                Eg - image to details. Sentence to nouns and verbs. Audio to text and vv.
    Identity (max Soul Simulation) - give it layers and need to maximize profit cost functions - leave it free to act in a new modelled reality or system.
        Knowledge about a system and means about a system - Knowledge model given and left free to act - independent or distributed.
        PC lacks life injected into existence layers - like decision but not choice, store recall but not think or feel, etc.
        ML is done by professionals and is not an automated process. 
        When computer does the training process or performs reinforcement learning, that is different.
        Think of a robot given an urge for survival, greed for grats (simulated), social framework based maximized grats.
            Next, think how robot should figure out the the set of problems to further the markov's hierarchical needs.
            Also, given the set of problems, the robot should 
                figure out a set of candidate algorithms to target 
                select the best one
                an ability to adapt at runtime
                all this in collaboration with the changing and well networked environment.
        Now, most of the research focusses on PnC of everything - applied everywhere and standardized in biz interests.
            inter-discipline study for inspiration and mutual applications. Eg - ML was application of statistics to CS.
            Application of something to other domains. Eg - NLP or Image Recognition is application of ML to linguistics or photography.
            Exploration of possibilities - where we are as State of art is and what all is possible - juice it out fully.
CF not working - solution to trace backwards from current working application and you will find the stage at which it fails.
ping reveals the all cloudfoundry hosted apps are same dns and hence should be same IP address but it's different 
    same for some apps but different for others - new deployed in sandbox on same ip as jobsubmitter thing app in sb but jobsubmitter thing and abtract of sb on different ip
1 SCP extension for roster for our employees.
All different apps we have tried for us. Tried ECC then Lumira and now SAC.
implementation of SAP Chatbot. Every year new apps of SAP have been tried and they stayed.
SAC is along the lines of BYD OLAP with all descriptive visual analytics. dicing, slicing, roll up, drill down.
Carbon footprint tracing for the company as part of Sustainability program.
Most of vaccine makers and distributers are SAP customers so we are playing a big role.
Jan Gilg
    5 locations from India
    2.5K employees from India
    35% female in India in S4
    2nd largest location for S4Hana.
SAP Annual Highlights
    Annual report
    Innvent, 1B Lives, SAP.io
    Industrial innovation awards 2020 (CII) - top 25 innovative companies
        Confederation of Indian Industry
    Customer Engagement - OneSAP
    Growth and Innovation - TechEd, D-Shop (hands on workshop + n devX-talks)
    Ecosystem - Startup studio, Industry initiatives
    Employee Engagement - Grand Champion Award, Flexben (WFH also)
    Inclusion - Domestic violence, Pride circle, Health and wellness
    CSR - against COVID.
I was going thru the code yesterday to identify where to make changes. Have written few doubts.
Hari - DoD - finished and shared security report. Deployment descriptor files updated with sth related with jobs in spaces.
Sweta, Prabhakar - Space X tenant X App X calls - which calls failing. New script - add to nightly build. Raised ticket with Ops, TM.
    JMeter Script CRUD. Scope AWS, Azure. GDPR.
    pull in functionality into existing scripts. And new scripts.
Schema
    Tags - equipmentId, indicatorGroupId, modelId, templateId.
I am blocked by this BCP and its repercussions - present things as they are.
cf auth.
cf app CRUD.
    cf service binding - server PaaS to be used
        in code used thru env.
    facilitates even sharing service instances across spaces.
gotta change the zoneId to point to correct name
    not sure if the tenant name is retained or not.
IDEA - There should teams chat topic for every backlog which 1 can join or leave anytime.
JIRA - informal jira also.
    comment - Prayojan. Work Log - Abhidhyeya.
    prayojan status consists challenges and achievements.
    Abhidhyeya consists of done and what to do next.
Service Instance is the auth Gateway (not IOT gateway) and it has keys.
    like muenchhausen, this endpoint just facilitates talking with apps in central deployments (IOTAE, IOTS) possible.
    once customer gains credentials to talk directly -
        all customers across world contact the same IOTAE endpoints with different credentials giving their tenant details as part of payload and messages.
        IOTS or IOTAE applications or microservices handle all those calls and do justice to them thru processing.
    Think of it at server NIC card all packets from different sources piling separately until n http messages from m sources are obtained in a buffer queue - waiting to be processed.
        web server handles all the http messages and extracts and forwards to application server which leverages spark and kafka servers to handle.
    k customers, k (give or take) service instances, 1 (or more as per space, dominion) target system.
        ?IOTS subscription generates REST based url - which is what will be used for writing device model details
        This means that when IOTS was chosen as product - a new url got generate for that customer to be used for writing device model details.
        For practicals purposes, think of IOTS application deployed in the cf
        so, for IOTS there are going to be nn deployments - they could still be delegating to IOTS central deployment but we don't care for that.
        Does new url means new deployment - not true for many blogs but cf was not installed for nothing.
https://www.linkedin.com/learning/spark-for-machine-learning-ai/introduction-to-spark?u=57692769
CS - Maven from LinkedIn Official Learning for DMPM
    mvnrepository.com aggregates from many sources - not just maven central.
        there would be note below.
        Checkout all the repos that mvnrepository indexes from.
        maven dependencies in the windows were red marked cuz their dependencies could not be downloaded so included the repo of sap.
    maven
        requisites - java, maven, ide - all path variables.
        POM - project object model.
        project management and comprehension tool - original for building.
        easy, uniform build, provide information, provide guidelines and best practices.
            support migration.
            easy to use, great community support, reliable.
        file structures
            root
                src, 
                    main
                        java
                        resources
                    test
                        java
                        resources
                pom.xml
        pom file
            repositories
                pluginRepositories - points to plugins used by maven itself.
            profiles - to override configurations
                this is org specific.
            details - group artifact version.
            reactors and parent
                provided versions dependencies and pligsn - specify no more properties version and dependencies.
                reactor is sequence the package sequence.
                useful for making shared client libraries for web services for eg.
                observe reaction build sequence b4 starting.
            properties
            dependency
                details and scope is compile by default
            build - plugins to build your project.
                plugins - similar to dependency but more coordinates.
                    eg - use java 11.
                eg - compiler and 3rd party.
                compiles to bin and moves to target directory and packages it.
            report - report info about project.
                surefire report for test coverage.
                mvn clean package site
                open target/site/index.html
            archetype - powerful constructs although not core.
                project template using maven.
                specified when starting - useful for making consistent artifacts.
                speed to market, consistent standards.
                can create your own for boiler plates.
        Lifecycle
            3 by default - default, clean, site.
                main one, cleaning, documentation generating.
                all lifecycle has phase - stage in it.
                default has - validate, compile, test, package, verify, install, deploy.
                phase executed in order.
            phase made up of goals.
                goals are individual tasks in phase.
                triggered individually - mvn dependency:analyze - specific goal.
                avoid running full phases.
            Build plugins are part of all lifecycles.
                3 types of them - core, packaging, tools.
                core most used - jdk to make bytecode, installation to put in m2.
                    deployment to push remote, validation for validating source code.
                    compiler - does compilation of code.
                        mvn compile and test-compile
                        configuring it - section. under pluginManagement in the parent pom.
                    deployment - use distributionmanagement tag to push to remote coordinates.
                        7 hands you a jar file - create a pom from that.
                        deploy:deploy-file
                    resources - eth you reference is put into your package - css, js, etc from resources.
                    surefire plugin - convert to site doc.
                        to execute junit tests. halt when it fails.
                    failSage for integration testing.
                    useful for large scale CICD then necessary.
                packaging - compiled bytecode and package s.t consumable by jvm.
                    jar is default packaging plugin to make jar file which can be loaded by class loader of the jvm.
                    war by web application server.
                    ear - enterpise; shade - for uber jar - more to do with dependency then packaging or build.
                    when you trigger package this internally gets executed.
                    war file - web archive goes into web application server.
                    jar plugin
                        default plugin.
                tools - variety of uses, release, signing, dependency.
                    dependency plugin
                        see usage - lots you can check.
                    enforcer plugin - force usage like specific java version.
                    rules can be set inside executions section of pom with rules.
                    jarsigner - PKI encryption signing. keystore certificate.
                        signed jars for using application servers - for security.
                    release plugin
                        most used. Make it and release it - preparing project for next iteration.
                    More
                    Scope
                        default - compile.
                            dependency is always available.
                            dependency is propagated. when used in dependency - transitive.
                        provided - similar to compile. won't see dependency in war but at runtime we assume it.
                            only available on runtime and test classpaths.
                            common in enterprise but not in cloud - cuz violates 12 factor principle.
                            not transitive.
                        runtime - useful when multiple versions of api.
                            only for execution. not needed for compilation.
                            only seen in runtime and test classpaths.
                        test scope - reduce size - needed only for testing. Test compilation and execution classpaths.
                            unit test frameworks. not transitive.
                        less common - system - similar to provided but you gotta specify the location.
                            import - applies to pom files.
                    Transitive dependencies
                        Dependency of dependencies - only care for what you know not further dependencies.
                        closest version - degrees of separation from the root.
                        dependency management section beats closer version.
                        scope plays a role.
                        local definitions rules them all.
                        Tricks
                            only declare what you need.
                            validate scope.
                                use dependency analyse.
                            consider parent pom to control version.
                            always declare when risk of breaking.
                            always declare when risk of security.
                    Dependency management
                        for orgs to control actual dependencies within it.
                        paste properties in parent. dependency management in parent.
                        remove scope and versions from child project.
                        similarly for plugin management.
                    Dependency plugin
                        mvn dependency:analyze - tells warnings of what you use in code and get thru transitive dependencies so overly dependent on them not changing things.
                        mvn dependency:resolve - lists all declared dependencies linearly.
                        mvn dependency:tree - to show something on our classpath.
                Maven repo - central open source - search.maven.org/#search
                    local repo - at .m2 - all your dependencies and projects in here.
                POM - a set of standards, a project lifecycle, dependency management system, logic for executing plugin goals at defined phases in a lifecycle.
                    project description, unique set of coordinates, project attribs, license.
                    version, authors and dependencies.
                    coordinates = group, artifact, version.
                Maven integrations with IDE from certain version - plugins b4.
                Inheritance - configuration from parent. parent child.
                    doesn't quote its own coordinate other than artifact.
                    defined from topmost level downwards.
                    multimodule has parent child relationship but also modules tag in the parent.
                    Any child dependencies are defined in parent object (POM)
                    parent can specify commonly used dependencies.
                        inherited projects automatically get them.
                        submodule identifies all projects in the parent project and inheritance is vv.
                Reactor - when using multi-module it is used
                    collects all available modules.
                    sorts the projects into the correct order.
                    builds in the order.
                    create from IDE - as Maven, parent project.
                    ?it's layered way of modules not packages in the project.
                    IDE - dependencies pulled automatically so just run them in sequence of dependency and parent in last.
                Maven Profiles
                    provide ability to customize a particular build.
                    can be written for dev, test or deploy.
                    separate envt for different stakeholders.
                    profie provides an alternative set of values.
                    eg - profiles, profile, id for production, build, plugins, plugin, coordinates.
                        config - debug to false.
                Writing plugins
                    all work is done by plugins - plugin execution framework at heart.
                    every plugin is artifact that has n Mojos - Maven Plain old java objects.
                    Mojo is a goal in Maven - compiler:compile goal is a mojo.
                    3 parts to plugin descriptor - top level config coordinates.
                        declaration of mojos.
                        declaration of dependencies.
                    maven-archetype-mojo to create a plugin.
                    default code comes - change it to make your code.

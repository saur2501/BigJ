<?xml version="1.0" encoding="UTF-8"?>
<SoftwareEngineering>
    <About>
        Only Development specific content should come under this. Not how the tool must have been made.
    </About>
    <What>
    Standardize the practices to enable devp of large s/w products.
        CS field touching every field (domain)
            specific- payroll
            universal- all functions of organization (enterprise)
            Batch or real time, etc.
    </What>
    <Why>
        cuz many of them fail.
            effort intensive
            cost in development
                cost overruns- becomes too costly.
            Time in development (time, money, effort)
                Schedule slippage- not ready in time
            Challenging needs of users (clients)
                user's problem not solved. 
            high risk of failure- user acceptance, performance, maintainability.
                not maintainable.
                Poor quality (non-functional)
        Root cause
            ad hoc SDLC.
                Deliverables not identified
                    Poor understanding of user requirements
                    No planning for development work (no milestones)
                Technical incompetence of developers
                    up to date- latest technologies, etc.
                Poor understanding of cost and effort by both developer and user.
                    No control or review
        vs 1 time program as a student
            it's bulky.
            no throw away.
            no social service from it.
    </Why>
    <How>
        <EnggApproach>
            What makes other discipline projects so up to the mark
                bridges, towers, Power plants, aircrafts, missiles.
                Engg- To design, develop (build,fabricate) an artifact that meets specifications
                    efficiently, cost effectively and ensuring quality.
                    using scientific principles.
                    Requirement- well defined approach (repeatable, predictable)
                    Scale
                        building hut, 1-storey, 2-storey, etc- committing more resources, more costs.
                        Project requires management.
            <QualityFocus>
            Quality Focus- Focus on quality is the basis for developing software methodically
                aka Success Criteria
                Development completes
                it is useful
                usable- users find it attractive in day today functioning.
                    Ppl are willing to pay for quality.
                    Eg- TV bigger screen is purchased cuz you think it's superior quality (worth my money)
                used- cost effective, maintained.
            </QualityFocus>
            <Process>
            Process- Establishing a process for monitoring and control results in achieving quality.
                Characteristics
                Process Models (or paradigms)
                    A strategy to be incorporated by an engineer or a team of engineers that encompasses the process, methods and tools involved in development of software.
                    Representation of a software devp process. 
                    Chosen based on 
                        the nature of application involved
                        available methods, 
                        tools and engineers
                        the deliverables that are required.
                    <SDLC>
                        <Waterfall>
                        Linear Sequential Model (Waterfall)
                            Projects rarely follow complete sequential flow, iterations are involved and changes can cause confusion if not well planned
                            Scenario
                                Cust sure of reqt and can be frozen
                                expected after each stage of devp.
                                such things are done b4 by org.
                            Phases
                                Systems Engg
                                    Define Scope
                                    Understand process
                                    what needs to be automated, how soon.
                                    Deliverable- user reqt doc
                                Reqt Analysis
                                    Focuson what needs to be devp (func and non-func)
                                    SRS, Acceptance Test plan, System Test plan
                                Design- Blue print fo software.
                                    Structure and Behavior of modules.
                                    focuses on 4 aspects
                                        Software architecture
                                        Algorithms
                                        Data structures
                                        Interfaces.
                                    Deliverable-
                                        High Level Design- Brief Desc of modules
                                        Detailed Design- arguments to func, return types, other funcs called.
                                        Integration Test Plan- Test integration of modules and units.
                                        Unit Test Plan- Logic of Program
                                            Statement coverage, Condition Coverage, Path coverage
                                Coding
                                    Build the software
                                    Unit Testing
                                    Deliverable- Unit Tested Code
                                    Not very time consuming if design is well done.
                                Testing
                                    Ensure that requirements are met
                                    Integration and System Tested Software
                                Deployment
                                    Assemble and install are client side (Test against User Acceptance Testing)
                                    Ender User Training involved here
                                    Sign off.
                                    Deliverable- User manual
                            Advantages
                                Simple and systematic- step by step.
                                Disciplined Approach- deliverables after each stage
                            Disadvantages
                                Limited or no scope for new reqt
                                Potential Delay in identifying risks- if id later.
                        </Waterfall>
                        <Spiral>
                            Scenario
                                Many risks expected at each stage of devp
                                Alternatives available at all stages
                                Customer is in agreement that the project is not fixed budget                                        
                            Phases
                                couples iterative nature of prototyping model and the controlled, systematic nature of waterfall.
                                Devp in stages- involving activities like reqt analysis, design, coding
                                Plan Phase- Plan is drawn for the specific stage including
                                    resource planning
                                    Schedule estimation
                                Evaluate- several alternatives for that stage are discussed
                                    consider objectives and constraints b4 making decisions.
                                Risk Analysis- Risks identified and prioritized based on probability of occurence
                                    risk mitigation plan to reduce it.
                                Engineer- Actually perform the activities of stage.
                                    Devp and Release
                                Customer Evaluation/ Communication
                                Eg- Coding Stage
                                    Plan- Resource Planning and coding schedule- who will build code and time taken for that.
                                    Evaluate- Alternative code devp platforms
                                    Risk- Tool incompatibility
                                        Lack of proficiency of team in using tool
                                    Engineer- Devp the code with unit testing.
                            Advantage
                                Meta model- model for other models
                                Iterative and realistic considering complexity involved today
                            Disadvantage
                                Requires good expertise in risk management
                                not suitable if it is fixed budget project
                        </Spiral>
                        <EvolutionaryModels>
                            <Incremental>
                                Basic product and keep adding more to it.
                                Construct a partial implementation of a total system
                                    it's a operational product.
                                    Fast Delivery
                                Slowly add increased functionality.
                                    Customer can respond to each build (inputs for change)
                                The incremental model prioritizes requirements of the system and then implements them in groups.
                                    DAC breakdown of tasks- what to do first (high risk, major funcs)
                                    Risk of changing requirements is reduced.
                                Each subsequent release of the system adds function to previous release until all designed functionality is implemented.
                                Weakness-
                                    Requires good planning and design
                                    Early defn of complete/ full functional system for increments
                                    Well defined module interfaces are reqd
                                    Total cost of system is not lower (can increase)
                                Scenario
                                    Risk, Funding, Schedule, Program Complexity, or need for early realization of benefits
                                    Most reqt known upfront but expected to evolve over time
                                    Need to get basic func to the market early
                                    On proejct which have lengthy devp schedules.
                                    On Project with new technology.
                            </Incremental>
                            <Prototyping>
                                A limited model of the system is developed to demonstrate the system to the users and participants.
                                    work begins with whatever understanding with devp and cust regarding reqt.
                                    no focus on efficiency, quality, maintainability.
                                Scenario
                                    Complete set of reqt not avail
                                    Start devp with initial set of reqt avail
                                    Feel of the product with initial reqt expected
                                    Few requirement will be added later
                                Phases
                                    Build the s/w in iterations
                                    Prototyping an eg of iterative approach to s/w devp
                                    Communication- Define the overall objectives
                                        Identify the initial set of reqt.
                                    Quick Plan- Quick plan of the iteration is done.
                                    Modeling and Quick Design- Build the model based on reqt
                                        Design Devp is done quickly.
                                    Construction of Prototype
                                        Prototype is constructed based on the design.
                                    Deployment, Delivery and Feedback
                                        Prototype is evaluated by customer
                                        Feedback is taken to refine the reqt for next iteration
                                        Next stage uses same phases.
                                Advantages
                                    Part of product is visible at early stage itself.
                                        helps refine reqt for next iteration
                                        Scope for accommodating new reqt.
                                            less technical risks.
                                Disadvantages
                                    Evolutionary- diffl to control #iterations
                                        costly
                                        Time consume
                                    Customer may discard complete product and build from scratch.
                                    Compromises are made on design and implementation aspects.
                            </Prototyping>
                            <Agile>
                                an approach which places emphasis on the development team and user involvement. This is developing the system rather than following a predetermined structured development process. This provides the ability to change direction late in the development and still come up with a purpose of the system.
                                Competitive in fast moving market place- orgs need innovation ew
                                more companies embrace Agile- added cust value faster
                                Values
                                    Values central to agile methodologies are:
                                        – Individuals and interactions over processes and tools
                                        – Working software over comprehensive documentation
                                        – Customer collaboration over contract negotiation
                                        – Responding to change over following a plan
                                CS- Mary's toy store- successful- wants to start online- modernize it
                                    not sure how to manage- not a lot of similarities- lots of steps
                                    Infrastructure can't be used until all is complete
                                    Online would require a DB
                                    Mary hires- Lui, IT professional to make website
                                        doesn't know what users would expect from online resource
                                        but knows she has to start ASAP.
                                Agile is mindset to deliver customer value
                                    Mitigate Risk- is what users want
                                    Involve Customer
                                Phases
                                    B4 sprint, use CA Agile Vision to document her in product backlog
                                        sets project timelines and priorities.
                                        Managing product backlog is called backlog grooming.
                                        writes user stories- As a User1, I need This Feature so that I can do sth.
                                    Sprint- devp in iterative incremental manner (1 to 3 weeks)
                                        Each short devp cycle is called sprint
                                        Sprint Planning
                                            IT prof presents scrum goals to scrum master and team.
                                                first is to get a website up and running- money ASAP.
                                                They prioritize the user stories.
                                            Scrum master facilitates scrum planning meeting- manage the team and keep things going.
                                                makes sure smoot run of project thru removing obstacles.
                                                prioritize stories for what to fit.
                                                moves the high priority stories from product backlog to sprint backlog (defines scope of next sprint)
                                                which features to implement in this sprint.
                                                Eg- checkout from kart, mobile purchases, etc
                                            Requires following- Agile Project with its management tool
                                                Project initiation (Requirement defn)
                                                Analysis and Plan (or Product Design)
                                                Develop Content and Code
                                                Testing
                                        Build
                                            Scrum Team- 
                                                starts to work on user stories- diffn roles- st testing, st devp but get it done
                                                Daily Stand ups- Ed during sprint- master conducts daily stand up meetings- quick for 3 answers
                                                    What you did yesterday
                                                    What will you do today
                                                    What obstacles are impeding your progress?
                                                    Master records responses in backlog.
                                                    master shares Sprint burndown graph- progress report- Story points vs days.
                                        Test
                                        Review
                                            End of Sprint Review- 
                                                End result of every sprint is a shippable product
                                                each sprint improves the product more. bulding on top of each other.
                                                presents the deliverables of 1st sprint to client.
                                                Users reviews are taken for next reqt for upcoming sprints.
                                            Retrospective meeting- 
                                                what went well
                                                Areas of improvement
                                                Repeat the cycle- until the Client and users are completely satisfied.
                                            Project and portfolio Mgmt solution
                                                how to track both retail and eCommerce
                                                    Mgmt tools to track monetory details
                                                    CA technologies mgmt solution- Devp projects- all projects together.
                                        Advantages
                                            Time to market- instant money
                                            Certainity- what she is getting- result is closer to what's needed.
                                            Increase Revenue by focusing on customer value- rapid feedbacks- happy customers are willing to pay.
                            </Agile>
                        </EvolutionaryModels>
                        <ConcurrentDevpModel>
                            Need very good clarity during planning to identify tasks or phases that will be concurrently done
                            useful for large scale
                        </ConcurrentDevpModel>
                        <ComponentBasedDevp>
                            A set of pre-built, standardized software components are made available to put together in a specified fashion and create software.
                            Needs- 
                                domain engg- explores an application domain with the specific intent of finding functional, behavioral and data components that can be re-used.
                                Component based devp- Collects requirements, selects appropriate architectural style to meet the objectives
                                    select, review, modify components to fit into architecture- integrate them to make full system.
                        </ComponentBasedDevp>
                        <RapidApplicationDevp>
                            multiple teams work on different phases at same time.
                            emphasizes extremely short devp lifecycle.
                                emphasize reuse of components
                            Phases
                                Business Modeling
                                Data Modeling
                                Process Modeling
                                Application Generation
                                Testing and Turnover
                            While team1 working on process modeling- another team can work on business modeling.
                            Not appropriate for safety-critical systems- interoperability.
                            Big teamsize reqd.
                        </RapidApplicationDevp>
                        <ModelBasedDevp>
                            Focuses mainly on requirements and design phases of development.
                            Formal models developed to capture Reqt, Design- Code, test generation are automatic.
                        </ModelBasedDevp>
                    </SDLC>
            </Process>
            <Methods>
            Methods- Provide details on how to build software. 
                Typically include requirements and design specification, analysis, coding, testing and maintenance.
                3 generic phases
                    Definition
                        Key requirements of the system and software are defined
                        3 tasks
                            System Engg
                            Project Planning
                            Requirement Specification
                    Development
                        Answers all questions related to design, architecture, coding and testing.
                        3 tasks
                            Design
                            Coding
                            Testing
                    Support
                        Handles change that occurs due to errors in software, changes in customer requirements
                        Devp redone as per need.
                Umbrella Activities- Phases Supported by following 
                    Project Planning, tracking, control
                    Quality Assurance
                    Risk Assessment and Management
                    Reviews
                    Metrics and their measurement
                    Configuration management
                    Documentation
            </Methods>
            <Tools>        
            Tools- Provide fully automated or partial support for the process and methods.
            </Tools>
        </EnggApproach>
    </How>
    <DevpCycleOfAnything>
        CS Software Engineering Discipline (any discipline for that matter, even society)
        In interview, you should be able to answer questions at all steps.
        <BusinessModel> 
            <About>
                ?Also you may consider to include working model
            </About>
            <ProblemFaced>
                Precise Definition of Problem (social, technical,etc) faced
                Problems- abstract of some problem instances 7 faces.
            </ProblemFaced>
            <VisionOfPerfectWorld>
                <ObserveGapProblemAndVision></ObserveGapProblemAndVision>
                <KnowStateOfArtOrAffairs>
                    <SystemArchitectures>
                        <BuildingSystemOnArchitectures>
                            System- All objects are experts in their jobs (unchallenged) and data flows through them- coordinated s.t. purposes are served.
                                    System has a purpose
                                            Be very precise- what the purpose of system is.
                                            Eg- Someone in railway reservation queue comes in front and asks for tea
                                                    "This is not the purpose of the system, go to canteen"
                                                    Ppl stick to the system's purpose.
                                    System has a boundary
                                            May be physical or conceptual.
                                            what elements/entities/people lie inside of the system and what outside.
                                                    customers of the system are called actors
                                                            They may give input (like money),get output (for free) or both.
                                                            essentially interacts with the system for some benefit
                                            Eg- object in the boundary of JVM.
                                            Eg- Registrar to tell me do my job is in his boundary bt for peon Nope!
                                            Eg- Studs move into the system thru registration or are actors! customers of system.
                                            Eg- faculties are inside the college system.
                                    Systems have actors- to whom they render their services by coordination.

                            that system may be built thru software system, 100 s/w products or people coordination.
                                    Eg- Railways managed in 1900 also.
                                            Actors comes to the counter and places request thru a form 
                                                    (counter is like an interface for the actor to access system and take services)
                                                    These are gonna be boundary objects/view objects
                                            The form goes to Chennai Officer's in-tray and other such forms stack there.
                                                    He picks up forms applies the business logic- like checking seats available and allotting the vacant seats in table.
                                                    Writes on the file the address of next Desk's In-Tray 
                                                            forwarding it to Delhi Desk to update the central DB.
                                                            But running themselves will waste their time (writing their own logic of refering xml,etc)- so they have office-boys (controller)
                                                            also writes a particular service expectected and office boy will place the file in apt tray or let desk know the expected service.
                                                    Form goes to Delhi and gets confirmation in a week. The form is updated- AC 2-tier 2 seat and 1 RAC 1-tier available.
                                                    Counter gets the form which he sends to billing table for calculation and gets back the total payable.
                                                    Counter intimates the bill which actor pays and gets the receipt.
                                                    The list thus made is given to object5 which sends it to diff trains to paste on the train.
                                                    In case any problem, actor can go report to complaint section which will in turn contact the reservation system where prob came.
                                    S/W is just automation of manual system.
                                    All these entities of the system are essentially objects in our S/W system
                                            We have boundary or view objects to interface with actors.
                                            Office boys are the controllers which determine where a request has to be forwarded based on the address written: they do their job well of coordinating.
                                            which have specialization- in term of their services they expose for outside world (within a boundary)(business processes)
                                            Others take advantage of them to serve their purposes.	
                                                    Use Interfaces- give flexibility of multiple types of objects to take advantage of my services.
                                                    And the requirements of systems do change so highly recommended to use interfaces.
                            UML- All the diagrams like Sequence diagram have always been there; got their terminology, specification.		
                        </BuildingSystemOnArchitectures>
                        <ChoosingFrameworkOfArchitecture>
                            Difference between Architecture and Pattern- 
                                pattern is set of guidelines, how to architect your app.
                                framework- set of classes and libraries written to help you build app using MVC pattern.
                                    Why?
                                        Extensible
                                            Extending Framework to customize to needs.
                                            Gets us started quickly- face problem head on.
                                        Provide prebuilt classes- No repetative common work for every app.
                                                100 web apps to make. You won't repeat MVC framework again.
                                        Leverages best practices of Industry. You get design constraints.
                                                Using a lot of good advices from Industry.
                        </ChoosingFrameworkOfArchitecture> 
                        <MVCArchitecture>
                            It is architecture to build systems.
                            Software is its implementation to make system behave in that way.
                            Architecture need not be on computers, it is system level view.
                                    how system works
                                    Eg- Railway reservation system was working even in 1900 w/o computers.
                                            It had a system.
                                            While studying architecture, PC doesn't even exist.
                            Evolution
                                    Controller- Servlet does eth- receive requests,contacting DB, prepare webpages and send.
                                            @Stakeman- does eth in the hotel that he owns.					
                                    Beans- Servlet receives the requests and passes on to Beans for DB connectivity and delivers the results from there.
                                            @Stakeman- takes order, passes to cook, decorates and delivers.
                                    MVC- JSPs decorate and deliver in addition to past.
                                            @Stakeman receives order, passes for cooking, decorator delivers.
                                            Benefits- 
                                                    Separation of concerns
                                                            View has to deliver as the demanding device,app.
                                                    address every request thru multi-threading.
                                                    Change 1 entity without affecting others. Even n beans,n JSPs.
                                                            like adding more JSPs to the application.
                                                            @Introduce new cuisines.
                                            Sees request parameters and decides which bean method to be called.
                                            can have many Servlets but 1 main- which will receive.
                                            These are class and libraries (foundation) that will help us make apps.
                                            for web,desktop apps, mobile apps.
                            <DetailedView>
                                Dreamt to have a restaurant- no employee- good cook. chair-table ready.
                                        customer comes-
                                                1. Get Cust order.
                                                2. Prepare food in the kitchen.
                                                3. Places and consolidate food on the tray as per order.
                                                4. Get the tray to the customer and serve.
                                        more customers- Can't manage all steps himself- java programmer told his problem
                                                hey! it's like coding servlets.
                                                Web application- 
                                                User makes request to url
                                                        what all servlet does- 
                                                                get request parameters and act on it accordings- get parameters.
                                                                processing- getting data out of db. JDBC- cnnect and retrieve.
                                                                format the results into html. print and embed live data from db into html.
                                                                return formatted html to requesting user.
                                Let me hire people- gets a cook for restaurant. Cooks will do nth.
                                        1. Get customers orders.
                                        2. Hands it over to cook.
                                        3. Cook prepares. consolidate and place.
                                        4. Get the tray to the cust and serve.
                                It's like beans in Business service.
                                        1. user requests.
                                        2. Servlet thread invokes Bean- publishes some methods.
                                                Bean connects with DB and gets raw data.
                                        2. Servlet gets data formats results to htmlm
                                        4. Sends formatted html back.
                                He gets another recruit- specialized in decorating food.
                                        1. get cust order.
                                        2. Street man Pass on the reqd info to the cook.
                                                Cook cooks.
                                        3. Street man Pass the food to food decorator.
                                                Decorator does it.
                                        4. Get tray back to cust and serve.
                                That's MVC.
                                        Servlet with beans and JSP.
                                        1. get request parameters.
                                        2. call biz service methods, bean- calls db and get results.
                                        3. waiter/ street man passes results to JSP,presenter. does decoration and doesn't have to pass to servlet. serves directly like presenter.
                                MVC - we are in good position to start off.
                                        Controller orchestrates eth- waiter/Servlet decides control of flow.
                                                many beans and many JSP. Which beans to be called and which JSP to be referred to.
                                                Many servlets- then 1 front controller- entry point- which servlet picks it up. 1 controller.
                                                sees request parameter and decides how to address.
                                        Model- 1 entity concerned with getting/provide/bring data from DB, doing DB. Business of Bean.
                                                role of the cook/data getting retrieved as model.
                                                safe to think as data of app and behavior that pulls up the data form model.
                                        View- what renders output/model into form that is presentable to user.
                                                UI part of it.
                                        Controller
                                Why MVC?
                                        Why hired cook- didn't want to do eth himself.
                                        New cuisines? rather than learning- hire specialist cook of cuisines- get to the right cook is all waiter has to do.
                                        Controller doesn't have to know model. Separated.
                                        View is separated from model- presenter is making its looks.
                                        Business bean has to change, others don't worry. Change UI part- all others remain same.
                                        View is separated from controller. Controller doesn't worry presentation. calls right JSP as per the request.
                                <MVCFrameworks>
                                        Foundation on which you build your application.
                                                framework for desktop apps.
                                                framework for mobile apps.
                                        Diffn implementations of these concepts/pattern/(architecture- way you architect app).
                                        Eg-
                                                Struts
                                                Struts 2
                                                Spring MVC
                                                Play
                                                JSF
                                                Wicket
                                        <Struts2>
                                                It's an MVC framework that helps you make apps on MVC architecture/pattern.
                                                This is version 2- little more than version 1.
                                                Prebuilt classes for MVC we can use/extend.
                                                Making a framework
                                                        100 web apps to make- don't have Struts.
                                                                make your own MVC. To avoid repetetive work.
                                                                You have Business Service classes already- change from apps to apps.
                                                                        MVC interfaces with that.
                                                        Get clients' request parameters
                                                                Business service classes already there- maybe jar file.
                                                                Getting input
                                                                        1st module to handle client request/input parameters
                                                                        get,post-standard requests patterns.
                                                                        helpful when calling methods of business service- get me address of emp 1234.
                                                                                1234 passed to method on Business Service classes. getEmpOfID()
                                                                Model
                                                                        Have a class Model in between- Model interface will call right business service.
                                                                                These are 2 components of framework.
                                                                                get the raw data.
                                                                Write JSPs- to present view of Model's output. Common JSP can't be made- written for every new apps.
                                                                        have tag libraries- for JSPs in diffn webapps
                                                                        isolated out. 100 apps- Lot of html code in each of them.
                                                                                take out some std libs helpful- i will use it.
                                                                XML Config Module
                                                                        Need sth to orchestrates- sth that calls right model,redirects to the right view- some module to route.
                                                                                Route using XML config.
                                                                                depending in request- 
                                                                                        get user profile- from model.
                                                                                        Change password- Call Model to change password and redirect to right JSP.
                                                                                Looksup XML, & calls up the right module.
                                                                                        100 apps- XML different for every apps
                                                        This approach is very similar to Struts 2 framework.
                                                                Interceptors- gateways- getting user request parameters.
                                                                        Not write interceptors- already taken care of- No code reqd to get inputs from user input available from Interceptors.
                                                                        I/P will be made available in Action Class.
                                                                Action Class- where we call BS methods. Request parameters passed onto it. Struts make them available- no worry.
                                                                JSP- Std Tag libs provided by Struts 2 used inside your JSPs.

                                                        Write JSPs that uses struts tag libraries.
                                                                Struts XML- Module that reads XML. Configure all your interactions in struts XML- eg- This url- this interaction class has to handle.
                                                                        Module takes care of the interaction.
                                                                        Also available. Write the xml that it reads from.
                                                                        Write action classes to read from BS classes- only you can know what your Business service methods are.
                                                Setting up
                                                        Set up IDE for app-devp.
                                                        Go to struts2 website and download distribution. set up the project to have distribution included in the build path.
                                        </Struts2>
                                </MVCFrameworks>
                            </DetailedView>
                            Pattern vs Framework
                                    Model- 1 entity which provides data;
                                    View- presentable data.
                                    Controller- orchestrates the whole flow.
                            Frameworks on MVC- 100 apps to be made- we will make some common modules to get us started quickly, right.
                                    Assume we have business services- change with apps. class/jar files.
                                    How should we do it? get client request parameters- whole flow depends on that.
                                            So Handle Input parameters- used to call business methods. get empId's name.
                                            Model to collect input params and calls right business service.
                                                    we get raw data.
                                            JSPs to be written everytime for apps- but tag libraries- isolated (std html code libs separated)
                                            XML Module for routing- for guiding every request thru this framework.
                                                    xml unique for every app but design of contrller remaiins same.
                                    Struts2
                                            Interceptors- gateway to get request parameters from users.
                                                    included by default and we can override them.

                                            Action classes write model- easy to fetch data from biz services classes.
                                                    like views for the business classes.
                                            Business Services- reply action classes with raw data.
                                            JSPs- Some std tag libs inside JSPs by struts.
                                            Struts xml- Controller- for this url- this action class has to handle and so forth.
                                                    takes the request of client and finds out the action class to execute- like web.xml- for this url, which servlet to call.
                                                    maps input url to action class/JSP- thus controls the exec flow of request.
                                                    for servlets- doGet,doPost methods of action class called based on web.xml class.
                                                    by default struts call execute method in the class specified by xml.
                        </MVCArchitecture>
                    </SystemArchitectures>
                </KnowStateOfArtOrAffairs>
                <BridgeTheGap>
                    manipulation/exploiting State of Art/Affairs to bridge the gap
                    Business Analysts decide
                </BridgeTheGap>
            </VisionOfPerfectWorld>
            <ProtocolSetting>
                Solution Devised/ Protocols set (knowing your powers- what we can do)- Researchers/ Business people work here- low/ high level
                <ChoosingTechnology>
                        Only Tech that's trending not specific tools to use.
                        <Swings>
                            allows you to create Graphical User Interfaces
                            <Library>
                            create GUI interfaces
                                    import javax.swing.*;
                            </Library>
                            <Components>
                                <FrameWindow>
                                        extend the JFrame class to make a frame
                                                public class LessonTwenty extends JFrame{
                                                    public static void main(String[] args){
                                                        new LessonTwenty();
                                                    }
                                                    public LessonTwenty(){this.setSize(40,40);}
                                        add(thePanel);
                                        setVisible(true);
                                        setSize(400, 400);
                                        setLocationRelativeTo(null);
                                                Opens the frame in the middle of the screen---------------------------------------------------
                                                You could also define position based on a component    
                                        Another way to center
                                                setLocation(x,y);
                                                        How to get coordinates?
                                                        // Toolkit is the super class for the Abstract Window Toolkit
                                                        // It allows us to ask questions of the OS
                                                        import
                                                                import java.awt.Dimension;
                                                                import java.awt.Toolkit;
                                                        Toolkit tk = Toolkit.getDefaultToolkit();
                                                        // A Dimension can hold the width and height of a component
                                                        // getScreenSize returns the size of the screen
                                                        Dimension dim = tk.getScreenSize();
                                                        // dim.width returns the width of the screen
                                                        // this.getWidth returns the width of the frame you are making
                                                         int xPos = (dim.width / 2) - (this.getWidth() / 2);
                                                         int yPos = (dim.height / 2) - (this.getHeight() / 2);
                                                        // You could also define the x, y position of the frame
                                        setResizable(false);
                                                //resizing window
                                        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                                                // Define how the user exits the program
                                                // This closes when they click the close button
                                                // Without this Java will eventually close the app
                                        Define the title for the frame
                                                this.setTitle("My First Frame");
                                        addWindowListener(lForWindow);
                                JPanel contains all of the components for your frame
                                        JPanel thePanel = new JPanel();
                                        setBorder(border1);
                                        add components to it using add(componentName);
                                                thePanel.add(label1);
                                        thePanel.add(scrollbar1);	//and components may be contained in scrollbar
                                        panel.add(innerPanel);
                                        panel.remove(innerPanel);
                                        revalidate();repaint();	//Japplets
                                        setLayout
                                        lMouseListener(lForMouse);
                                JLabel with its text ----------
                                        JLabel label1 = new JLabel("Tell me something");
                                        setText("New Text");
                                        label1.setToolTipText("Doesn't do anything");//WHEN you hover
                                </FrameWindow>
                                <JButton> 
                                        JButton button1 = new JButton("Send");
                                        setBorderPainted(false);
                                                // How to hide the button border (Default True)
                                        setContentAreaFilled(false);
                                                hide the button background (Default True)
                                        setText("New Button");
                                                change the text for the label
                                        setToolTipText("Doesn't do anything either");
                                        addListener(lForButton);
                                        setVisible(false);
                                JTextfield
                                        JTextField textField1 = new JTextField("Type Here", 15);
                                        setColumns(10);
                                                Change the size of the text field
                                        setText("New Text Here");
                                                Change the initial value of the text field
                                        setToolTipText("More of nothing");
                                                Change the tool tip for the text field
                                        requestFocus();

                                        Double.parseDouble(textField1.getText());
                                                catch(NumberFormatException excep){
                                        setFont(font);	//font is Font Class obj- new Font("Helvetica",Font.PLAIN,18);
                                                //import java.awt.Font;
                                        addKeyListener(lKeyListener);
                                </JButton>	
                                <JTextArea>

                                        JTextArea textArea1 = new JTextArea(15, 20);
                                        setText("Just");
                                                Set the default text for the text area
                                        setLineWrap(true);
                                                If text doesn't fit on a line, jump to the next
                                        setWrapStyleWord(true);
                                                Makes sure that words stay intact if a line wrap occurs
                                        getLineCount();
                                                Gets the number of newlines in the text
                                        append(" number of lines: " + numOfLines);
                                                Appends text after the current text
                                </JTextArea>
                                <JScrollPane>
                                JScrollPane scrollbar1 = new JScrollPane(textArea1, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);		
                                        //add scrolls to any component- later add this scrollbar into the panel or frame.
                                        Adds scroll bars to the text area ----------
                                        Other options: VERTICAL_SCROLLBAR_ALWAYS, VERTICAL_SCROLLBAR_NEVER
                                        this is the 1 added to frame/panel not the content inside of it.
                                </JScrollPane>
                            </Components>

                            <Event>
                                    import java.awt.event.*;
                                    Make a ListenerClass implements ActionListener,KeyListener,WindowListener,MouseListener interfaces
                                            event captured by methods implemented in there
                                            Add instance of this class to the component using
                                                    button1.addActionListener(lForButton);
                                                    textField1.addKeyListener(lForKeys);
                                                    this.addWindowListener(lForWindow);
                                                    thePanel.addMouseListener(lForMouse);



                        }
                            </Event> 
                        // Implements ActionListener so it can react to events on components


                            <Listener>
                            All Listener Classes Methods and Attributes of events
                                <ActionListener>
                                // This method is called when an event occurs
                                    public void actionPerformed(ActionEvent e){
                                            // Check if the source of the event was the button
                                            if(e.getSource() == button1){
                                                buttonClicked++;
                                                // Change the text for the label
                                                textArea1.append("Button clicked " + buttonClicked + " times\n" );
                                                // e.getSource().toString() returns information on the button
                                                // and the event that occurred
                                            }
                                    }

                                }
                                </ActionListener> 
                                <KeyListener>
                                        // By using KeyListener you can track keys on the keyboard
                                        // Handle the key typed event from the text field.
                                                public void keyTyped(KeyEvent e) {
                                                    textArea1.append("Key Hit: " + e.getKeyChar() + "\n");
                                                }

                                        // Handle the key-pressed event from the text field.
                                                public void keyPressed(KeyEvent e) {

                                                }

                                        // Handle the key-released event from the text field.
                                                public void keyReleased(KeyEvent e) {

                                                }
                                </KeyListener>
                                <MouseListener>
                             MouseListener Class Methods for Events
                                        private class ListenForMouse implements MouseListener{}

                                        Called when a mouse button is clicked

                                                public void mouseClicked(MouseEvent e) {

                                                    textArea1.append("Mouse Panel Pos: " + e.getX() + " " + e.getY() + "\n");
                                                    textArea1.append("Mouse Screen Pos: " + e.getXOnScreen() + " " + e.getYOnScreen() + "\n");
                                                    textArea1.append("Mouse Button: " + e.getButton()  + "\n");
                                                    textArea1.append("Mouse Clicks: " + e.getClickCount()  + "\n");

                                                }

                                        Called when the mouse enters the component assigned the MouseListener

                                                public void mouseEntered(MouseEvent arg0) {}

                                        Called when the mouse leaves the component assigned the MouseListener

                                                mouseExited(MouseEvent arg0){}
                                        Mouse button pressed

                                                mousePressed(MouseEvent arg0){}
                                        Mouse button released

                                                public void mouseReleased(MouseEvent arg0) {}
                                </MouseListener>
                                <WindowListener>
                                        WindowListener Methods and corresponding WindowEvent Attributes

                                // Called when window is the active window

                                        public void windowActivated(WindowEvent e) {
                                                textArea1.append("Window Activated\n");

                                        }

                                // Called when window is closed using dispose
                                        // this.dispose(); can be used to close a window

                                        public void windowClosed(WindowEvent arg0) {
                                            // TODO Auto-generated method stub

                                        }

                                // Called when the window is closed from the menu

                                        public void windowClosing(WindowEvent arg0) {
                                            // TODO Auto-generated method stub

                                }

                                // Called when a window is no longer the active window

                                        public void windowDeactivated(WindowEvent e) {
                                            textArea1.append("Window Activated\n");

                                        }

                                // Called when the window goes from minimized to a normal state

                                        public void windowDeiconified(WindowEvent arg0) {
                                            textArea1.append("Window in Normal State\n");

                                        }

                                // Called when the window goes from normal to a minimized state

                                        public void windowIconified(WindowEvent arg0) {
                                            textArea1.append("Window Minimized\n");

                                        }

                                // Called when the window is first created

                                        public void windowOpened(WindowEvent arg0) {
                                            textArea1.append("Window Created\n");

                                        }

                                </WindowListener>
                                <ChangeListener>
                                Listens for slides on slider

                                public void stateChanged(ChangeEvent e){
                                    // Check if the source of the event was the JSlider
                                    if(e.getSource() == howManyTimes)
                                            label3.setText("Perform How Many Times? " + howManyTimes.getValue() );
                                }
                                </ChangeListener>
                            </Listener>
                            <Libraries>
                            // New event listener that monitors changing values for components
                                    import javax.swing.event.ChangeEvent;
                                    import javax.swing.event.ChangeListener;
                            // Allows me to format the numbers
                                    import java.text.NumberFormat;
                            // Allows me to edit borders on panels
                            import javax.swing.border.*;
                            </Libraries>
                            <MoreComponents>
                                <JCheckBox>
                                JCheckBox dollarSign, commaSeparator;
                                        isSelected()
                                        setSelected(true);
                                </JCheckBox>
                                <JRadioButton>
                                JRadioButton addNums, subtractNums, multNums, divideNums;
                                        selected
                                </JRadioButton>
                                <JSlider>
                                        JSlider howManyTimes; 
                                        howManyTimes = new JSlider(0, 99, 1);
                                                Creates a slider with a min value of 0 thru 99 and an initial value of 1
                                                Defines the minimum space between ticks
                                                        howManyTimes.setMinorTickSpacing(1);
                                                setMajorTickSpacing(10);
                                                        Defines the minimum space between major ticks
                                                setPaintTicks(true);
                                                        Says to draw the ticks on the slider
                                                setPaintLabels(true);
                                                        Says to draw the tick labels on the slider
                                                getValue();
                                                        fetches the value
                                </JSlider>
                                <JOptionPane>
                                        showMessageDialog(Lesson22.this, numFormat.format(totalCalc), "Solution", JOptionPane.INFORMATION_MESSAGE);
                                                //a dialog box opens- informing- the total sum in Dollars.
                                                //numFormat.format is method to add dollar sign in front.
                                                // JOptionPane displays a popup on the screen

                                                // (parentComponent, message, title, error icon)

                                                // Error Icons: WARNING_MESSAGE, QUESTION_MESSAGE, PLAIN_MESSAGE
                                </JOptionPane>
                                <ButtonGroup>
                                        so that only 1 radiobutton from the group gets selected.
                                        ButtonGroup operation = new ButtonGroup();
                                        // Add radio buttons to the group
                                                operation.add(addNums);

                                                operation.add(subtractNums);

                                                operation.add(multNums);

                                                operation.add(divideNums);

                                        // Create a new panel to hold radio buttons and add them
                                </ButtonGroup>
                                <Border>
                                        Border operBorder = BorderFactory.createTitledBorder("Operation");

                                                // Surround radio button panel "Operation" with a border

                                                // You can define different types of borders

                                                createEtchedBorder, createLineBorder, createTitledBorder

                                                // createLoweredBevelBorder, createRaisedBevelBorder

                                                // Set the border for the panel
                                </Border>
                                Misc
                                        if(addNums.isSelected()) 
                                                dollarSign.isSelected()) 
                                                    NumberFormat numFormat = NumberFormat.getNumberInstance();
                                <JComboBox>
                                        JComboBox favoriteShows;
                                        String[] shows = {"Breaking Bad", "Life on Mars", "Doctor Who"};
                                        favoriteShows = new JComboBox(shows);
                                                Create a combo box and add the array of shows

                                        favoriteShows.addItem("Pushing Daisies");
                                                Add an item to the combo box
                                        favoriteShows.insertItemAt("Dexter", 1);

                                        // 

                                        favoriteShows.setMaximumRowCount(3);
                                                Only show 3 items at a time
                                        favoriteShows.removeItem("Dexter");
                                                Remove the item named Dexter
                                        Remove the item at index 1
                                                favoriteShows.removeItemAt(1);

                                        Remove all items
                                                favoriteShows.removeAllItems();
                                        setEditable(true);
                                        Get item at index 0
                                                infoOnComponent = "Item at 0: " + favoriteShows.getItemAt(0) + "\n";

                                        Get the number of items in the combo box
                                                infoOnComponent += "Num of Shows: " + favoriteShows.getItemCount() + "\n";

                                        Get the index for the selected item

                                                infoOnComponent += "Selected ID: " + favoriteShows.getSelectedIndex() + "\n";

                                        Get the value for the selected item

                                                infoOnComponent += "Selected Show: " + favoriteShows.getSelectedItem() + "\n";

                                        Find out if the values in the combo box are editable

                                                infoOnComponent += "Combo Box Editable: " + favoriteShows.isEditable() + "\n";

                                        JOptionPane.showMessageDialog(Lesson24.this, infoOnComponent, "Information", JOptionPane.INFORMATION_MESSAGE);

                                                infoOnComponent = "";
                                </JComboBox>
                                <JList>
                                JList favoriteMovies, favoriteColors;
                                        String[] movies = {"Matrix", "Minority Report", "Big"};

                                        // Creating a List Box

                                                favoriteMovies = new JList(movies);

                                        // Define the height of each cell

                                                favoriteMovies.setFixedCellHeight(30);

                                        // Define the width of each cell

                                                favoriteMovies.setFixedCellWidth(150);

                                        // Define how many selections can be made
                                                // MULTIPLE_INTERVAL_SELECTION: Select what ever you want
                                                // SINGLE_SELECTION: Select only one
                                                // SINGLE_INTERVAL_SELECTION: Select as many as you want if in order

                                                favoriteMovies.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

                                        // All the methods for lists
                                                /*
                                                 * getSelectedIndex(): returns the index for the first selected item
                                                 * getSelectedIndexes(): returns every selection in a list
                                                 * getSelectedValue(): returns the value of the first selected
                                                 * getSelectedValues(): returns an array of all values
                                                 * isSelectedIndex(): returns true if index is selected
                                                 */



                                        setVisibleRowCount(4);// Only display 4 items at a time
                                DefaultListModel defListModel = new DefaultListModel();
                                        // You can't change items in a list unless you store the items
                                        // in a DefaultListModel

                                        String[] colors = {"Black", "Blue", "White", "Green", "Orange", "Gray", "Pink"};

                                        // How to load a String array into a DefaultListModel

                                        for(String color: colors){
                                            defListModel.addElement(color);
                                        }

                                        // Add item named Purple to index number 2

                                        defListModel.add(2, "Purple");

                                        // Create a List box filled with items in the DefaultListModel

                                        favoriteColors = new JList(defListModel);

                                        if(defListModel.contains("Black")) infoOnComponent += "Black is here\n";

                                                // Check if the list isn't empty

                                                if(!defListModel.isEmpty()) infoOnComponent += "Isn't Empty\n";

                                                // return the number of items in the DefaultListModel

                                                infoOnComponent += "Elements in the list " + defListModel.size() + "\n";

                                                // return the first element in the list

                                                infoOnComponent += "Last Element " + defListModel.firstElement() + "\n";

                                                // return the last element in the list

                                                infoOnComponent += "Last Element " + defListModel.lastElement() + "\n";

                                                // return the last element in the list

                                                infoOnComponent += "Element in index 1 " + defListModel.get(1) + "\n";

                                                // Remove the item in index 0

                                                defListModel.remove(0);

                                                // Remove the item named Big

                                                defListModel.removeElement("Blue");

                                                // Create an array filled with the list items

                                                Object[] arrayOfList = defListModel.toArray();

                                                // Iterate through the array

                                                for(Object color: arrayOfList){
                                                infoOnComponent += color + "\n";
                                                }
                                </JList>
                                JOptionPane.showMessageDialog(Lesson25.this, infoOnComponent, "Information", JOptionPane.INFORMATION_MESSAGE);

                                                        infoOnComponent = "";

                                <JFileChooser>
                                JFileChooser fileChooser = new JFileChooser(randomDir);
                                         Creates a file chooser at the location specified
                                        fileChooser.showOpenDialog(this);
                                                Opens the file chooser
                                </JFileChooser>         	

                                <JScrollPane>
                                JScrollPane scroller;
                                        scroller = new JScrollPane(favoriteColors,
                                                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                                                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

                                        // Define the height of each cell

                                        favoriteColors.setFixedCellHeight(30);

                                        // Define the width of each cell

                                        favoriteColors.setFixedCellWidth(150);

                                        thePanel.add(favoriteMovies);

                                        // You add the scroll bar container, not the list

                                        thePanel.add(scroller);

                                        GetPreferredSize
                                                JScrollPane scrollBox = new JScrollPane(theTree);

                                                Set the size for the JScrollPane so that everything fits

                                                        Dimension d = scrollBox.getPreferredSize();
                                                        d.width = 200;
                                                        scrollBox.setPreferredSize(d);

                                                        thePanel.add(scrollBox);
                                </JScrollPane>        
                                <JSpinner>
                                        Create a basic 1-9 number spinner

                                                spinner1 = new JSpinner();
                                        Create a spinner with initial number, starting number, max number, increment with each click

                                                spinner2 = new JSpinner(new SpinnerNumberModel(1, 1, 100, 1));

                                                thePanel.add(spinner2);

                                        Create a spinner using default values

                                                String[] weekDays = {"Mon", "Tues", "Weds", "Thurs", "Fri"};
                                                spinner3 = new JSpinner(new SpinnerListModel(weekDays));

                                        Set the size for the spinner so that everything fits

                                                Dimension d = spinner3.getPreferredSize();
                                                d.width = 80;
                                                spinner3.setPreferredSize(d);
                                        Spinner On Dates	
                                                Date todaysDate = new Date();

                                                spinner4 = new JSpinner(new SpinnerDateModel(todaysDate, null, null,
                                                        Calendar.DAY_OF_MONTH));
                                                        // Editor for JSpinner that allows easy incrementing of dates

                                                                import javax.swing.SpinnerDateModel;
                                                        // Create a date spinner & set default to today, no minimum, or max
                                                        // Increment the days on button presses
                                                        // Can also increment YEAR, MONTH, or DAY_OF_MONTH

                                                JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(spinner4, "dd/MM/yy");
                                                spinner4.setEditor(dateEditor);
                                                        // DateEditor is an editor that handles displaying & editing the dates


                                        ChangeListener                 
                                                Tell Java that you want to be alerted when an event occurs on the spinner

                                                spinner4.addChangeListener(lForSpinner);
                                                spinner1.getValue() + "\n";
                                </JSpinner>        
                                <JTrees>

                                        import javax.swing.tree.*;

                                        // A Tree contains nodes that can contain other nodes

                                                JTree theTree;

                                                    // If a node holds other nodes it is called a parent node
                                                    // The nodes inside of a parent node are children nodes
                                                    // Nodes on the same level are called siblings
                                                    Object treeObject = theTree.getLastSelectedPathComponent();
                                                        //returns a node.

                                                Make a node
                                                        DefaultMutableTreeNode fileSystem = new DefaultMutableTreeNode("C Drive");
                                                        DefaultMutableTreeNode documents, work, games, emails;
                                                Make node the root
                                                        theTree = new JTree(fileSystem);	//fileSystem node is made root 

                                                Only 1 item can be selected
                                                        theTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
                                                                // Makes sure only one item can be selected at a time
                                                                // By default you can make multiple selections

                                               Show 8 rows of the tree at a time

                                                        theTree.setVisibleRowCount(8);

                                                //Add children nodes to a node

                                                        documents = addAFile("Docs", fileSystem);
                                                        DefaultMutableTreeNode newFile = new DefaultMutableTreeNode(fileName);	//new node created
                                                        fileSystem.add(newFile);	//attached node as child


                                               Operations on Node
                                                        Object treeObject = theTree.getLastSelectedPathComponent();

                                                        // Cast the Object into a DefaultMutableTreeNode

                                                        DefaultMutableTreeNode theFile = (DefaultMutableTreeNode) treeObject;



                                                        getUserObject();
                                                                Returns the object stored in this node and casts it to a string

                                                        getChildCount() + "\n";
                                                                //Get no of children of this node.

                                                        Get the number of siblings

                                                                getSiblingCount() + "\n";

                                                        Get the parent of this node

                                                                getParent() + "\n";

                                                        Get the next node

                                                                getNextNode() + "\n";

                                                        // Get the previous node

                                                                getPreviousNode() + "\n";

                                                        // Get the children for the node

                                                                outputString += "\nChildren of Node\n";

                                                                // children() returns an enumeration that contains all the children
                                                                // This for loop will continue to run as long as there are more elements
                                                                // nextElement() returns the next element in the list

                                                                for (Enumeration enumValue = theFile.children(); enumValue.hasMoreElements(); ) {

                                                                    outputString += enumValue.nextElement() + "\n";

                                                                }
                                                                // import java....Enumeration

                                                        Get the path from the root

                                                                returns an array of TreeNodes

                                                                TreeNode[] pathNodes = theFile.getPath();

                                                        Cycle through the TreeNodes

                                                                for(TreeNode indivNodes: pathNodes){
                                                                        outputString += indivNodes + "\n";
                                                                }
                                </JTrees>
                                <JTable>
                                JTable	
                                        dTableModel.addRow(tempRow);

                                        JTable table = new JTable(dTableModel);
                                                // Create a JTable using the custom DefaultTableModel

                                        // Increase the font size for the cells in the table

                                                table.setFont(new Font("Serif", Font.PLAIN, 20));

                                        // Increase the size of the cells to allow for bigger fonts

                                                table.setRowHeight(table.getRowHeight()+10);

                                        // Allows the user to sort the data

                                                table.setAutoCreateRowSorter(true);



                                        // Disable auto resizing
                                                table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

                                        table.getSelectedRow();		//get the selected row for deletion by tablemodel,updation! returns what?
                                        table.getSelectedColumn();
                                        table.setValueAt(value, table.getSelectedRow(), table.getSelectedColumn()); 





                                 TableColumn
                                        // Set the width for the columns

                                                TableColumn col1 = table.getColumnModel().getColumn(0);
                                                col1.setPreferredWidth(100);

                                                TableColumn col2 = table.getColumnModel().getColumn(1);
                                                col2.setPreferredWidth(190);

                                                TableColumn tc = table.getColumn("POS");
                                                centerRenderer = new CenterTableCellRenderer();
                                                tc.setCellRenderer(centerRenderer);

                                          If you want to right justify column

                                                        TableColumn tc = table.getColumn("TTRC");
                                                        RightTableCellRenderer rightRenderer = new RightTableCellRenderer();
                                                        tc.setCellRenderer(rightRenderer);

                                                        class RightTableCellRenderer extends DefaultTableCellRenderer {  
                                                              public RightTableCellRenderer() { 
                                                                setHorizontalAlignment(JLabel.RIGHT); 	//center
                                                              }  
                                                        }

                                Add Table to ScrollPane and to Frame
                                        JScrollPane scrollPane = new JScrollPane(table);
                                        frame.add(scrollPane, BorderLayout.CENTER);
                                        frame.setSize(800, 500);
                                        frame.setVisible(true);


                                        Working with SqlDates!!
                                                SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");
                                                        // Will convert from string to date
                                                try {
                                                    dateBirthDate = dateFormatter.parse(sDate);		//convert string into the format specified.
                                                    sqlBirthDate = new java.sql.Date(dateBirthDate.getTime());	//convert java date to sql date.
                                                } catch (ParseException e1)

                                                Object[] president = {sFirstName, sLastName, sState, sqlBirthDate};
                                                dTableModel.addRow(president);


                                        // Set default text and size for text field

                                                tfBirthDate = new JTextField("yyyy-MM-dd", 10);

                                        // Create a panel to hold editing buttons and fields

                                                JPanel inputPanel = new JPanel();	//add components
                                                frame.add(inputPanel, BorderLayout.SOUTH);







                                API/Libraries

                                        Needed to track when the user clicks on a table cell

                                        import java.awt.event.MouseAdapter;
                                        import java.awt.event.MouseEvent;


                                import javax.swing.JOptionPane;

                                Upadating capabilities of DB
                                        Connection object is used to provide access to a database

                                        Statement sqlState = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
                                                    ResultSet.CONCUR_UPDATABLE);

                                Add Data to Table
                                        Show on Screen
                                                Add the row of data to the JTable

                                                        dTableModel.addRow(tempRow);

                                        In DB
                                                //Moves the database to the row where data will be placed

                                                        rows.moveToInsertRow();

                                                Update the values in the database

                                                        rows.updateString("first_name", sFirstName);
                                                        rows.updateString("last_name", sLastName);

                                                        rows.updateString("state", sState);
                                                        rows.updateDate("birth", (Date) sqlBirthDate);

                                                Inserts the changes to the row values in the database

                                                        rows.insertRow();

                                                Directly updates the values in the database

                                                        rows.updateRow();

                                                Go to the last row inserted and get the id

                                                        rows.last();
                                                        presID = rows.getInt(1);
                                Removal from Table
                                        From Screen	
                                                dTableModel.removeRow(table.getSelectedRow());
                                        From DB                  
                                                // Moves the database to the row currently selected
                                                // getSelectedRow returns the row number for the selected row

                                                rows.absolute(table.getSelectedRow());

                                                // Deletes the selected row from the database

                                                rows.deleteRow();


                                JOptionPane
                                        showInputDialog- for entering values into a value.
                                                String value = JOptionPane.showInputDialog(null,"Enter Cell Value:");


                                MouseListerner/MouseAdapter to Table
                                      table.addMouseListener(new MouseAdapter()){ 
                                            public void mouseReleased(MouseEvent me){
                                                String value = JOptionPane.showInputDialog(null,"Enter Cell Value:");

                                                // Makes sure a value is changed only if OK is clicked

                                                if (value != null) 
                                                { 
                                                    table.setValueAt(value, table.getSelectedRow(), table.getSelectedColumn()); 
                                                } 


                                                try {
                                                    // Move to the selected row

                                                    rows.absolute(table.getSelectedRow()+1);

                                                    // Get the name of the selected column

                                                    String updateCol = dTableModel.getColumnName(table.getSelectedColumn());
                                                    }}}

                                Previous to Java 1.7 you couldn't use Strings in a Switch
                                        // If you get an error here it is because you aren't using Java 1.7

                                        switch (updateCol) {

                                        // Uses a different update method depending on the data type

                                        case "birth":
                                            sqlBirthDate = getADate(value);
                                            rows.updateDate(updateCol, (Date) sqlBirthDate);

                                            rows.updateRow();
                                            break;

                                        default:
                                            rows.updateString(updateCol, value);
                                            System.out.println("Current Row: " + rows.getRow());

                                            rows.updateRow();
                                            break;

                                        }

                                /*
                                 * ALTER TABLE president
                                   ADD COLUMN pres_id INT AUTO_INCREMENT NOT NULL FIRST,
                                   ADD PRIMARY KEY(pres_id);

                                   alter table president modify city varchar(20); # Allow city to be NULL

                                   delete from president where pres_id = 42;
                                 */

                                </JTable>
                                JEditorPane- Refer Code
                            </MoreComponents>
                            <Libraries>	
                            // Object that allows me to use height & width units

                                    import java.awt.Dimension;

                            // Used to get todays date to use with dates

                                    import java.util.Date;



                            // Calendar provides methods that make it easy to work with Calendar

                                    import java.util.Calendar;


                            // Enumerations are used to store related items together

                                            import java.util.Enumeration;
                            </Libraries>
                            <Layouts>
                                <Libraries>
                                        import java.awt.BorderLayout;
                                                //	import java.awt.Dimension;
                                        import java.awt.FlowLayout;
                                </Libraries>
                                <FLOWLayout>
                                        // Create a flow layout (Default)
                                                JPanel thePanel = new JPanel();
                                                thePanel.setLayout(new FlowLayout(FlowLayout.LEFT));
                                                Define the flow layout alignment
                                                        FlowLayout.RIGHT, FlowLayout.CENTER

                                                You can also define the pixels that separate the components
                                                        FlowLayout(alignment, horz gap, vertical gap)
                                        Add Components normally
                                                thePanel.add(but1);
                                </FLOWLayout>
                                <BORDERLayout> 
                                        thePanel.setLayout(new BorderLayout());

                                        If you put components in the same space the last one in stays and everything else goes
                                                EX.
                                                thePanel.add(button1, BorderLayout.NORTH);
                                                thePanel.add(button2, BorderLayout.NORTH);
                                                Only button2 shows
                                         Combination of layouts for better looks
                                                If you want more than one component to show up in the same part of a border layout put them in a panel and then add the panel to the border layout panel
                                                         JPanel thePanel2 = new JPanel();

                                                                 thePanel2.add(button1);
                                                                 thePanel2.add(button2);

                                                        thePanel.add(thePanel2, BorderLayout.NORTH);
                                         Add components to panel.
                                                thePanel.add(button1, BorderLayout.NORTH);
                                                thePanel.add(button2, BorderLayout.SOUTH);
                                                thePanel.add(button3, BorderLayout.EAST);
                                                thePanel.add(button4, BorderLayout.WEST);
                                                thePanel.add(button5, BorderLayout.CENTER);
                                </BORDERLayout>       
                                <BOXLayout>         
                                        Box theBox = Box.createHorizontalBox();

                                        You can also use Box theBox = Box.createVerticalBox();
                                        /*
                                        theBox.add(button1);
                                        theBox.add(button2);
                                        theBox.add(button3);
                                        theBox.add(button4);
                                        */

                                              You can also separate the components with struts
                                        /*
                                        theBox.add(button1);
                                        theBox.add(Box.createHorizontalStrut(4));
                                        theBox.add(button2);
                                        theBox.add(Box.createHorizontalStrut(4));
                                        theBox.add(button3);
                                        theBox.add(Box.createHorizontalStrut(4));
                                        theBox.add(button4);
                                                */
                                        setBorder(BorderFactory.createTitledBorder("Time"));
                                                //can encapsulate Checkboxes into a panel.

                                        Rigid area gives you the option to space using horizontal and vertical spacing

                                                theBox.add(button1);
                                                theBox.add(button2);
                                                CreateRigidArea
                                                // theBox.add(Box.createRigidArea(new Dimension(30, 20)));
                                        Glue
                                                When you use a glue you position the components as far apart as possible while remaining on the screen
                                                There is also a createVerticalGlue

                                                theBox.add(Box.createHorizontalGlue());
                                                theBox.add(button3);
                                        Add BoxView to the frame. 
                                                this.add(theBox);

                                                // this.add(thePanel); // Don't use for BOX LAYOUT
                                </BOXLayout>
                                <GridBagLayoutAndOthers>
                                        <Libraries>
                                                import java.awt.GridBagConstraints;
                                                import java.awt.GridBagLayout;
                                                import java.awt.GridLayout;

                                                import java.awt.Insets;
                                        </Libraries>
                                        SetLayout
                                                JPanel thePanel = new JPanel();

                                                thePanel.setLayout(new GridLayout(0,3,2,2));
                                                        //Create a Grid Layout with as many rows as needed and 3 columns. The last 2 parameters create a horizontal gap of 2 pixels and a vertical gap of 2 pixels.

                                                thePanel.setLayout(new GridBagLayout());

                                                        // You create a GridBagContraints object that defines
                                                        // defaults for your components
                                        GridBagConstraints
                                                GridBagConstraints gridConstraints = new GridBagConstraints();

                                                // Define the x position of the component

                                                        gridConstraints.gridx = 1;

                                                // Define the y position of the component

                                                        gridConstraints.gridy = 1;

                                                // Number of columns the component takes up

                                                        gridConstraints.gridwidth = 1;

                                                // Number of rows the component takes up

                                                        gridConstraints.gridheight = 1;

                                                // Gives the layout manager a hint on how to adjust component width (0 equals fixed)

                                                        gridConstraints.weightx = 50;

                                                // Gives the layout manager a hint on how to adjust component height (0 equals fixed)

                                                        gridConstraints.weighty = 100;

                                                // Defines padding top, left, bottom, right

                                                        gridConstraints.insets = new Insets(5,5,5,5);

                                                // Defines where to place components if they don't fill the space: CENTER, NORTH, SOUTH, EAST, WEST NORTHEAST, etc.

                                                        gridConstraints.anchor = GridBagConstraints.CENTER;

                                                // How should the component be stretched to fill the space: NONE, HORIZONTAL, VERTICAL, BOTH

                                                        gridConstraints.fill = GridBagConstraints.BOTH;

                                        Example of using Gridconstraints
                                                textResult = new JTextField("0",20);

                                                // Defines the font to use in the text field

                                                Font font = new Font("Helvetica", Font.PLAIN, 18);
                                                textResult.setFont(font);

                                                but1 = new JButton("1");
                                                but2 = new JButton("2");
                                                but3 = new JButton("3");
                                                but4 = new JButton("4");
                                                but5 = new JButton("5");
                                                but6 = new JButton("6");
                                                but7 = new JButton("7");
                                                but8 = new JButton("8");
                                                but9 = new JButton("9");
                                                butPlus = new JButton("+");
                                                but0 = new JButton("0");
                                                butMinus = new JButton("-");
                                                clearAll = new JButton("C");

                                                thePanel.add(clearAll,gridConstraints);
                                                gridConstraints.gridwidth = 20;
                                                gridConstraints.gridx = 5;
                                                thePanel.add(textResult,gridConstraints);
                                                gridConstraints.gridwidth = 1;
                                                gridConstraints.gridx = 1;
                                                gridConstraints.gridy = 2;
                                                thePanel.add(but1,gridConstraints);
                                                gridConstraints.gridx = 5;
                                                thePanel.add(but2,gridConstraints);
                                                gridConstraints.gridx = 9;
                                                thePanel.add(but3,gridConstraints);
                                                gridConstraints.gridx = 1;
                                                gridConstraints.gridy = 3;
                                                thePanel.add(but4,gridConstraints);
                                                gridConstraints.gridx = 5;
                                                thePanel.add(but5,gridConstraints);
                                                gridConstraints.gridx = 9;
                                                thePanel.add(but6,gridConstraints);
                                                gridConstraints.gridx = 1;
                                                gridConstraints.gridy = 4;
                                                thePanel.add(but7,gridConstraints);
                                                gridConstraints.gridx = 5;
                                                thePanel.add(but8,gridConstraints);
                                                gridConstraints.gridx = 9;
                                                thePanel.add(but9,gridConstraints);
                                                gridConstraints.gridx = 1;
                                                gridConstraints.gridy = 5;
                                                thePanel.add(butPlus,gridConstraints);
                                                gridConstraints.gridx = 5;
                                                thePanel.add(but0,gridConstraints);
                                                gridConstraints.gridx = 9;
                                                thePanel.add(butMinus,gridConstraints);


                                                // Adding buttons using the Grid Layout

                                                /*
                                                thePanel.add(but1);
                                                thePanel.add(but2);
                                                thePanel.add(but3);
                                                thePanel.add(but4);
                                                thePanel.add(but5);
                                                thePanel.add(but6);
                                                thePanel.add(but7);
                                                thePanel.add(but8);
                                                thePanel.add(but9);
                                                thePanel.add(butPlus);
                                                thePanel.add(but0);
                                                thePanel.add(butMinus);
                                                */

                                                this.add(thePanel);
                                </GridBagLayoutAndOthers>     
                            </Layouts>             
                        </Swings>
                        <DOTNET>
                            3.0,WinFx
                                WPF,Avalon-Windows Presentation Foundation-classes for building UI,document and media.rich media and 3d are coming up.
                                        WPF blends together application UI, documents, and media content, while exploiting the full power of your computer.
                                WCF-windows communication foundation,indigo- Secure, reliable, transacted, interoperable application to application communications
                                        unified programming model to build service oriented apps.
                                        .NET technologies for building and running connected systems.
                                WF-windows workflow foundation- prog model,engine and tools to quickly build workflow-enabled apps that model business processes.
                                WCS,infocard-Windows CardSpace-streamlining user registration and protect phishing		
                                        simplify and improve the safety of accessing resources and personal identity information.
                                                provide consistent User Experience
                                                hardened against tampering and spoofing
                                                        to protect end user's digital identities 
                                                        maintain end user control.
                            3.5
                                LINQ-prog model for data access that integrate query support directly within .NET languages.
                                        Reduce the complexity when working with the data.
                                        // lot of unwritten stuff- can't understand
                                AJAX- Asynchromous JavaScript and XML
                                        //a lot of stuff
                                ASP.NET 3.5
                                CLR Add-in Framework
                                Additional enhancements

                        </DOTNET>
                        <WebDevp>
                            <FrontEnd>
                                <HTML>
                                    <philosophy>
                                        www
                                            a technology using http (using HTML)- what we mean (generally) when we say I am using internet.
                                            is way of accessing i/f over internet 
                                                Internet- communication n/w linking comps worldwide
                                            which uses HTTP as language
                                                HTTP-Hypertext transfer protocol (client server model)
                                            for communication of web information hosted on web application
                                                website- [information hosted thru] collection of HTML files (called web pages by web clients) linked together
                                                    Hypertext- Hypertext is text displayed on a computer display or other electronic devices 
                                                        with references (hyperlinks) to other text which the reader can immediately access
                                                        the "link" is hypertext.
                                                    markup language- has codes for indicating layout and styling
                                                        containing elements to display text,multimedia,hyperlinks
                                                        using tags (or elements)
                                                    kept simple,not case-sensitive- easy to use
                                                    using any text editor & saved with extension- htm or html.
                                                Why? Platfrom independence
                                                    Platforms different->formats different, config, etc so mismatch- undesirable.
                                                    1 generic format-ASCII, PLAIN TEXT, flv video for all browsers to understand.
                                            thru interactions between web server and web clients 
                                                computer program housed on computer which serves requests by delivering files as response from website.
                                                    e.g. Apache, IIS, NGINX, Lighttpd
                                                    web application uses web server for interactions (web app may use frameworks like struts,etc also)
                                                web client (eg- web browser) parses the information (HTML file) and presents it in content pane- (called web page)
                                                    the file serves like i/o for the web client program.
                                                    Web browser eg- like IE,Netscape Navigator,Opera,etc)
                                            by Tim Berners Lee
                                                in 91, then 4.0 in 99 and HTML5 in 2012.
                                    </philosophy>
                                    <COMPONENTS>Page is made of sequence HTML elements- HTML instruction (apply to the content) + Corresponding Text/content
                                            <!--<!DOCTYPE html>-->
                                                which version of html is being used- html5?
                                            <Tags><!-- aka html instructions -->
                                                    <!-- eg- <H1 align="center">This is <br> KC</h1>	//does come inside table. -->
                                                    <types>
                                                            <containerTags>
                                                                    text is sandwitched betw start and end tag- eg- title
                                                            </containerTags>
                                                            <EmptyTags>
                                                                no corresponding close eg- BR,HR; generally block elements
                                                            </EmptyTags>
                                                    </types>

                                                    <Attributes>
                                                            additional feature to configure the HTML element (extra bit of information)
                                                                eg- align the h3 tag to center.
                                                            presented in form of name value pair.
                                                                name is the property of the element.
                                                                value is value it can take.
                                                            Common to all
                                                                id- to uniquely identify an element within html page 
                                                                    (2 elements of same name- distinguished)
                                                                    Eg- <p id="css">This para explains what is Cascading Style Sheet</p>
                                                                title- suggested title for the element- tooltip on hover or loading.
                                                                    Eg- <h3 title="Hello HTML!">Titled Heading Tag Example</h3>
                                                                class- associate an element with a style sheet, and specifies the class of element
                                                                    Eg- class="className1 className2 className3"
                                                                style- specify Cascading Style Sheet (CSS) rules within the element.
                                                                    Eg- <p style="font-family:arial; color:#FF0000;">Some text...</p>
                                                                Internationalization Attributes
                                                                    dir- tells direction of flow of text 
                                                                        like hebrew from right to left
                                                                        Eg- <html dir="rtl"> ... </html>
                                                                    lang- indicate the main language used in a document
                                                                       replaced by xml:lang in xhtml
                                                                       Eg- <html lang="en"> .. </html>

                                                            Generic Attribs- used with many
                                                                align       right, left, center                 Horizontally aligns tags
                                                                valign      top, middle, bottom                 Vertically aligns tags within an HTML element.
                                                                bgcolor     numeric, hexidecimal, RGB values	Places a background color behind an element
                                                                background  URL                                 Places a background image behind an element
                                                                id          User Defined                        Names an element for use with Cascading Style Sheets.
                                                                class       User Defined                        Classifies an element for use with Cascading Style Sheets.
                                                                width       Numeric Value                       Specifies the width of tables, images, or table cells.
                                                                height      Numeric Value                       Specifies the height of tables, images, or table cells.
                                                                title       User Defined                        "Pop-up" title of the elements.
                                                    </Attributes>
                                            </Tags>
                                            <CorrespondingContent>
                                                    special Text- spaces, newlines/ carriage returns/tabs ignored- use &nbsp instead;
                                                            &nbsp;	//any no of spaces- that the set of words should come together and not break over to different lines.
                                                            &lt;&gt;	// eg- embed html code on page
                                                            &amp;&quot;&apos;	//special chars
                                                            &copy;&reg;&pound;&yen;	// copyright trademark & currency
                                                    images
                                            </CorrespondingContent>
                                    </COMPONENTS>						
                                    <Structure>
                                        <Comments>
                                            Ways
                                                <!--  -->
                                                comment tag
                                                Conditional comments- 
                                                    <!--[if IE 6]>
                                                       Special instructions for IE 6 here
                                                    <![endif]-->
                                            Properties
                                                ignored by browser, use to indicate sections and notes (readability)
                                                comments do not nest.
                                                even style element content can be commented.
                                        </Comments>
                                        <head>	//for metadata (information about body data)
                                            <title>Krishna
                                            </title>    <!--title on window caption-->
                                            <meta>
                                                important properties (key value) about document.
                                                attribs- 
                                                    Name	Name for the property. 
                                                        Values- include, keywords, description, author, revised, generator etc.
                                                    http-equiv	Used for http response message headers.
                                                        Eg- http-equiv can be used to refresh the page or to set a cookie.
                                                        Values include content-type, expires, refresh and set-cookie.
                                                    content	Specifies the property's value.
                                                        scheme      Specifies a scheme to interpret the property's value (as declared in the content attribute).
                                                Eg- 
                                                    <meta name="keywords" content="HTML, Meta Tags, Metadata" />
                                                    <meta name="description" content="Learning about Meta Tags." />
                                                    <meta name="revised" content="Tutorialspoint, 3/7/2014" />
                                                    <meta name="author" content="Mahnaz Mohtashim" />
                                                    <meta name="robots" content="noindex, nofollow" />
                                                    <meta http-equiv="refresh" content="5;URL=http://krishna.com"/><!--to provide descriptive i/f for search engines-->
                                                    <meta http-equiv="cookie" content="userid=xyz; expires=Wednesday, 08-Aug-15 23:59:59 GMT;" />
                                                    <meta http-equiv="expires" content="Mon, 23 Sep 2001 01:21:00 GMT"/>
                                                    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
                                                        Big5 for chinese characters.
                                            </meta>
                                            <base>
                                                used for specifying the base URL for all relative URLs in a page
                                                href or src url concatenated into base URL while locating for the given item.
                                                Eg- <base href="http://www.tutorialspoint.com/" /> for <img src="/images/logo.png" alt="Logo Image"/>
                                            </base>
                                            <LINK REL="stylesheet" TYPE="text/css" HREF="mystyle.css"/>		
                                                <!--external css,REL means relationship specifier-->
                                                specify relationships between the current document and external resource

                                            <style type="text/css">..</style>
                                                specify style sheet for the current HTML document (embedded specification)
                                                media attrib- what device to display on- "all" (tv, tty, screen, print)
                                                Eg- 
                                                    <style type = "text/css" media = "all">
                                                        body {
                                                           background-color: linen;
                                                        }
                                                        h1 {
                                                           color: maroon;
                                                           margin-left: 40px;
                                                        }
                                                    </style>
                                            <script type="text/javascript" language="javascript1.2">
                                                to include either external script file or to define internal script
                                                Eg- 
                                                    <script type="text/javascript">
                                                    function Hello(){
                                                       alert("Hello, World");
                                                    }
                                                    </script>
                                            </script>// client side script
                                        </head>
                                        <Body>
                                            <Attributes>
                                                <BackgroundRelated>
                                                        bgcolor=
                                                            colorname- "color" = refer to a big list - Eg= "red", "aqua","green","blue".
                                                            Hexadecimal form- "#rrggbb" (amount of rgb) - eg- #FF00FF in 0X
                                                                value can be taken from graphics software like adobe photoshop, paint.
                                                            color decimal - Eg- rgb(255,255,0)
                                                        background="url" //relative or abs
                                                        BGproperties="fixed"
                                                </BackgroundRelated>
                                                <TextRelated>
                                                        text="color"/"#rrggbb"
                                                        link=
                                                        alink=
                                                        vlink=
                                                </TextRelated>
                                            </Attributes>
                                            <SpecialTags>
                                                    for purpose of clubbing html elements in an instance together to apply style.
                                                    useful in CSS.
                                                    <span> for inline elements</span>
                                                    <div>
                                                        helps webpage layout.
                                                        Eg- <div style="color:red"> .. </div>
                                                    </div>
                                            </SpecialTags>
                                            <Data>
                                                    <Text>
                                                            <styling>
                                                                <FormattingTexts>
                                                                        <FONT>
                                                                            add style, size, and color to the text
                                                                                NO new line (inline element)
                                                                            attribs/properties
                                                                                FACE- font type (but user should have that font installed)
                                                                                    Eg- = "arial,helvetica", "Lucida Calligraphy,Comic Sans MS,Lucida Console", "verdana","Comic Sans"
                                                                                    Times New Roman is default.
                                                                                size- from 1 to 7. def 3- rel +1 or -1 (like big tag)// for more use CSS
                                                                                color="#FF00FF" or "red" (color decimal form didn't work)
                                                                            basefont to standardize.
                                                                                <basefont face="arial, verdana, sans-serif" size="2" color="#ff0000" />
                                                                        </FONT>
                                                                </FormattingTexts>
                                                                <Headings> 
                                                                        larger and bolder, 6 levels
                                                                        <!-- <h1>...</h1> thru <h6>..</h6>  -->
                                                                        this is block level element- new line b4 and after.
                                                                </Headings>
                                                                <specific>
                                                                        align- sub,sup
                                                                        size- big,small (does +/-1)
                                                                        weight or distinct- B (strong),I (em),TT (monospaced)											
                                                                        decoration- U (ins),strike (del),s, mark (highlights)
                                                                        others- abbr (abbreviates with title attib), bdo (bidirectional override- "iH" for "Hi"),defn (italic), 
                                                                            blockquote (separate line for it), q (short quotations), cite (italic), code (tt), kbd (buttons sign), pre, samp (sample output)
                                                                            address.
                                                                </specific>
                                                            </styling>									
                                                            <Spacing>
                                                                    ?Formatting.
                                                                    <P>
                                                                        paragraph- for structuring the text.
                                                                        ALIGN=right|left|center|justify
                                                                    </P>
                                                                    <BR />
                                                                        blank line break
                                                                    <HR />
                                                                        Horizonal [rules] line									
                                                                            width=50%
                                                                            size=5
                                                                            NOSHADE
                                                                            Align=right|left|center
                                                                    <Center>
                                                                        Centers the text in the content context (table data or whole frame) like in MS word.
                                                                    </Center>
                                                                    <pre>
                                                                        preserves the formatting as it is- like writing C code
                                                                    </pre>
                                                            </Spacing>
                                                    </Text>
                                                    <images>
                                                        <img>	//adds great value but use prudently because kills response time- 1.n images means n+1 requests it takes.2.download takes long time on dial-up lines especially
                                                                width	//can degrade quality if improper
                                                                height									
                                                                border	//0 if don't want
                                                                src     //jpeg-famous,less space,gif-transparent feature,png-appeal growing with discovery.//JPEG: Joint Photographic Experts Group.GIF: Graphic Interchange Format.PNG: Portable Network Graphics Format
                                                                alt		//alternate text
                                                                align	//
                                                            Eg- <img src="/html/images/test.png" alt="Test Image" border="3" align="right"/>
                                                        </img>
                                                    </images>
                                                    <video>
                                                            width="320" height="240" controls
                                                            <source src="1.mp4" type="video/mp4"/>
                                                            <source src="1.mp4.mp4" type="video/mp4"/>
                                                            Your browser does not support the video tag.
                                                            Alternatively,
                                                            <Embed>
                                                                to add music or video into your web page
                                                                provided browser supports embed tag.
                                                                <embed src="/html/yourfile.mid" width="100%" height="60" >
                                                                    <noembed><img src="yourimage.gif" alt="Alternative Media" /></noembed>
                                                                    attribs- refer to tutorials.
                                                                    supports- .swf, .avi, .mov, .mpeg
                                                                </embed>
                                                            </Embed>
                                                            <bgsound>
                                                                starts background sound.
                                                            </bgsound>
                                                            <object>
                                                                generic object inclusion
                                                                add html, java applet, pdf, doc related params
                                                                Eg-   <object data="data/test.pdf" type="application/pdf" width="300" height="200">
                                                                        alt : <a href="data/test.pdf">test.htm</a>
                                                                      </object>
                                                            </object>
                                                            <marquee>
                                                                scrolling piece of text.
                                                                prefer CSS,JS (not U-supported)
                                                            </marquee>
                                                    </video>
                                                    <IFRAME> 
                                                            floating frame/ inline frame- scrollable area in HTML docs; can't be resized
                                                            src
                                                            width
                                                            height
                                                            scrolling = "yes/no"
                                                            frameborder = 1/0
                                                            noresize- same dimensions.
                                                            margin-height, etc
                                                    </IFRAME>
                                            </Data>
                                            <Anchoring>
                                                Interconnect- sth with text- a link is a pointer to some destination
                                                hyperlinks to navigate to another page (or section) by trigger (attached to text, image, etc)
                                                    <A>
                                                        Attributes
                                                            Title= "Click to enter Spiritual world"// balloon help on hover
                                                            Name= Gauranga      //for creating bookmark to come back
                                                            HREF= "Krishna.com#Gauranga"
                                                                    //relative or absolute- relative good if whole website moved to another server, 
                                                                    Gauranga is bookmark on the page there//Hypertext reference// 
                                                                    href="mailto:k@r.com?cc=r@K.com&Subject=P&Body=HK%0DMissing%20you."
                                                                    Eg- <a href= "mailto:abc@example.com">Send Email</a>
                                                                    <base href="http://www.tutorialspoint.com/" />
                                                                        concatenates to all href/src to obtain urls.
                                                            Target= "_parent"
                                                                    // other values are _self | _blank | _top | targetframe"
                                                                    //which window or frame to open it in// where to open
                                                        Link colors
                                                            <body alink="#54A250" link="#040404" vlink="#F40633"></body>
                                                        Apply to
                                                            download- <a href="http://www.tutorialspoint.com/page.pdf">Download PDF File</a>
                                                            text
                                                            image- image maps (different parts of image)

                                                    </A>
                                            </Anchoring>
                                            <ArrangingData> (text/stuff)
                                                    <lists>
                                                            <UL>				<!--Unordered List-->
                                                                    type="disc"> //att- type=disc|circle|square
                                                                    <LI value="2"/>..<LI value="2"/>....LI
                                                            </UL>
                                                            <OL>
                                                                    type="1" //  1|A|a|i|I
                                                                    Start="3"// alters the sequence

                                                                    <LI value="5"/>..<LI value="5"/>....LI
                                                            </OL>
                                                            <DL>				<!-- defn list-->
                                                                    <DT>Krishna</DT>// defn term
                                                                    <DD>the all attractive</DD>....DT..
                                                            </DL>
                                                    </lists>
                                                    <Table>									
                                                            align									
                                                            width=50%	// of parent or specify pixels	
                                                                //height determined by row entries or specify pixels.
                                                            border 		// 0 to keep table hidden									
                                                                bordercolor="green"
                                                            bgcolor		//or background
                                                                <table bgcolor="yellow" width="100%"></table>
                                                                <table bgcolor="#6666FF" width="100%"></table>
                                                                <table bgcolor="rgb(255,0,255)"  width="100%"></table>
                                                                <table background="/images/pattern2.gif" width="100%" height="100"></table>
                                                            cellspacing - width of border
                                                            cellpadding - distance betw cell border and cell contents.
                                                            //WORDS ARE NEVER BROKEN- SPACE? THEN BROKEN
                                                            <thead>
                                                                Appends table name to the top.
                                                            </thead>
                                                            <caption>
                                                                follows thead- right center top.
                                                            </caption>
                                                            <tfoot>
                                                                for adding footer. should be b4 tbody.
                                                            </tfoot>
                                                            <tbody>
                                                                <th> - table heading (1st row)
                                                                    for bold heading (of column)
                                                                </th>
                                                                <tr>
                                                                    align=center
                                                                    WIDTH,BGCOLOR,ETC
                                                                    <td> - table data
                                                                        bgcolor
                                                                        width
                                                                        colspan- for no. cols that data must span
                                                                        rowspan- merging rows.
                                                                        align
                                                                        valign
                                                                    </td>
                                                                </tr>
                                                            </tbody>
                                                    </Table>
                                            </ArrangingData>
                                            <forms>
                                                collects data from the site visitor
                                                employing GUI components 
                                                    GUI components are independent but built for this
                                                        Eg- textbox doesn't have to be inside form tag.
                                                    Normal texts and html elements for rendition (envt for data entry)
                                                to send data to server 
                                                    powerful with server- transmitted on click of submit & invokes server side program-asp,jsp,cgi.
                                                eg- order entry, email-app.
                                                        use table for appeal
                                                        look into color match
                                                        use dropdown to save time, if possible
                                                        to further save time, ask user to upload file with contents
                                                How?
                                                    for client side manipulation- Javascript
                                                    Server side manipulation- using business logic in scripts- CGI, ASP Script or PHP script
                                                <Attributes>
                                                    Name	=form1
                                                    action	=abc.asp    
                                                        targetted url on server
                                                        Backend script ready to process your passed data.
                                                        values sent as name value pairs (later)
                                                    method	=
                                                            "get"- generally to retrieve a page
                                                                easy,fast to append i/f onto URL (browser permits 1000s of lines)but insecure
                                                            "post"- mainly used for submitting data (sensitive confidential personal data)
                                                                large information passed/sent with HTTP request body
                                                    target = "frame1"   
                                                        where deliver response- to specified frame, _self, etc
                                                    enctype- how to encode data.
                                                </Attributes>
                                                <GUIComponents>
                                                    <INPUT>
                                                        type=
                                                            to specify fields (or [user] controls)
                                                            text
                                                                //default is textbox
                                                            password
                                                            checkbox
                                                                use checkbox when options not mutually exclusive
                                                                similar to dropdown (or combobox)with multiple options (?preferable)
                                                                Eg- 
                                                                    <input type="checkbox" name="maths" value="on"/> Maths
                                                                    <input type="checkbox" name="physics" value="on"/> Physics
                                                            radio
                                                                mutually exclusive options
                                                                similar to dropdown with 1 option (?fewer options)
                                                                Eg- <input type="radio" name="subject" value="maths"/> Maths
                                                                    <input type="radio" name="subject" value="physics"/> Physics
                                                            hidden
                                                                used to hide data inside the page (not display) which later on can be pushed to the server
                                                                //hidden used for handling programs- can't modify, previously specified- value is set	
                                                                Eg- <input type="hidden" name="pagename" value="10" />
                                                                    keeping track of page number- so that on submit- next page can be sent.
                                                            file
                                                                //file is to upload a file to server
                                                                can use size and maxlength but not recommended.
                                                                <input type="file" name="fileupload" accept="image/*" />    //type of files server accepts.
                                                            submit/reset/button
                                                                <input type="submit" name="submit" value="Submit" />
                                                                    //submit button when clicked sends form content to the server by method attribute and invokes action page.
                                                                <input type="reset" name="reset"  value="Reset" />
                                                                    set controls to initial values
                                                                <input type="button" name="ok" value="OK"  />
                                                                    triggers a client side script.
                                                            image
                                                                //image is graphical version of submit button- sends coordinate i/f of click
                                                                type="image",name="imgSubmit",src="sub.jpg",alt="submit"
                                                                Eg- <input type="image" name="imagebutton" src="/html/images/logo.png" />
                                                        name=n1
                                                            //keep name same for radiogroup
                                                        value
                                                            //default for textbox ="India"
                                                            //label for button	= "Verify"
                                                            //data to be sent to server for checkbox or radiobuttons = "red"
                                                        maxlength	
                                                            //possible allowed chars
                                                        size
                                                            //visible size in terms of chars
                                                        checked	
                                                            //preset checkbox or radiobutton.

                                                    </INPUT>
                                                    <select>
                                                        aka dropdown.
                                                        attribs
                                                            name
                                                            size=3 - #options visible
                                                            multiple- to make a combobox
                                                            disabled- unresponsive
                                                            <option>
                                                                    value	//sent to the server- the one to the associated text.
                                                                    selected
                                                                    label (alternative)
                                                            </option>
                                                            Eg- 
                                                                <select name="dropdown">
                                                                    <option value="Maths" selected>Maths</option>
                                                                    <option value="Physics">Physics</option>
                                                                </select>
                                                    </select>
                                                    <textarea>	//default text goes in the container tag
                                                        name
                                                        rows
                                                        cols
                                                        Eg- 
                                                            <textarea rows="5" cols="50" name="description">
                                                                Enter description here...
                                                            </textarea>
                                                    </textarea>
                                                </GUIComponents>
                                            </forms>
                                        </Body>
                                        <frameset>
                                            defines set of frames- window into panes- each frame may contain different html document
                                            never recommended
                                                small screen can't cope.
                                                many don't support (back not as expected)
                                            <disadvantages>
                                                    1. Can't print 2. tracking overhead for developer
                                            </disadvantages>

                                            rows="10%,80%,10%"
                                            cols="30%,*"
                                                "3*,2*,1*"
                                            frameborder=0/1
                                            framespacing=
                                            scrolling=yes	//display or not
                                            //1 of these attributes is must - tells how to divide
                                            <nestingFrames>
                                                    Eg- <frameset rows="40%,*">  
                                                            <frameset cols="35%,*"> 
                                                                <frame src="s1.htm"/>
                                                                <frame src="s2.htm"/>
                                                            </frameset>
                                                            <frame src="s3.htm"/>
                                                        </frameset>
                                            </nestingFrames>
                                            <frame>
                                                    name	//can be used as value for target with anchor tag. thus, 1 field can affect the other.
                                                    src
                                                    scrolling
                                                    noresize
                                            </frame>
                                        </frameset>											
                                    </Structure>
                                    <Layout>
                                        good layout using simple HTML tables or division tags in combination with other formatting tags
                                        <UsingTables>
                                            Eg- 
                                            <body>
                                                <table width="100%" border="0">
                                                  <tr>
                                                    <td colspan="2" bgcolor="#b5dcb3">
                                                      <h1>This is Web Page Main title</h1>
                                                    </td>
                                                  </tr>
                                                  <tr valign="top">
                                                    <td bgcolor="#aaa" width="50">
                                                      <b>Main Menu</b><br />
                                                      HTML<br />
                                                      PHP<br />
                                                      PERL...
                                                    </td>
                                                    <td bgcolor="#eee" width="100" height="200">
                                                        Technical and Managerial Tutorials
                                                    </td>
                                                  </tr>
                                                  <tr>
                                                    <td colspan="2" bgcolor="#b5dcb3">
                                                      <center>
                                                      Copyright © 2007 Tutorialspoint.com
                                                      </center>
                                                    </td>
                                                  </tr>
                                                </table>
                                            </body>
                                        </UsingTables>
                                        <MultiColumnsLayout>
                                            content in middle column and you can use left column to use menu and right column can be used to put advertisement or some other stuff.
                                            Eg-
                                            <table width="100%" border="0">
                                                <tr valign="top">
                                                  <td bgcolor="#aaa" width="20%">
                                                    <b>Main Menu</b><br />
                                                    HTML<br />
                                                    PHP<br />
                                                    PERL...
                                                  </td>
                                                  <td bgcolor="#b5dcb3" height="200" width="60%">
                                                      Technical and Managerial Tutorials
                                                  </td>
                                                  <td bgcolor="#aaa" width="20%">
                                                    <b>Right Menu</b><br />
                                                    HTML<br />
                                                    PHP<br />
                                                    PERL...
                                                  </td>
                                                </tr>
                                            </table>
                                        </MultiColumnsLayout>
                                        <UsingDivSpan>
                                            Tables are not desinged for layouts but display tabular data.
                                            Usage of div and span are coupled with CSS.
                                        </UsingDivSpan>
                                    </Layout>
                                </HTML>
                                <CSS>
                                    style rules how to present a document on screens, in print
                                    specify various attributes for the HTML tags
                                    cascading when they combine to specify web page.
                                    Eg- table{ border :1px solid #C00; }
                                    Why
                                        separate presentation and contents of HTML doc
                                        -->reusablity->saving time and easy to make changes and uniformity
                                        CSS saves time- reusing one CSS for all HTMLs
                                        Pages load faster- download speed- cuz attribs html removed.
                                        Easy maintenance- global change from 1 place.
                                        Global web standard- HTML is being deprecated so for future.
                                        Offline Browsing.
                                        Platform independence.
                                    Who
                                        w3c gives recommendations- implemented by private companies.
                                        CSS3 in 99.
                                    <SpecificationWays>
                                            //former one will override the latter- means most immediate one will be used
                                            <Inline> apply with occurrence of element-->mixed with presentation. overrides others.
                                                    only when you are interested to make a particular change in any HTML element only
                                                    eg- style attrib name, value- style rules ; separated.
                                                    <P style="color:blue; margin-right: 10px;">Hare Krishna</P>
                                            </Inline>
                                            <Embedded>
                                                Or internal- rules to a single document only
                                                Specify selector-declarations within style tag of the same document.
                                                    Eg- <style>
                                                                HR{color:blue;}
                                                        </style>
                                            </Embedded>
                                            <External>
                                                    write all css rules in .css file (in external file)
                                                    use link tag in the head to specify
                                                    can change the look of website with 1 change in .css file.
                                                    eg- <link type="text/css" href="mystyle.css" />
                                                            //type means content type- image/png, text/html, etc
                                                            //rel means relationship specifier- rel="stylesheet"
                                                            media = "all" device to display on.                                            
                                            </External>
                                            <Importing>
                                                inside head tag- works same as external.
                                                @import url("file.css");
                                                @import "URL";
                                            </Importing>
                                    </SpecificationWays>
                                    <RulesOfForming>
                                        <Syntax>
                                            SelectorTag{
                                                [PropertyName : PropertyValue; ]*
                                            }
                                            <formatsForSpecification>
                                                <measurementUnits>
                                                    Eg- font-size: 16pt; 
                                                    Absolute- mm, centimeter (cm), points (pt - 1/72 inch), picas (pc - 1/6 inch), inch (in)
                                                        pixels (px - Screen pixels)
                                                    Relative- percentage (%), em (fontsize), ex (font's x-height)
                                                    unknown- vh (1% of viewport height), vw (1% of viewport width), vmin (min of 2)
                                                </measurementUnits>
                                                <colors>
                                                    Eg- color:red;
                                                    Hex Code 	#RRGGBB		p{color:#FF0000;}	
                                                        Short Hex Code 	#RGB		p{color:#6A7;}	
                                                            #6A7 becomes #66AA77.
                                                    RGB Absolute 	rgb(rrr,ggg,bbb)		p{color:rgb(0,0,255);}	
                                                        RGB % 	rgb(rrr%,ggg%,bbb%)		p{color:rgb(50%,50%,50%);}	
                                                    keyword 	aqua, black, etc.		p{color:teal;}
                                                </colors>
                                            </formatsForSpecification>
                                        </Syntax>
                                        <Selector>
                                            <ElementSelector>
                                                inheritance- child element gets properties of parent.
                                                Eg- 
                                                    P	//selector tag
                                                    {	
                                                            color:red;	//declaration as property(or attribute)-value pair	
                                                    }
                                                Or *{...}   //all elements get properties.
                                            </ElementSelector>
                                            <ClassSelector>
                                                    same element to have different styles 
                                                    class associated with some element tags
                                                        eg- <h1 class="c"> Krishna is Great</h1>
                                                    apply more than one class selectors to given element
                                                        Eg- <p class="center bold">..</p>
                                                    //only those elements will be affected
                                                    Eg-
                                                        H1.c	
                                                        {
                                                                color:blue;
                                                                font-size:20pt;
                                                        }

                                                    or
                                                    .c {color:gold}	//set all elements with class c to have this prop value
                                                    <RelatedTags>
                                                            SPAN-Inline	//to apply rules to an area of HTML statements
                                                            DIV- short for division- same as SPAN but block-level.
                                                                    //we can override all inline style details by embedded specification.
                                                                    class- to offer generic mechanism for adding structure to doc
                                                                    id-
                                                                    //nestable to allow hierachies of sections, subsections,chapters
                                                                    align- horizonal division block text alignment in browser window
                                                                    COLS- number of cols content will be split into.
                                                                    Height and width- of block element in pixels.
                                                                    NOWRAP- true, element will not wrap unless explicit line breaking is added.
                                                                    style- regular inline style specification
                                                    </RelatedTags>
                                            </ClassSelector>
                                            <IDSelector>
                                                    #top	//1 element is given id=top
                                                            eg- <!--  <P id="top">RK			-->
                                                    {
                                                            color:red;
                                                    }
                                                    //You can style the table- heading different color and each row different color.
                                                            How? class name be different for odd and even rows and header different id/class.
                                                    <RelatedTags>
                                                            SPAN-Inline	//to apply rules to an area of HTML statements
                                                            DIV- short for division- same as SPAN but block-level.
                                                                    //we can override all inline style details by embedded specification.
                                                                    class- to offer generic mechanism for adding structure to doc
                                                                    id-
                                                                    //nestable to allow hierachies of sections, subsections,chapters
                                                                    align- horizonal division block text alignment in browser window
                                                                    COLS- number of cols content will be split into.
                                                                    Height and width- of block element in pixels.
                                                                    NOWRAP- true, element will not wrap unless explicit line breaking is added.
                                                                    style- regular inline style specification
                                                    </RelatedTags>
                                            </IDSelector>
                                            <attributeSelector>
                                                input[type = "text"]{
                                                    color: #000000; 
                                                }
                                                p[lang], p[lang="fr"], p[lang~="fr"] (contains), p[lang|="en"] (begins with)
                                            </attributeSelector>
                                            <ContextualSelector>
                                                    aka descendent selector
                                                    P EM {background:yellow;font-family:Verdana;}	// when EM, emphasised tag is within P, paragraph tag
                                                Child Selector- applies only to direct child.
                                                    body > p {
                                                        color: #000000; 
                                                    }
                                            </ContextualSelector>
                                            <Grouping>
                                                    H1,P,TD {color:red;}	//to avoid repetition of same prop
                                            </Grouping>	
                                            <Pseudo-classes>
                                                Set properties of hyperlinks/ elements- no need to use javascript.
                                                Syntax- selector:pseudo-class {property:value;} (all variants of selectors accepted- at least classes)
                                                Sequence is important
                                                    a:link {color: #000000}
                                                    a:visited {color: #006600}
                                                    a:hover {color: #FFCC00}
                                                    a:active {color: #FF00CC}
                                                    Others-
                                                        :focus- if element is in focus (click or tab)
                                                        :lang- language to use for element.
                                                        :firstchild- to impact 1st element inside (refer notes)
                                                            :firstline, :firstletter, :before (bullet eg)
                                            </Pseudo-classes>
                                        </Selector>
                                        <COMMENTS>
                                            /* Krishna is SPOG*/
                                        </COMMENTS>


                                        <Declarations> <!-- aka PropertyValue>-->
                                                <background> affects background related properties.
                                                        background-color:"#FF00FF"
                                                            sets background color of the element.
                                                        background-image:url("/css/images/css.jpg");
                                                            background-position:100px 400px or just 100 px
                                                                100 pixels to the right and 400 pixels down it starts- can be negative
                                                                only 100 px means shift to the right.
                                                            background-repeat:repeat/ repeat-x/ repeat-y/ no-repeat
                                                                controls repetition of image.
                                                            background-attachment:scroll or fixed
                                                                bg moves with it?                                            
                                                        background:url(/images/pattern1.gif) repeat fixed;
                                                            all at once.
                                                </background>
                                                <ContentRelated>
                                                    <font> looks properties; size or length units- in,cm,mm,px,pt
                                                            font-family:Arial,georgia,garamond,serif;   //1st 1 present in the system will be used.
                                                            font-size:small
                                                                xx-small, x-small, small, medium, large, x-large, xx-large, smaller, larger, size in pixels or in %.
                                                                font-size-adjust:0.61;                                        
                                                            font-style:Italic/ normal/ oblique
                                                                font-variant:normal
                                                                    normal/ small caps
                                                                font-stretch:ultra-expanded;
                                                                    normal, wider, narrower, ultra-condensed, extra-condensed, condensed, semi-condensed, semi-expanded, expanded, extra-expanded, ultra-expanded.
                                                            font-weight:100
                                                                lighter,normal,bold,bolder, 100, 200, ..,900
                                                            Shorthand- font:italic small-caps bold 15px georgia;
                                                    </font>
                                                    <text> appearance of it- space,decor,indent, etc.
                                                            color:red;
                                                            text-transform- none,capitalize,uppercase,lowercase.
                                                            Alignment
                                                                text-align: left/ right/ center/ justify		
                                                                    direction:rtl
                                                                    text-indent:10pt that of 1st line.
                                                                vertical-align: top,text-bottom,super,sub
                                                            stretch (arbitrarily)
                                                                letter-spacing: in px/cm
                                                                word-spacing:
                                                                white-space:normal, pre, nowrap.
                                                            text-decoration- underline,overline,line-through,blink,none
                                                                text-shadow:4px 5px 8px blue;
                                                                    blue shadow 4px to left, 5px to down, 8px sharp.
                                                    </text>
                                                    <image>
                                                        <img style="border:1px solid red; height:100px;width:150px;-moz-opacity:0.4;" src="/css/images/logo.png" />
                                                            IE- filter:alpha(opacity=x)
                                                            conception of height is different from box (it is zooming in)
                                                    </image>
                                                    <visibility>
                                                        hide an element from view (not source code)
                                                        used in complex layouts.
                                                        visibility:hidden;
                                                            visible
                                                            hidden- invisible but affects layout.
                                                            collapse- use only with dynamic table columns and row effects
                                                    </visibility>
                                                </ContentRelated>
                                                <OrganizingRelated>
                                                    <List>
                                                        Idea- 
                                                            conveying a set of either numbered or bullet points
                                                            to position an element relative to its normal position or using absolute value.
                                                                    to control visibility
                                                                    eg- used for list
                                                        declarations- 
                                                            list-style-type : disc
                                                                none, disc, circle, square
                                                                decimal, decimal-leading-zero, lower-alpha, upper-alpha, lower-roman, lower-greek.
                                                                list-style-image : url(/images/bullet.gif);
                                                            list-style-position : inside, outside	//left or right aligned list type
                                                                indenting second level listing.
                                                            ?display : inline, block, list-item
                                                                ?marker-offset:3cm;
                                                            shorthand- list-style : outside upper-alpha;
                                                    </List>
                                                    <Dimension>
                                                        of box (or element- border)
                                                            defaults to elements' actual requirement.
                                                            height, width - box width (fixed box size)
                                                            line-height- increase the space between lines of text
                                                            max-height- variable box size but won't go beyond specified.
                                                                max-width
                                                            min-height- variable box with initial size as specified but will stretch.
                                                                min-width
                                                            // in a number, a length, or a percentage
                                                        <overflow>
                                                            of any element.
                                                            overflow:visible;
                                                                visible- overflow the borders
                                                                hidden- cut it out
                                                                scroll- added scrolls.
                                                                auto- shown if overflow really happens.
                                                        </overflow>
                                                        <border> for better styling
                                                            border-width:thick,medium,thin, length
                                                                Variants- 
                                                                    border-bottom-width
                                                                    top,left,right
                                                            border-style:
                                                                solid- solid line
                                                                dashed- dashes make it.
                                                                dotted- dots
                                                                double- 2 lines.
                                                                groove- shadow from top. (light source along AC in ABCD)
                                                                ridge- shadow from bottom.
                                                                inset- light source on top- shadowed bottom side.
                                                                outset- light source on bottom (dark lines)- shadowed top.
                                                                Variants-
                                                                    border-top-style:solid;
                                                                    bottom,left,right.
                                                            border-color:#rrggbb
                                                                Variants- 
                                                                    border-bottom-color
                                                                    top, left, right.
                                                            border:thick ridge red;
                                                            //use these properties to border any element like form or table or H1.
                                                            for table or td or span- only limited to area or div- whole row of the page covered.
                                                                border-collapse:collapse;   or separate //junction of cells (merge or separate)
                                                            Variants
                                                                Outline : 
                                                                    same as border but no extra space taken.
                                                                    outline-width, outline-style, outline-color (or shorthand- outline : 5px dotted rgb(13,33,232); )
                                                        </border>
                                                        <margin> define the space around elements- use negative values to overlap contents
                                                            adjacent vertical margins collapse to take max of the 2 (top and bottom)
                                                                margin-top:10px
                                                                    margin-left:towards the right.
                                                                    right, bottom, left.
                                                                margin:1em 2em 3em 4em
                                                                    variants- 1 value- all four margins
                                                                        2 values- top and bottom; left and right.
                                                                        3 values- top, right and left, bottom.
                                                                        4 values- top, right, bottom, left.
                                                                        3 values auto- top, right, bottom, left (auto decided by browser)

                                                        </margin>
                                                        <Padding>
                                                            padding- space betw content and border
                                                                    padding-bottom : 2%
                                                                        3px, inherit (from parent)
                                                                        top, left, right
                                                                        shorthand- # of values- same as margin- top, right, bottom, left.
                                                                            Eg- padding:2px 1px 2px;
                                                                border-spacing:10px (both) or 10px; 15px- horizontal and vertical.
                                                                empty-cells:hide;   //show,hide, inherit (borders)
                                                                where to place caption tag
                                                                    caption.top {caption-side:top}  or bottom or left or right
                                                                table-layout: auto  //fixed, auto or inherit. 
                                                                    width can vary as per input.
                                                        </Padding>
                                                    </Dimension>
                                                    <Layout>
                                                        Tables more forgiving than CSS (strict- more exact)- browser window size- both good.
                                                        Table easy to learn but CSS is easy to read in nesting and is future.
                                                        table-layout:fixed (length of 1st row is adopted- fixed length cols)
                                                        Code- To understand it, start from inner most cell and as you move outwards- conceive of a box to which declarations are made (eg- margin-left- add space to box's left)
                                                            <style style="text/css">
                                                                body {
                                                                   margin:9px 9px 0 9px;
                                                                   padding:0;
                                                                   background:#FFF;
                                                                }

                                                                #level0 {background:#FC0;}

                                                                #level1 {
                                                                   margin-left:143px;
                                                                   padding-left:9px;
                                                                   background:#FFF;
                                                                }

                                                                #level2 {background:#FFF3AC;}

                                                                #level3 {
                                                                   margin-right:143px;
                                                                   padding-right:9px;
                                                                   background:#FFF;
                                                                }

                                                                #main {background:#CCC;}
                                                             </style>
                                                             <body>
                                                                <div id="level0">
                                                                   <div id="level1">
                                                                      <div id="level2">
                                                                         <div id="level3">
                                                                            <div id="main">
                                                                               Final Content goes here...
                                                                            </div>
                                                                         </div>
                                                                      </div>
                                                                   </div>
                                                                </div>
                                                             </body>
                                                    </Layout>
                                                </OrganizingRelated>
                                                <cursor>
                                                    cursor : auto, crosshair, pointer
                                                        visual clue of clickable.
                                                        hovers over a link, the cursor changes from a pointer to a hand.
                                                        viz 
                                                            auto- context area (Eg- I for text)
                                                            default- arrow
                                                            move- resize any dir
                                                                e-resize
                                                                    w, n, s, ne, nw, se, sw
                                                            text- I
                                                            pointer- pointing hand.
                                                                wait- hour glass.
                                                                help- question mark arrow or balloon (help buttons)
                                                            (url)- source of image file.
                                                            crosshair- 
                                                </cursor>
                                                <position> position and shape the element. place 1 behind other.
                                                        position:
                                                            relative- wrt deserving place.
                                                            absolute- wrt to topmost left.
                                                            fixed- even scrolling won't change it.
                                                            static
                                                        top:measurement	//x distance from the top
                                                            bottom
                                                        left:20px
                                                            20 pixels element position to the right. Negative to move left.
                                                            right
                                                        z-index:-1,1,3	//1 is above -1 :these are relative numbers
                                                </position>
                                        </Declarations>
                                    </RulesOfForming>
                                    <Validators>
                                        In beginning, there are mistakes so there are tools to check validity of CSS rules.
                                    </Validators>
                                </CSS>
                                <JS>
                                    program that can add interactivity to your website (?dynamic web pages)
                                        using Javascript or VBScript (not even supported thesedays) or JQuery- included in html or file.
                                    Eg- generating a pop up alert box message; provide dropdown menu.
                                    <Properties>
                                        light weight, interpreted language
                                            inside browser so no compiler purchased.
                                        integrated and complements with java
                                        for creating network centric apps
                                        open and cross platform.
                                        Tools IDE not necessary
                                            Microsoft frontpage, Macromedia Dreamweaver MX, Macromedia HomeSite 5
                                        Limitations
                                            can't read/write files
                                            not for networking apps
                                            no multithreading capabilities.
                                    </Properties>
                                    <History>
                                        95- Livescript but netscape changed it to Javascript (popularity)
                                    </History>
                                    <Why>
                                            scripts execution on server 
                                                    so reduce server and network traffic (burden) especially if there is error 
                                                        (eg- email format is not right)
                                                    immediate response to clients.
                                                    interfaces- better UXD.    
                                                        rich UI
                                                            drag and drop, hide/show details, sliders.
                                            Suggestion- let's embed a code and send it to client along with HTML.
                                                    Ok! Browser will read it- distinguish from HTML? by using script tag anywhere, head(prefer) or body, 
                                                    code that (VB,J,ECMA,javascript (leverage java- sun deal, used bcoz all support), OO and C based (PF independent) <--liveScript) for response to user events (dynamic and interactive web pages) to client (along with the html file) which is browser compatible/readable (interprets and executes), (means dependent, eg- VB not supported by Netscape) and user readable, 
                                                    so that we can approve at client's end before having it here thereby reducing response time for client and time of server.
                                            any editor to make a javascript
                                    </Why> 
                                    <Types>
                                            1. Scripts get executed on loading- immediate mode- place script code in the body tag
                                            2. user event triggers exec- deferred mode- place in head.
                                                associated with html tags.
                                    </Types>
                                    <EnablingJS>
                                        Browser specific.
                                    </EnablingJS>
                                    <SpecificationWays>
                                            <Embedded> 
                                                script is written within script tags (inside head recommended)
                                                    browser interprets eth within as script.
                                                        head- when event handling.
                                                        Body- on load.
                                                        both
                                                    <script language="javascript" type="text/javascript">
                                                        <!--
                                                        JavaScript code
                                                        //-->           // to make sure that JS is ignored by browsers that don't support.
                                                    </script>
                                            </Embedded>
                                            <External>
                                                multiple people can use same .js file ->reusable, easy maintenance. reference thru type and ref/src attribute of script tag.
                                                <script type="text/javascript" src="filename.js" ></script>
                                            </External>
                                            <Inline> 
                                                inside tag on specific Event (covered later)
                                                <!-- eg- <body onLoad="alert('doc loaded')";> or 
                                                <input type=button onClick="window.close()">... -->
                                            </Inline>
                                    </SpecificationWays>
                                    <HidingFromOldBrowsers>
                                        HTML Comment the javascript.
                                        <noscript>Your browser does not support Javascript!</noscript>
                                        setting default scripting language- 
                                            when many js and internal scripts dealing with.
                                            <meta http-equiv="Content-Script-Type" content="text/JavaScript" />
                                    </HidingFromOldBrowsers>
                                    <attributes>
                                        type= text/javaScript- telling the language we are gonna use 
                                        language="Javascript1.2"- the version we are going to use.
                                    </attributes>

                                    we will use VS because intellisense for libs and hints and debug support.
                                    <LanguageConstructs>
                                            OO and C based 
                                                whitespaces ignored, 
                                                semicolons if in single line- optional in different lines 
                                                comments- //,/*...*/. opening html comment as single line comment.
                                            case sensitive 
                                            set of statement in different line or separated by semi-colons. 
                                            <triggers>
                                                aka events- user does sth.
                                                on buttons,etc event may be triggered causing exec of fn in JS for calc,examine or modify.
                                                syntax for html element
                                                    triggerName = EventHandlerFunctionCall();
                                                Property Names
                                                    Mouse related-onClick (most frequent), onFocus,onBlur, onMouseUp,onMouseDown, onMouseOut,onMouseOver;	
                                                    Content change related- onChange,
                                                    Keys related- onKeyDown,onKeyUp,onKeyPress,
                                                    Page related- onLoad,onUnload,onsubmit (for validate inside form tag)
                                                    Refer to notes for more- ondragstart, etc.
                                                Eg- <input type="button" onclick="Hello();" name="ok" value="Click Me"  />
                                                        //Hello can have params.
                                                        write a property value- eg- document.bgcolor=red
                                            </triggers>
                                            <action>
                                                <InputOutput>
                                                    <Input>
                                                        getElementById(rad1);
                                                        prompt("enter the first  number","0")
                                                    </Input>
                                                    <Output> or response
                                                        dialog boxes-
                                                            alert(message)- warning message (like validation)
                                                            confirm(message)- to get consent of user- ok or cancel- returns true or false.
                                                            a=prompt(message[,value])- returns the value or null.
                                                        Page Manipulation - writing on GUI Component, Programming capabilities (eg- JSP)
                                                        Future Remember something - cookie- to remember session info (on http) especially for commercial websites.
                                                            remembering preferences, tracking purchases, commissions, etc.
                                                            sent to visitors' browser (which it may accept)- saved in HDD. For another page- cookie is sent for context.
                                                            Tuple
                                                                domain, path, 
                                                                secure (only secure server), 
                                                                name-value
                                                                expires
                                                            CGI scripts take care of them.
                                                            JS can manipulate cookies (CRUD)
                                                                1 session
                                                                    document.cookie = "key1=value1;key2=value2;expires=date";
                                                                    escape() to store and unescape() to retrieve.
                                                                        cookievalue= escape(document.myform.customer.value) + ";";
                                                                        document.cookie="name=" + cookievalue;
                                                                    Reading
                                                                        function ReadCookie()
                                                                        {
                                                                           var allcookies = document.cookie;
                                                                           document.write ("All Cookies : " + allcookies );

                                                                           // Get all the cookies pairs in an array
                                                                           cookiearray = allcookies.split(';');

                                                                           // Now take key value pair out of this array
                                                                           for(var i=0; i< cookiearray.length; i++){
                                                                              name = cookiearray[i].split('=')[0];
                                                                              value = cookiearray[i].split('=')[1];
                                                                              document.write ("Key is : " + name + " and Value is : " + value);
                                                                           }
                                                                        }
                                                                Across sessions
                                                                    function WriteCookie()
                                                                    {
                                                                       var now = new Date();
                                                                       now.setMonth( now.getMonth() + 1 );
                                                                       cookievalue = escape(document.myform.customer.value) + ";"

                                                                       document.cookie="name=" + cookievalue;
                                                                       document.cookie = "expires=" + now.toUTCString() + ";"
                                                                       document.write ("Setting Cookies : " + "name=" + cookievalue );
                                                                    }
                                                                Deleting
                                                                    by setting its expiry date to one month behind the current date.    //see prev
                                                        ?Further Communication
                                                            Send to Server (?AJAX)
                                                            Redirection
                                                                Client side- changing your domain.
                                                                support for browser versions.
                                                                advantage of search engine high index rating- illegal (don't fool it)
                                                                function redirection(){
                                                                    window.location="http://www.tutorialspoint.com";
                                                                }
                                                                On loading with information
                                                                    function Redirect() {
                                                                        var browsername=navigator.appName;
                                                                        if( browsername == "Netscape" )
                                                                           window.location="http://www.location.com/ns.htm";
                                                                     }
                                                                     document.write("You will be redirected to main page in 10 sec.");
                                                                     setTimeout('Redirect()', 10000);
                                                    </Output>
                                                </InputOutput>
                                                <Processing>
                                                    <dataTypes>
                                                        A data type is a set of data with values having predefined characteristics. 
                                                            Eg- integer, floating point unit number, character, string, and pointer
                                                        <PrimitiveDT>
                                                        (implicit- untyped)
                                                            <null>
                                                                val = null;
                                                            </null>
                                                            <Number>
                                                            numbers- internally eth as floating point.
                                                                Eg- var val = new Number ([number]);
                                                                    return NaN (not a number) if arg is not number.
                                                                <Properties> 
                                                                    NaN- Not A Number
                                                                        val = NaN;
                                                                    MAX_VALUE (largest val), MIN_VALUE
                                                                    NEGATIVE_INFINITY, POSITIVE_INFINITY
                                                                        Behaves as infinity
                                                                            multiply by any remains same; 
                                                                            divided by this- gives zero.
                                                                            lesser/ greater than min/max value
                                                                            MAX_VALUE * -2 = NEGATIVE_INFINITY.
                                                                </Properties>
                                                                <Methods>
                                                                    can be invoked on var or val.
                                                                Methods- 
                                                                    valueOf()- value of
                                                                        document.write(num.valueOf());
                                                                    Changing Data type or representation
                                                                        toExponential([fractionalDigits]);
                                                                            default is all the digits
                                                                            31.157.toExponential(2) = 3.15e+1 OR num.toExponential()
                                                                        toString([radix])
                                                                            toLocaleString() (as per browser)
                                                                            toString(2) gives num in binary.
                                                                            Eg- document.write(num.toString());
                                                                    Formatting
                                                                        toFixed([fractionalDigits]);
                                                                            object can be as value or variable
                                                                            default is 0
                                                                            Eg- (1.23e+20).toFixed(2) is:123000000000000000000.00
                                                                        toPrecision([totalDigits])
                                                                            Eg- 717.12.toPrecision(1) = 7e+2
                                                                            Eg- 717.12.toPrecision(6) = 717.120
                                                                            default is all digits
                                                                            MEX with toFixed and itself- num.toPrecision(4).toPrecision(2) not allowed.
                                                                </Methods>
                                                            </Number>
                                                            <String>
                                                                Creation
                                                                    var val = new String([string]);
                                                                    s1=new String("Krishna");
                                                                    s1="Krishna";   //but supports all object methods
                                                                property- length
                                                                methods-
                                                                    accessors- 
                                                                        charAt(i),charCodeAt([index])
                                                                        indexOf("@"),lastIndexOf("Kr")- -1 if not found.
                                                                        split("-"); //delimiter
                                                                            string.split([separator][, limit]);
                                                                            var splitted = str.split(" ", 3);
                                                                                document.write(splitted);   // returns Applies, are, round.
                                                                        slice(1,5);     Texture- "extu" from index 1 thru 5-1.
                                                                            (1,-2)- second last. (1)- until the end.
                                                                            substr(startIndex[,length]);
                                                                                if startIndex is negative, 0 is used.
                                                                                no 2nd argument, means till the end.
                                                                        substring(startIndex,[endIndex]); 
                                                                            Same as substr
                                                                    Compare
                                                                        localeCompare(a)
                                                                            returns -1 (not sorting ordered), 1 if sorted, 0 if 100% match
                                                                            Eg- str1.localeCompare( "XYZ" );  //for str1 = "xyz"; returns -1.
                                                                        match(re)- 
                                                                            returns 
                                                                                if str contains a substring conforming to re fully,
                                                                                    then matching chacters
                                                                                else null
                                                                            var str = "For more information, see Chapter 3.4.5.1";
                                                                            var re = /(chapter \d+(\.\d)*)/i;
                                                                            var found = str.match( re );
                                                                        search(re)
                                                                            similar to match(re)
                                                                            returns index or -1.
                                                                    modifying-
                                                                        formattingRelated
                                                                            toUpperCase/ toLowerCase/ toLocaleLowerCase.
                                                                            toString,valueOf()
                                                                        concat(str1,str2[,str3]*)
                                                                            concatenates str1 thru end to calling string.
                                                                            "Gaur".concat("Radha","Krishna")    //GaurRadhaKrishna

                                                                        replace(regexp/substr, newSubStr/function[, flags]);
                                                                            returns
                                                                                looks for regexp in the calling string.
                                                                                If regexp found, replace it with newSubstring (keeping remaining part intact)
                                                                                if not, return as it is.
                                                                            flags
                                                                                flags can be places with regexp also 
                                                                                    var re = /apples/gi;
                                                                                g - global match, i - ignore case, m - match over multiple lines.
                                                                            regex
                                                                                var re = /apples/gi;
                                                                                can be a plain substring
                                                                            for Replace
                                                                                paranthesize match- get assigned $1,$2,..
                                                                                    $$ 	Inserts a "$".
                                                                                    $& 	Inserts the matched substring (to re)
                                                                                    $` 	Inserts the prefix of matched substring
                                                                                    $' 	Inserts suffix of matched substring
                                                                                    $n- Insert nth paranthesized match.
                                                                            Eg- var str = "Apples are round, and apples are juicy.";
                                                                                var newstr = str.replace(re, "oranges");
                                                                                document.write(newstr ); - oranges are round and oranges are juicy.
                                                                            Eg- var re = /(\w+)\s(\w+)/;
                                                                                var str = "zara ali";
                                                                                var newstr = str.replace(re, "$2, $1");
                                                                                document.write(newstr); //returns ali, zara

                                                                    HTML elements creation methods
                                                                         anchor( anchorname )
                                                                            str.anchor( "myanchor" ) yields- <a name="myanchor">Hello world</a>
                                                                         link( hrefname )

                                                                         bold(), italics()
                                                                         strike(),sub(),sup()
                                                                         fixed()- <tt></tt>

                                                                         fontcolor(color), fontsize(size)
                                                                         big(), small()
                                                                            "hi".big() yields <big>hi</big>

                                                            </String>
                                                            <Boolean>
                                                            boolean- can be true or false. Constructor vals for false- 0,-0, NaN, false, undefined,"",null.
                                                                var val = new Boolean(value);
                                                                Methods- constructor- same as number- which function created it.
                                                                    valueOf()
                                                                Changing data type/ representation
                                                                    toString()
                                                            </Boolean>
                                                            <Date>
                                                                Declaration
                                                                    newDate=new Date();     //sets to current date and time.
                                                                    new Date()
                                                                    new Date(milliseconds)  //5000 means 5 sec past 1/1/70 midnight.
                                                                    new Date(yr,mon,day[,hr,min,sec,ms]);   
                                                                Methods- more in notes.
                                                                    Date()- current date and time.

                                                                    All of Date and Time
                                                                        toString()
                                                                            Wed Jul 28 1993 14:39:07 GMT+0530 (India Standard Time)
                                                                        toUTCString()
                                                                            Wed, 28 Jul 1993 09:09:07 GMT
                                                                        toLocaleString()
                                                                            7/28/1993, 2:39:07 PM
                                                                        valueOf()
                                                                            743850547000 
                                                                        toSource()
                                                                            (new Date(743850547000))
                                                                        toLocaleFormat( "%A, %B %e, %Y" )
                                                                            ?Wed Jul 28 1993
                                                                        getTime()- numeric value of the specified date
                                                                    All of Date
                                                                        toDateString()
                                                                            Wed Jul 28 1993
                                                                        toLocaleDateString()- as per OS's conventions
                                                                            7/28/1993
                                                                    All of Time
                                                                        toTimeString()
                                                                            14:39:07 GMT+0530 (India Standard Time)
                                                                        toLocaleTimeString()
                                                                            2:39:07 PM
                                                                    date1.toTimeString().toSource() - new String();
                                                                    getTimeZoneOffset()- diffn in minutes from current locale.
                                                                    getFullYear()- in local time.
                                                                        getYear is deprecated (avoid it)
                                                                    getMonth()
                                                                    getDate()
                                                                        getUTCDate()- on universal time scale (same with others)
                                                                        setDate()
                                                                        setUTCDate()
                                                                    getDay()
                                                                    getHours()
                                                                    getMinutes()
                                                                    getSeconds()
                                                                    getMilliseconds()
                                                                    Static Method                                                        
                                                                        Date.parse(datestring)
                                                                            var msec = Date.parse( "Aug 28, 2008 23:30:00" );
                                                                            document.write(msec);   //1219946400000
                                                                        Date.UTC(year,month,day,[hours,[minutes,[seconds,[ms]]]])
                                                                            msecs = Date.UTC(2008,9,6)
                                                                            document.write(msec);
                                                                            1223251200000 
                                                                    getYear,getMonth,getDate,getDay,getHours,getMinutes,getSeconds,toLocaleString
                                                                Eg- alert(newDate.getDate())
                                                                viz-Date,Array,Boolean,Function,Image,Number,Option,String.
                                                            </Date>
                                                            <Regex>
                                                                var pattern = new RegExp(pattern, attributes);
                                                                var pattern = /pattern/attributes;  //attribs also called as modifiers
                                                                range- [a-z],[a-Z],[aeiou], [^abc]- except a,b,c; (foo|boo|loo)- 1 of these.
                                                                Quantifiers- p+ (at least one p)
                                                                    p*- p any number of times, 
                                                                    p?- 0 or 1 time; 
                                                                    p{N}- N no of times p
                                                                    p{2,3}- 2 or 3 p's.
                                                                    p{2,}- at least 2 p's.
                                                                    p$- p in the end.
                                                                    ^p- p in the begining.
                                                                Special symbols/ metacharacters.
                                                                    .- any character.
                                                                    \s- white space (space, tab, newline)   \S- non
                                                                    \d- digit; \D- non
                                                                    \w- word char (a-z, A-Z, 0-9, _); \W- non
                                                                    \b- backspace.
                                                                    all escape characters- \n, etc.
                                                                Modifiers
                                                                    i- ignore case.
                                                                    m
                                                                    g- finds all matches (not just first)
                                                                Properties
                                                                    global- if g is set (true or false)
                                                                        ignoreCase(), multiline()
                                                                    source- text of a pattern.
                                                                    lastIndex()- Returns an integer that specifies the character position immediately following the last match

                                                                Methods 
                                                                    exec( string );
                                                                        Returns the matched text if a match is found, and null if not.
                                                                    test( string );
                                                                        Returns the matched text if a match is found, and null if not.
                                                                    toSource()
                                                                        returns source code of object.
                                                                    toString()
                                                                        RE in string form.
                                                                <uncat>
                                                                    \n\r issue- replaceAll not working for \n cuz \r were used.
                                                                    use $1 to get the group- keep + inside the group! $1 is of sequence not match (| case)
                                                                    Make query a single line- replaceAll()
                                                                    Regex
                                                                        Regular Expressions
                                                                                Elements- a-z,..
                                                                                class- [set to choose from] 
                                                                                        (write range)
                                                                                        put negation on set.
                                                                                        special- \\w (A-Z, a-z, 0-9, _), W,s,S,d,D,. (anything but newline)
                                                                                        Escape reqd- ^ * + ? { } [ ] \ | ( )
                                                                                Repetition- *( >= 0),+ ( > 0),?(0 or 1),{n}, {[n],[m]}
                                                                                Grouping- ()
                                                                                Larger choice- thru |
                                                                                Eg- (axial[^\\.])
                                                                </uncat>
                                                            </Regex>
                                                        </PrimitiveDT>                 
                                                        <Variable>
                                                        Variables- named containers (place data inside and refer to container to retrieve)
                                                            Rules of var formation- same as C.
                                                            Scope
                                                                local (within func)- var v1 = 25;    //declare, initialize.
                                                                    takes precedence over global of same name.
                                                                global (ew in js)- v1 = 5;
                                                        </Variable>                 
                                                        <ComplexDT>
                                                            <Array>
                                                                collection of data elements of same type (not necessarily)
                                                                Declaration- 
                                                                    var family=new Array(3);    //initial length. note that it is paranthesis (not square bracket)
                                                                    family=new Array("Balaram","Krishna","Radha");
                                                                    Variant- DenseArray- var darr=[5,"RK"];
                                                                Initialization
                                                                    arr[0]="Madhav";
                                                                properties- length, index
                                                                <Methods>
                                                                methods- There may be a need of adding code for compatibility in some cases of old versions.
                                                                    <SizeChanging>
                                                                        push(e1,e2,..)- to add elements to end of array.
                                                                            not limited by initial declared size.
                                                                            returns new length
                                                                        pop()- removes last element from array and returns that.
                                                                        shift()- removes first element and returns.
                                                                        unshift(elm1[,elm2]*)- adds elements to start of arrays.
                                                                            returns length after update.
                                                                        concat(a1[,a2]*)- returns concatenation of calling array with all arrays in args.
                                                                            the calling array doesn't change.
                                                                        splice(beginIndex, howManyElementToFetch[,elm1]*)
                                                                            at which to start changing/adding.
                                                                            returns array with howManyElementToFetch elements from beginIndex (from old array)
                                                                        Also, Accessors- pop, shift, splice.
                                                                    </SizeChanging>
                                                                    <StructureChangin>
                                                                        reverse()- arr.reverse();
                                                                        sort()
                                                                    </StructureChangin>
                                                                    <Convert>
                                                                        join(separator);
                                                                            [1,2,3].join()- 123
                                                                            arr.join(+)- 1+2+3
                                                                        toString()
                                                                            comma separated array elements.
                                                                            document.write(arrayName);  //writes all elements comma separated.
                                                                        toSource- returns the comma separated array as string
                                                                    </Convert>
                                                                    <Accessors>
                                                                        indexOf(element[,fromIndex]);
                                                                        lastIndexOf(element[,fromIndex]);
                                                                        slice(beginindex[,endIndex]);   
                                                                            returns array with elements between beginIndex and endIndex-1
                                                                            calling array intact.
                                                                            till end without 2nd arg
                                                                        Others- pop, shift, splice, filter (on criteria), 
                                                                    </Accessors>
                                                                    <AllElementCheckSummary>
                                                                        every(func)
                                                                            whether every element of array conforms to a function.
                                                                            eg- [1,2,3].every(isGreaterThan10);
                                                                                function isGreaterThan10(element, index, array) {
                                                                                    return (element >= 10);
                                                                                }
                                                                            Need to add following code to work
                                                                                if (!Array.prototype.every)
                                                                                {
                                                                                   Array.prototype.every = function(fun /*, thisp*/)
                                                                                   {
                                                                                      var len = this.length;
                                                                                      if (typeof fun != "function")
                                                                                      throw new TypeError();

                                                                                      var thisp = arguments[1];
                                                                                      for (var i = 0; i < len; i++)
                                                                                      {
                                                                                         if (i in this && !fun.call(thisp, this[i], i, this))
                                                                                         return false;
                                                                                      }
                                                                                      return true;
                                                                                   };
                                                                                }
                                                                        some(functionName)
                                                                            boolean value- whether any element of array satisfied the function.
                                                                        filter(functionName)- accessor on property!
                                                                            returns all elements that pass the function test.
                                                                            var filtered  = [12, 5, 8, 130, 44].filter(isBigEnough);
                                                                            document.write("Filtered Value : " + filtered ); 
                                                                        foreach(functionName);
                                                                            execute function for every element.
                                                                            Eg-
                                                                                function printBr(element, index, array) {
                                                                                    document.write("<br />[" + index + "] is " + element ); 
                                                                                 }
                                                                                 [12, 5, 8, 130, 44].forEach(printBr);
                                                                        map(functionName);
                                                                            returns array with every element modified.
                                                                            Calling array remains intact.
                                                                            numArr.map(Math.sqrt);
                                                                        reduce(function);   //applied cumulative from left to right- gets summary in some way.
                                                                            var total = [0, 1, 2, 3].reduce(function(a, b){ return a + b; });
                                                                            document.write("total is : " + total ); 
                                                                            variant- reduceRight(function)
                                                                    </AllElementCheckSummary>
                                                                </Methods>
                                                            </Array>
                                                            <Objects>
                                                                objects composed of attribs- contains function then method else property.
                                                                    Declaration- 
                                                                        var book = new Object();   // Create the object
                                                                        var myBook = new book("Perl", "Mohtashim");
                                                                            function book(title, author){       //constructor
                                                                                    this.title = title;     //this keyword
                                                                                    this.author  = author;
                                                                                 }                                                             
                                                                    Initialization
                                                                        book.subject = "Perl"; // Assign properties to the object
                                                                        book.author  = "Mohtashim";
                                                                        object properties- any of 3 primitive DT or ADT (like object)
                                                                        Prexisting- Eg- var str = document.title;
                                                                    Acessors-
                                                                        document.write("Book title is : " + myBook.title + "<br/>");
                                                                    Properties
                                                                        Prototype- book1.prototype.price = 10;  //adds new field
                                                                        constructor- returns method that made this object (applicable for even primitive objects like number)
                                                                            eg- num.constructor- returns- function Number(){....}
                                                                    Object methods- func let obj do sth (or sth done to it)
                                                                        function vs method- standalone or belonging to object.
                                                                        Prexisting- Eg- document.write("Krishna");
                                                                        Adding a new field/ objectProperty- other than prototype
                                                                            Adding a method
                                                                                mybook = new book("Java","Texter"); mybook.addPrice(100);
                                                                                function book(title, author){
                                                                                   this.title = title;
                                                                                   this.author  = author;
                                                                                   this.addPrice = addPrice; // adds method to object
                                                                                }
                                                                                function addPrice(amount){
                                                                                    this.price = amount; 
                                                                                }
                                                                        toSource()- returns JSON of object- ({title:"Perl", publisher:"Leo Inc", price:200})
                                                                    With keyword
                                                                        shorthand for referencing an object's properties or methods.
                                                                        with (object){
                                                                            properties used without the object name and dot
                                                                         }
                                                                         Eg- 
                                                                            function addPrice(amount){
                                                                                with(this){
                                                                                   price = amount;
                                                                                }
                                                                             }
                                                            </Objects>
                                                        </ComplexDT>
                                                    </dataTypes>
                                                    <Operations>
                                                        Supported Operators
                                                            Arithmetic
                                                                + for integers and strings.
                                                            Relational(== &===,!==,>,< , <=,>=) for cmp
                                                            logical
                                                            bitwise- &,|,^, ~,<<,>>, >>> (right shift with zeros)
                                                            assignment (=,+=,-=,*=,/=,%=)
                                                            Others
                                                                Special- typeof, new, this;
                                                                conditional ternary - ? : (expression evaluated iff)
                                                                Eg- typeof b == "string" ? "B is String" : "B is Numeric";
                                                            uninitialized var in expressions are risky; 
                                                            type conversions- num to str, context specific;
                                                            <inBuildFunctions>
                                                                eval(string), parseInt(string)or parseFloat, isNaN(testvalue), isFinite(number),Number(obj),String(obj)
                                                                eg- parseInt(prompt("enter the first  number","0"));
                                                                <Math>
                                                                    no object (or instance) creation
                                                                    Use Math class.
                                                                    Static Methods-
                                                                        Properties- 
                                                                            E (euler's constant)
                                                                            LN2, LN10, LOG2E, LOG10E- logs.
                                                                            PI
                                                                            SQRT1_2- sqrt(1/2)
                                                                            SQRT2- sqrt(2)
                                                                        Methods-
                                                                            abs(num),ceil,floor, round, max(x,y), random,
                                                                            exp(N)- e^N, log(x) (base E), sqrt(5), pow(x,y),
                                                                            sin(inRadian),cos(),acos(),tan
                                                                            toSource()- returns "Math"

                                                                            eg- for random in a range- random()*(y-x)+x
                                                                </Math>
                                                            </inBuildFunctions>
                                                    </Operations>
                                                    <controlFlow>
                                                        <sequential></sequential>
                                                        <selection>if,if..else,switch..case
                                                        </selection>
                                                        <loop>
                                                            when action is to be performed over and over again.
                                                            syntax
                                                                while, for, do-while.
                                                                for (variablename in object){
                                                                    statement or block to execute
                                                                 }
                                                                controls- break, continue
                                                                    break label; (same as goto)
                                                            eg- make rows of different width or populate dropdown.
                                                            eg- year=2000; document.write("<form name='n1'> <select>");  while(year<2050){document.write("<option value=" + year + "</option>"); year++;}document.write("</select></form>");
                                                            Eg-
                                                                var select = document.getElementById("selectNumber"); 
                                                                var options = ["1", "2", "3", "4", "5"]; 

                                                                for(var i = 0; i < options.length; i++) {
                                                                    var opt = options[i];
                                                                    var el = document.createElement("option");
                                                                    el.textContent = opt;
                                                                    el.value = opt;
                                                                    select.appendChild(el);
                                                                }​
                                                        </loop>
                                                        <functionCall>
                                                            call anytime- avoid rewriting codes.
                                                                divide program into manageable parts.
                                                            block of code with a name, pass any args- value or name or expr or void; 
                                                            any number of args, no formal parameters- use arguments[i],arguments.length is loop to retrieve them.
                                                                Y? to link a code with some event/trigger on page
                                                            Extras
                                                                Function defn within defn is allowed- ?but maybe local.
                                                                Fumc constructor- var func = new Function("x", "y", "return x*y;"); call func(10,20);
                                                                var func = function(x,y){ return x*y };
                                                            Eg- 
                                                                function functionname(parameter-list)
                                                                {
                                                                   statements
                                                                   //return statement- preferred when 1 func calls another.
                                                                        return; to get back.
                                                                }
                                                            <user-defined>
                                                                    Angular JS
                                                            </user-defined>
                                                        </functionCall>
                                                    </controlFlow>
                                                </Processing>
                                            </action>

                                            <DOM>
                                                    Broswer window contains HTML document (aka document object)
                                                    Document object contains many properties which allow access and modification of HTML contents.
                                                        DOM is proposed to do so.
                                                        Objects are organized in hierarchy- organization of objects in web document.
                                                        Window object- Browser window
                                                            Document object- each HTML document that gets loaded into a window.

                                                            History
                                                            Location

                                                    w3c given Document Obj Model to access and modify HTML document contents in a tree-like structure 
                                                    to scripting language and thereby describe,manipulate. It's not written into javaScript.
                                                    eg- access the contents.
                                                            document.form1.text1.value;
                                                            reference the title as document.title
                                                    <Types>
                                                            <Window>
                                                                although DOM, I will like to count it as InputOutput (UI capabilities)
                                                                information about window and frames. parent of all.
                                                                prop- status="Krishna consious";	//to show message on status bar
                                                                action- alert(m),prompt,confirm,	parseInt function converts string entry into number
                                                                        Newwin=open(URL,wName[,feature])
                                                                                //wName is for Anchor A target//'height=700,width=500,resizeable=yes,titlebar=yes,menubar=yes,toolbar=no,scrollbars=yes,status=no'; 
                                                                        Newwin.close(),moveTo(x,y)
                                                                ???id=setTimeOut(fn,ms),clearTimeOut(id),status
                                                                        eg- setTimeout("update();",2000) 
                                                                        we can use recursion to have a timer- to stop the timer
                                                                        a button can use clearTimeout(id) and to reset, set the value of counter back to original.
                                                                window.location="http://www.google.com";    //redirects page.
                                                                setTimeout('Redirect()', 10000);    //function call after 10 sec.
                                                                window.print();     //prints current page.
                                                                <Contents>
                                                                    <Document> to access the Html elements inside document
                                                                        prop- URL,title,lastModified;
                                                                            height,width;
                                                                            alinkColor,vlinkColor,linkColor;
                                                                                links[1]
                                                                                referrer- to which HTML doc is linked.
                                                                            fgColor,bgColor;
                                                                            cookie, domain, embeds[1]- controls embed tag and activeX contents (plugins[])
                                                                            document.anchors[0]- 1st anchor in document.
                                                                            document.applets[1]
                                                                            location (=url)
                                                                            w3c- document.body (body tag),defaultView (represents window), documentElement (html tag), implementation.
                                                                                IE4 Model also.
                                                                            <form>array of form objects and names 
                                                                                document.forms[0] or document.formName  //to address the form.
                                                                                Properties
                                                                                    action,target,method,length,elements.
                                                                                    elements[0]- 1st element in the form.
                                                                                        document.forms[1].elements[0]
                                                                                        <properties>                                                                        
                                                                                            elements within the form in elements[] array. Have a form property to ref the parent form.
                                                                                                eg- document.forms[0].elements[0].value or document.form1.rad1[0].value. 
                                                                                                    each radio button has to checked distinctly. 
                                                                                                    2 elements with same name? array is made for that.
                                                                                                text,textarea,password,hidden
                                                                                                    prop- name,type,value,defaultValue,disabled	//.value=="" ..
                                                                                                    action- focus,blur,select
                                                                                                    trigger- onBlur,onFocus,onSelect,onChange
                                                                                                Radio,Checkbox
                                                                                                    prop- name,type,value,checked,defaultValue,defaultChecked,disabled//check checked propertry toselect apt value
                                                                                                    action- focus,blur,click
                                                                                                    trigger- onBlur,onFocus,onClick
                                                                                                Button,reset,submit
                                                                                                    prop- form,name,type,value,disabled
                                                                                                    action- click, blur, focus, submit- without client side scripting it can send.
                                                                                                    trigger- onClick, onBlur, onFocus, onMouseDown, onMouseUp, onSubmit	//button can't submit
                                                                                                Select
                                                                                                    prop- length,options[],selectedIndex,Option.selected for multiple attribute
                                                                                                        Options
                                                                                                            Prop- text, value, index, selected, length
                                                                                                    action- blur, focus
                                                                                                    trigger- onBlur, onChange, onFocus
                                                                                        </properties>
                                                                                <methods>
                                                                                    reset(),submit()
                                                                                </methods>
                                                                                <EH>
                                                                                    onReset(),onSubmit();
                                                                                </EH>
                                                                                <VALIDATION> client side validation.
                                                                                    reqd fields are entered
                                                                                    correct data type
                                                                                    input conforms to a certain standard- eg- telephone number,email
                                                                                    data is in a certain range.
                                                                                    TIPS- limit chars by maxlength or disable if not reqd.
                                                                                        validate all fields b4 db
                                                                                        use in-built functionality- don't reinvent wheel
                                                                                        use js file for validation func
                                                                                </VALIDATION>
                                                                            </form>
                                                                            <images> an array of images is made or use the name
                                                                                document.images[0]
                                                                                    prop- src,width,height, 
                                                                                    eg-document.img1.src="s1.jpg";
                                                                            </images>
                                                                        methods- getElementById("id"),
                                                                            write(str),writeln();	//here str is any html statement
                                                                            clear(),close(),open()
                                                                            w3c- 
                                                                                Create elements
                                                                                    document.createElement( tagName)
                                                                                        document.createComment( text)
                                                                                        document.createTextNode( text)
                                                                                    document.createAttribute( name)
                                                                                Getters
                                                                                    document.getElementById( id)
                                                                                    document.getElementsByName( name)
                                                                                        returns an array of elements with that name (0 length array if none)
                                                                                    document.getElementsByTagName( tagname)
                                                                                Others
                                                                                    document.createDocumentFragment( )
                                                                                    document.importNode( importedNode, deep)

                                                                        triggers- onLoad,
                                                                    </Document>
                                                                    <Location>
                                                                        metadata of the current document page.
                                                                        i/f on current URL.
                                                                        host,hostname,href,protocol	//href can be set also- to load a new page.						
                                                                        reload();replace("krishna.html");
                                                                    </Location>
                                                                    <History>
                                                                            aggregate of all doc pages (data,metadata more abstracted- to url)
                                                                            URLs visited.
                                                                            length-no of entries
                                                                            methods- back();forward(),go(-2);
                                                                                    eg- <A href="javascript:history.go(-1);">BACK</A>
                                                                    </History>
                                                                </Contents>
                                                            </Window>
                                                            <Frame/>


                                                            <Navigator> 
                                                                    Info on browser itself.                
                                                                    version of Navigator.
                                                                    appName,appCodeName,appVersion,userAgent,platform
                                                                        Eg- if (navigator.appName == "Netscape") window.location = "http://www.google.com"; else...
                                                            </Navigator>
                                                    </Types>								
                                                    ???user-defined- function addNumber(n1,n2){return n1+n2;} total=addNumber(10,20);
                                                            eg- checkEmail- if(email.indexOf("@")==-1) return false; return true;

                                                    LAB
                                                    New Website project. right click and add html new file page.
                                                    Use toolbar to add controls on design mode.say a button- double click on this button to create a corresponding method.
                                                    add code and then F5 or double click the page for exec
                                            </DOM>
                                            <Usecases>
                                                <Validation>
                                                    Trigger- Attach to form tag or button click
                                                        form action="/cgi-bin/test.cgi" name="myForm" onsubmit="return(validate());"
                                                    action- 
                                                        function validate()
                                                        {

                                                           if( document.myForm.Name.value == "" )
                                                           {
                                                              alert( "Please provide your name!" );
                                                              document.myForm.Name.focus() ;
                                                              return false;
                                                           }

                                                           if( document.myForm.EMail.value == "" )
                                                           {
                                                              alert( "Please provide your Email!" );
                                                              document.myForm.EMail.focus() ;
                                                              return false;
                                                           }

                                                           if( document.myForm.Zip.value == "" ||
                                                           isNaN( document.myForm.Zip.value ) ||
                                                           document.myForm.Zip.value.length != 5 )
                                                           {
                                                              alert( "Please provide a zip in the format #####." );
                                                              document.myForm.Zip.focus() ;
                                                              return false;
                                                           }

                                                           if( document.myForm.Country.value == "-1" )
                                                           {
                                                              alert( "Please provide your country!" );
                                                              return false;
                                                           }
                                                           return( true );
                                                        }
                                                        function validateEmail()
                                                        {
                                                           var emailID = document.myForm.EMail.value;
                                                           atpos = emailID.indexOf("@");
                                                           dotpos = emailID.lastIndexOf(".");

                                                           if (atpos < 1 || ( dotpos - atpos < 2 )) 
                                                           {
                                                              alert("Please enter correct email ID")
                                                              document.myForm.EMail.focus() ;
                                                              return false;
                                                           }
                                                           return( true );
                                                        }
                                                </Validation>
                                                <animation></animation>
                                                <Multimedia></Multimedia>
                                                <Debugging></Debugging>
                                                    <ErrorHandling>
                                                        syntax error- the line is ignored and others executed.
                                                        runtime- ignored.
                                                        Logical- 
                                                        Solution
                                                            try {
                                                                // Code to run
                                                                [break;]
                                                             } 

                                                             catch ( e ) {
                                                                // Code to run if an exception occurs
                                                                [break;]
                                                             }

                                                             [ finally {
                                                                // Code that is always executed regardless of 
                                                                // an exception occurring
                                                             }]

                                                            throw
                                                                try{
                                                                    if ( b == 0 ){
                                                                       throw( "Divide by zero error." ); 
                                                                    }

                                                                    else
                                                                    {
                                                                       var c = a / b;
                                                                    }
                                                                 }

                                                                 catch ( e ) {
                                                                    alert("Error: " + e );
                                                                 }
                                                            oneerror- whenever error is fired on page
                                                                window.onerror = function () {
                                                                    alert("An error occurred.");
                                                                 }
                                                                 Eg- window.onerror = function (msg, url, line) {
                                                                    alert("Message : " + msg );
                                                                    alert("url : " + url );
                                                                    alert("Line number : " + line );
                                                                 }
                                                        Eg- 
                                                            function myFunc()
                                                            {
                                                               var a = 100;

                                                               try {
                                                                  alert("Value of variable a is : " + a );
                                                               }

                                                               catch ( e ) {
                                                                  alert("Error: " + e.description );
                                                               }

                                                               finally {
                                                                  alert("Finally block will always execute!" );
                                                               }
                                                            }
                                                    </ErrorHandling>
                                                <ImageMap>by coordinates</ImageMap>
                                                <BrowserProperties></BrowserProperties>
                                            </Usecases>
                                    </LanguageConstructs>
                                </JS>
                                <Bootstrap>
                                    Most popular front end in recent times.
                                    Sleek, intuitive, powerful mobile first
                                        responsive (as per device)
                                    easier and faster web devp
                                        getting started- proper documentation.
                                        easy to customize built-in components.
                                        Open source.
                                    Supported by all browsers.
                                    <History>
                                        Mark Otto and Jacob Thornton at Twitter
                                        Released as open source on github.
                                    </History>
                                    <Setup>
                                        http://getbootstrap.com/ -> Download Bootstrap -> 3 alternatives
                                            Download Bootstrap (all files included)
                                                precompiled css, js, fonts (check out these folders and file names)
                                                OR include the links only (best)
                                            Download Source (LESS & JS source code from github)
                                                need to compile the LESS files to produce usable CSS files. (recess based on less.js)
                                                dist folder contains precompiled.
                                            Download SASS (for easy inclusion in Rails, Compass, or Sass-only projects)
                                        Every html page
                                            <meta name = "viewport" content = "width = device-width, initial-scale = 1.0"/>         //to ensure proper rendering and touch zooming on mobile devices (and rendering all devices) and 1.0 means no zooming (1:1 scale)
                                                            //maximum-scale = 1.0, user-scalable = no   - to make it non-zoomable (user scalable is important)
                                            <link href = "css/bootstrap.min.css" rel = "stylesheet"/>
                                            <script src = "https://code.jquery.com/jquery.js"></script>         //bootstraps JS plugins.
                                                OR <script src="/scripts/jquery.min.js"></script>
                                            <script src = "js/bootstrap.min.js"></script>                       //including js files.


                                    </Setup>
                                    <Usecase>
                                            aka basic bootstrap structure (html type)
                                            <Content>
                                                <Images>
                                                    class = "img-responsive"    //max-width: 100%; and height: auto- scales nicely to parent element.
                                                        cuz images come in all different sizes
                                                    styling
                                                        .img-rounded − adds border-radius:6px to give the image rounded corners.
                                                        .img-circle − makes the entire image round by adding border-radius:500px.
                                                        .img-thumbnail − adds a bit of padding and a gray border
                                                        Eg- <img src = "/bootstrap/images/download.png" class = "img-rounded"/>
                                                    anchor image and text
                                                        bind the 2 inside anchor tag with class = thumbnail.
                                                    .embed-responsive-item
                                                        iframe, embed, video, object elements use it to scale nicely to parent.
                                                        embed-responsive-4by3 - for size also 16by9.
                                                </Images>
                                                <Typography>
                                                Typography- background, typography, Link styles.
                                                    family by default- Helvetica Neue, Helvetica, Arial, and sans-serif
                                                    class = "small"     //or small tag- reduces size by 15% and fades color
                                                    class = "lead"  // for emphasis- larger font size, lighter weight, and a taller line height
                                                    strong tag- inc font weight. em- more italics.
                                                        blockquote tag- stronger. add source using small tag- 
                                                            Eg- <blockquote>
                                                                    //class = "pull-right"- to write quote towards the right.
                                                                This is a blockquote with a source title.
                                                                <small>Someone famous in <cite title = "Source Title">Source Title</cite></small>
                                                             </blockquote>
                                                    casing
                                                        text-lowercase, uppercase, capitalize.
                                                    Formality- 
                                                        address tag
                                                        abbr tag- 
                                                            gives a dotted underline- reveals full-form on hover (from title)
                                                            <abbr title = "World Wide Web">WWW</abbr>
                                                            class = "initialism"
                                                    Background
                                                        .bg-primary, .bg-success, bg-info, bg-warning, and .bg-danger
                                                    colors-
                                                        text-muted- grey.
                                                        primary (blue), info (light blue), success (green), danger (red), warning (brown)
                                                    spacing- pre tag (preserves formatting), code tag (inline code)
                                                        Eg- <pre>
                                                                &lt;article&gt;
                                                                   &lt;h1&gt;Article Heading&lt;/h1&gt;
                                                                &lt;/article&gt;
                                                                class = pre-scrollable- standard size vertical scroll for more.
                                                             </pre>
                                                             <kbd>ctrl+a</kbd>
                                                        alignment- text-left, center, right, justify
                                                        text-nowrap.
                                                </Typography>
                                                <Carousel>
                                                    <div id="myCarousel" class="carousel slide" data-ride="carousel">
                                                                                                            //setting carousel look and feel- frame is created.
                                                                                                            //data-ride- to start animating immediately after page load.
                                                        <!-- Wrapper for slides -->
                                                        <div class="carousel-inner" role="listbox">         //wrapper for contents (image or text)
                                                          <div class="item active">                         //make an image.
                                                            <img src="img_chania.jpg" alt="Chania"/>        //any text b4 or after, goes to the immediate top/bottom of carousel (changes with slides (being inside))
                                                          </div>
                                                                                                            //any text here goes to the total top of carousel (same for all slides of carousel)
                                                          <div class="item">
                                                            <img src="img_chania2.jpg" alt="Chania"/>
                                                          </div>

                                                          <div class="item">
                                                            <img src="img_flower.jpg" alt="Flower"/>
                                                             <div class="carousel-caption">                 //at the bottom part of image.
                                                                <h3>Chania</h3>
                                                                <p>The atmosphere in Chania has a touch of Florence and Venice.</p>
                                                              </div>
                                                          </div>
                                                        </div>

                                                        <!-- Indicators -->                                 //dots
                                                        <ol class="carousel-indicators">
                                                                                                            //no of switching dots (points, indicators) to display on carousel
                                                                                                                if lesser than slides- not shown, if greater, not used.
                                                                                                                dots denote the slide in enumeration (but clicking them determined by data-slide-to)
                                                          <li data-target="#myCarousel" data-slide-to="0" class="active"></li>      //active means point.
                                                          <li data-target="#myCarousel" data-slide-to="3"></li>
                                                                                                            //optional- (create links)- data-target and data-slide-to (JS) - click on the indicator takes me to enumerated image (and corresponding dot)
                                                        </ol>

                                                        <!-- Left and right controls -->                    //previous and next arrow
                                                        <a class="left carousel-control" href="#myCarousel" role="button" data-slide="prev">
                                                                                                            //"left carousel-control"- to indicate the side of carousel.
                                                                                                            //what to do- data-slide (JS)- action to take (move next or previous)
                                                                                                                    use data-slide-to.
                                                          <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
                                                                                                            //to draw left arrow (glyphicon) for left carousel control.
                                                          <span class="sr-only">Previous</span>
                                                        </a>
                                                        <a class="right carousel-control" href="#myCarousel" role="button" data-slide="next">
                                                          <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
                                                          <span class="sr-only">Next</span>
                                                        </a>
                                                    </div>
                                                </Carousel>
                                            </Content>
                                            <ArrangingInformation>
                                                <Lists>
                                                    same as html
                                                    ul
                                                        class = "list-unstyled"     // removes bullets.
                                                            list-inline         //list to appear in 1 line.
                                                    dl
                                                        dl-horizontal- to remove indentation of definition data.
                                                </Lists>
                                                <Tables>
                                                    caption 	Description or summary of what the table holds.
                                                    thead- Container element for table header rows (tr) to label table columns. //formality
                                                    tbody- for body of table    //formality
                                                    class = "table"
                                                        light padding and horizontal dividers
                                                    styling
                                                        table-striped- stipes for alternate rows.
                                                        table-bordered- to give border.
                                                        table-hover- on hover, changes row color
                                                        table-condensed- row padding is cut to half.
                                                        table-responsive- in small devices- it will allow horizonal scroll.
                                                        Rows or data related (changes color of row/ data)
                                                            .active 	Applies the hover color to a particular row or cell (grey)
                                                            .success 	Indicates a successful or positive action (green)
                                                            .warning 	Indicates a warning that might need attention (yellow)
                                                            .danger 	Indicates a dangerous or potentially negative action (red)
                                                    Eg-
                                                        <table class="table table-hover">
                                                            <thead>
                                                              <tr>
                                                                <th>Firstname</th>
                                                                <th>Lastname</th>
                                                                <th>Email</th>
                                                              </tr>
                                                            </thead>
                                                            <tbody>
                                                              <tr>
                                                                <td>John</td>
                                                                <td>Doe</td>
                                                                <td>john@example.com</td>
                                                              </tr>
                                                              <tr>
                                                                <td>Mary</td>
                                                                <td>Moe</td>
                                                                <td>mary@example.com</td>
                                                              </tr>
                                                            </tbody>
                                                          </table>

                                                </Tables>
                                                <Grid>
                                                    Defn- grid is a structure (usually two-dimensional) made up of a series of intersecting straight (vertical, horizontal) lines used to structure the content.
                                                    design layout and content structure in print design (used for consistent layout)
                                                    Why? organise and structure content => makes the websites easy to scan => reduces the cognitive load on users.
                                                    scales up to 12 columns on viewport (using predefined classes)
                                                        grid is made up of 12 units and you can define the desired size of your columns using those units.
                                                        for all devices (small, large)- specify the columns you want separately.
                                                    Mobile first- content most important, design to smaller width first and add elements as size increases.
                                                    Nesting, Offset, Push-pull.     //container ain't cuz of padding and margin it uses (see source code)
                                                    <Structure>
                                                        <div class = "container">   
                                                            <div class = "row">
                                                               <div class = "col-*-*"></div>
                                                               <div class = "col-*-*"></div>
                                                            </div>
                                                            <div class = "row" style = "background-color: #dedef8; box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;">
                                                                <div class = "col-md-6 col-lg-4"></div>             //stacked horizonally if small viewport is used; when exceeding 12, it uses next row. Height is not fixed.
                                                                    <div class = "row">            
                                                                        <div class = "col-md-6 col-md-push-6">Nesting</div>
                                                                        <div class = "col-md-6 col-md-pull-6">to any levels</div>
                                                                                                                    //push pull swap the two cols.
                                                                    </div>
                                                                <div class = "col-lg-8 col-md-offset-3"></div>      // use sm for small (tablets). xs for xtra-small (mobile). md (medium- PC). lg- large PC. if unspecified for a type- equal sizes are used.
                                                            </div>
                                                                                                                    //Offset- push columns over (from start) for more spacing
                                                        </div>
                                                        <div class = "container">
                                                           ....
                                                        </div>
                                                    </Structure>
                                                </Grid>
                                                <Align>
                                                Element Align
                                                    pull-right / pull-left
                                                        float an element to an extreme
                                                        prefer navbar-left/navbar-right instead
                                                    center-block
                                                        <div class = "row">
                                                            <div class = "center-block" style = "width:200px; background-color:#ccc;">
                                                               This is an example for center-block
                                                            </div>
                                                         </div>
                                                </Align>
                                                clearfix- clear the float of any element
                                                <Boxed>
                                                    class = jumbotron.
                                                        inside container to not let it extend to boundary.
                                                        indicates a big box for calling extra attention to some special content or information.
                                                            A jumbotron is displayed as a grey box with rounded corners.
                                                            enlarges the font sizes of the text inside it
                                                    well
                                                        rounded border around an element with a gray background color and some padding
                                                        class = "page-header"   //time pass- extra space.
                                                        well-sm, well-lg (size)
                                                    alerts
                                                        <div class="alert alert-success">
                                                            <strong>Success!</strong> Indicates a successful or positive action.
                                                        </div>
                                                            .alert-info, .alert-warning or .alert-danger
                                                            close the alert box thru a button
                                                                add an anchor tag of close button to the text.
                                                                    class="close" and data-dismiss="alert"
                                                                    aria-label = "close" to help sr-only.
                                                                to alert div, add fade and in- create fading effect on closing.
                                                    <div class="panel panel-default">
                                                        <div class="panel-heading">Panel Heading</div>
                                                        <div class="panel-body">Panel Content</div>
                                                        <div class="panel-footer">Panel Footer</div>
                                                    </div>
                                                        panel-group - grouping panels together
                                                        variants (at topmost)- .panel-default, .panel-primary, .panel-success, .panel-info, .panel-warning, or .panel-danger
                                                </Boxed>
                                                <ListGroup>
                                                    <ul class="list-group">
                                                       <li class="list-group-item">First item</li>     //use anchor instead of li- to make it linked items.
                                                       <li class="list-group-item active">Second item</li>
                                                       <li class="list-group-item disabled">Third item</li>
                                                     </ul>
                                                     variants
                                                       li class = "list-group-item-success"
                                                           success, info, danger, warning
                                                       list-group-item-heading, text (main list and subtext)

                                                </ListGroup>
                                            </ArrangingInformation>
                                            <ManagingInformation>
                                                <Collapse>
                                                    To encapsulate information- interrelationship between information (collapse)- Focus on 1 aspect at a time.
                                                    show or hide some content.
                                                    Eg- 
                                                        <button data-toggle="collapse" data-target="#demo">Collapsible</button>
                                                            //data-target (href=#id) tells the element to target and data-toggle tells what to do.
                                                            //can be a link.
                                                        <div id="demo" class="collapse">    
                                                            //class is not necessary- maybe starts with collapse.
                                                            //use "collpase in" to show by default.
                                                        Lorem ipsum dolor text....
                                                        </div>
                                                    Regex- 
                                                        [button][content]
                                                        detail- 
                                                        < [button/a] data-toggle="collapse/dropdown" data-target="#[id] >
                                                            [buttonLabel]
                                                        </ [button/a] >
                                                        < div id="[id]" class="collapse [in]" >
                                                            [Content]
                                                        </ div >
                                                    Variants-
                                                        Collapsible Panel
                                                            useful with panels body visible only when link in header is pressed. 
                                                                surround body by collapse class div.
                                                        Collapsible List Group
                                                            same thing- list group visible only after link click.
                                                        accordion
                                                            only 1 of n- link uncollapses at a time.
                                                            create a panel group- its id="accordion" then inside all link/buttons add data-parent="#accordion"
                                                                //this makes sure that 1 opens at most.
                                                </Collapse>
                                                <Pagination>
                                                    pagination (dividing information)- focus on part of whole information.
                                                    <ul class="pagination">
                                                       <li><a href="#">1</a></li>
                                                       <li class="active"><a href="#">2</a></li>
                                                       <li><a href="#">3</a></li>
                                                       <li class="disabled"><a href="#">4</a></li>
                                                       <li><a href="#">5</a></li>
                                                     </ul>
                                                     Regex- 
                                                    <ul class="pagination [pagination-lg /sm/ md]"> 
                                                        [ 
                                                        < li [class="[active/ disabled]?"] >
                                                            <a href="[link]">
                                                                [PageNum]
                                                            </a>
                                                        < /li >
                                                        ]+
                                                    </ul>
                                                     variants
                                                       size- pagination-lg, sm, etc
                                                       <ul class="pager">
                                                           <li><a href="#">Previous</a></li>
                                                           <li><a href="#">Next</a></li>
                                                       </ul>
                                                </Pagination>
                                                <ScrollSpyPlugin>
                                                    element with data-spy="scroll" requires the CSS position property, with a value of "relative" to work properly.
                                                    <style>body{position:relative;}</style>
                                                     <!-- The scrollable area -->
                                                    <body data-spy="scroll" data-target=".navbar" data-offset="50">
                                                                                                                // to the element that should be used as the scrollable area
                                                                                                                // data-target- name of id or classbar- navbar.
                                                                                                                // data-offset- number of pixels to offset from top when calculating the position of scroll
                                                    <!-- The navbar - The <a> elements are used to jump to a section in the scrollable area -->
                                                    <nav class="navbar navbar-inverse navbar-fixed-top">
                                                    ...
                                                      <ul class="nav navbar-nav">
                                                        <li><a href="#section1">Section 1</a></li>              //scrollable elements must match the ID of the links
                                                      </ul>
                                                    </nav>

                                                    <!-- Section 1 -->
                                                    <div id="section1">
                                                      <h1>Section 1</h1>
                                                      <p>Try to scroll this page and look at the navigation bar while scrolling!</p>
                                                    </div>
                                                    ...

                                                    </body>

                                                    Eg2-
                                                        <body data-spy="scroll" data-target="#myScrollspy" data-offset="20">
                                                            <div class="container">
                                                              <div class="row">
                                                                <nav class="col-sm-3" id="myScrollspy">
                                                                  <ul class="nav nav-pills nav-stacked">
                                                                    <li><a href="#section1">Section 1</a></li>
                                                                    ...
                                                                  </ul>
                                                                </nav>
                                                                <div class="col-sm-9">
                                                                  <div id="section1">
                                                                    <h1>Section 1</h1>
                                                                    <p>Try to scroll this page and look at the navigation list while scrolling!</p>
                                                                  </div>
                                                                  ...
                                                                </div>
                                                              </div>
                                                            </div>
                                                        </body>
                                                </ScrollSpyPlugin>
                                                <AffixedNavigationMenu>
                                                     <nav class="navbar navbar-inverse" data-spy="affix" data-offset-top="197"></nav>
                                                            //element you want affixed
                                                            //data-offset-top|bottom attribute to calculate the position of the scroll
                                                    .affix {
                                                        top: 0;
                                                        width: 100%;
                                                    }

                                                    .affix + .container-fluid {
                                                        padding-top: 70px;
                                                    }
                                                    //not fully covered.
                                                </AffixedNavigationMenu>
                                            </ManagingInformation>
                                            <FormsLayouts>
                                                basic/ vertical
                                                    role = form                 //improve accessibility for people using screen readers
                                                        vertical by default
                                                        class = "form-inline"
                                                            If viewport > 768px, all elements are inline, left aligned and labels are alongside- in 1 line.
                                                                else vertical.
                                                            use 100% width- control with user.
                                                            label class = "sr-only"     //hides labels
                                                        class = "from-horizontal"
                                                            If viewport > 768px, every form-group (label and input fields (controls) in 1 line) in different lines.
                                                                else vertical.
                                                    class = "form-group"        //optimum spacing; give 100% width to the elements inside
                                                        form-group-lg, sm (additional classes for size)
                                                        label-control pair come inside of it        //to form a group.

                                                        attribute class = "has-success"
                                                            has-warning, has-error          //validation styles- coloration.

                                                        class = "control-labels" to labels      //applies same color as the form-group.
                                                        class = "form-control"      //for controls; use placeholder attrib for info to user.
                                                            class = "checkbox"
                                                    eg- 
                                                        <div class = "form-group">
                                                            <label for = "inputfile" class="control-lable">File input</label>
                                                            <input type = "file" id = "inputfile" class="Form-control"/>
                                                            <p class = "help-block">Example block-level help text here.</p>
                                                        </div>
                                                    Eg- 
                                                         <form role="form">
                                                            <div class="form-group">
                                                              <label for="email">Email address:</label>
                                                              <input type="email" class="form-control" id="email"/>
                                                            </div>
                                                            <div class="form-group">
                                                              <label for="pwd">Password:</label>
                                                              <input type="password" class="form-control" id="pwd"/>
                                                            </div>
                                                            <div class="checkbox">
                                                              <label><input type="checkbox"/> Remember me</label>
                                                            </div>
                                                            <button type="submit" class="btn btn-default">Submit</button>
                                                          </form>
                                                <Elements>
                                                    dimensions
                                                        Height
                                                            class = "input-lg"
                                                                "input-sm"
                                                        Width
                                                            class = "col-lg-2"

                                                    Checkbox/Radiobox
                                                        class = "radio-inline"      //controls appear on the same line.
                                                            class = "checkbox-inline"
                                                            disabled (html control to make it uneditable)
                                                        Eg- 
                                                            <div class="checkbox">
                                                                <label><input type="checkbox" value=""/>Option 2</label>
                                                              </div>
                                                    Textbox
                                                        class = "form-control-static" for uneditable text.
                                                    <span class = "help-block">
                                                        A longer block of help text that breaks onto a new line and may extend beyond one line.
                                                     </span>
                                                    Button
                                                        usage
                                                            <a class = "btn btn-default" href = "#" role = "button">Link</a>
                                                            <button class = "btn btn-default" type = "submit">Button</button>
                                                            <input class = "btn btn-default" type = "button" value = "Input"/>
                                                            <input class = "btn btn-default" type = "submit" value = "Submit"/>
                                                        class = "btn" - gray button with rounded corners
                                                        styling
                                                            btn-primary     Provides extra visual weight and identifies the primary action in a set of buttons.
                                                            btn-info        Contextual button for informational alert messages.
                                                            btn-success     Indicates a successful or positive action.
                                                            btn-warning     Indicates caution should be taken with this action.
                                                            btn-danger      Indicates a dangerous or potentially negative action.
                                                            btn-link        Deemphasize a button by making it look like a link while maintaining button behavior.
                                                        size
                                                            height
                                                                .btn-lg 	This makes the button size large.
                                                                .btn-sm 	This makes the button size small.
                                                                .btn-xs 	This makes the button size extra small.
                                                            width
                                                                .btn-block 	This creates block level buttons—those that span the full width of a parent.
                                                        states
                                                            eg- active, disabled.
                                                            active
                                                                just an attribute with no value
                                                                with a darker background, darker border, and inset shadow
                                                            disabled
                                                                 fade in color by 50%, and lose the gradient.
                                                                 button tags apply as attribute with no value.
                                                                 on anchor tag it just changes appearance- not functionality.
                                                                 Eg-
                                                                    <button type = "button" class = "btn btn-default btn-lg" disabled = "disabled">
                                                                        //disabled class instead of attribute is acceptable.
                                                                        Disabled Button
                                                                    </button>
                                                                    <a href = "#" class = "btn btn-default btn-lg disabled" role = "button">
                                                                        Disabled Link
                                                                    </a>
                                                        Eg-
                                                            <button type = "button" class = "btn btn-primary btn-lg btn-block">
                                                                Block level Primary button
                                                            </button>
                                                    <variations>
                                                        :focus removes outline and adds box shadow
                                                        Disabled inputs- 
                                                            for labels
                                                                for = "disabledTextInput"
                                                                    "disabledSelect"
                                                                    "inputpassword"
                                                                    "inputsuccess"
                                                                    <label for = "disabledTextInput"  class = "col-sm-2 control-label">
                                                                        Disabled input (Fieldset disabled)
                                                                     </label>
                                                            1. <!-- <fieldset disabled/>
                                                                <div class = "form-group">...</div> ...
                                                            </fieldset>-->
                                                            2. with every field write down disabled as an attribute.
                                                        attribute readonly- to not allow altration.
                                                        add feedback icons with the .has-feedback
                                                            Eg-
                                                            <div class="form-group has-success has-feedback">
                                                                <label for="inputSuccess2">Input with success</label>
                                                                <input type="text" class="form-control" id="inputSuccess2"/>
                                                                <span class="glyphicon glyphicon-ok form-control-feedback"></span>
                                                                                //glyphicon-warning-sign (triangle), glyphicon-remove (cross) instead of ok (tick) and coloration.
                                                            </div>
                                                    </variations>
                                                </Elements>
                                            </FormsLayouts>
                                            <HelperClasses>
                                                Special symbols
                                                    class = "close"     //used inside button to dismiss the modal, etc
                                                        Eg- 
                                                            <button type = "button" class = "close" aria-hidden = "true">
                                                                &times;
                                                            </button>
                                                    caret
                                                        <span class = "caret"></span>
                                                    Glyphicon
                                                        <button type = "button" class = "btn btn-default btn-lg">
                                                            <span class = "glyphicon glyphicon-user"></span>
                                                             User
                                                        </button>
                                                            used in layout (use space with text)
                                                            glyphicon- just a button created
                                                                glyphicon glyphicon-name
                                                            user
                                                            Envelope glyphicon:
                                                            Print glyphicon:
                                                            Search glyphicon:
                                                            Download glyphicon: 
                                                            glyphicon-sort-by-attributes 
                                                                glyphicon-sort-by-attributes-alt
                                                            glyphicon-sort-by-order
                                                                glyphicon-sort-by-order-alt
                                                    Badge
                                                        <span class="badge">5</span>
                                                        oval shaped with 5 inside it (inbox messages)
                                                    Labels
                                                        <span class="label label-primary">Primary Label</span>
                                                            .label-default, .label-primary, .label-success, .label-info, .label-warning or .label-danger
                                                    <span class="icon-bar"></span>
                                                        used with buttons.
                                            </HelperClasses>
                                            <InformationToUser>
                                                <HidingRelated>
                                                    show/hidden
                                                        <div class = "show" style = "left-margin:10px; width:300px; background-color:#ccc;">
                                                            This is an example for show class
                                                         </div>

                                                         <div class = "hidden" style = "width:200px; background-color:#ccc;">
                                                            This is an example for hide class
                                                         </div>
                                                    sr-only
                                                        hides an element- visible to only screen readers.
                                                    showing and hiding content by device via media query
                                                        avoid using different versions of same website
                                                        .visible-xs 	Extra small (less than 768px) visible
                                                            ?And not to others.
                                                            //sm,md,lg
                                                        .hidden-xs 	Extra small (less than 768px) hidden
                                                            //sm,md,lg
                                                    hiding from print
                                                        .visible-print 	Yes Visible
                                                        .hidden-print 	Visible only to browser not to print.
                                                </HidingRelated>
                                                <ModalPlugin>
                                                    dialog box/popup window that is displayed on top of the current page
                                                    Can also be used for information managing (encapsulating)
                                                    Eg- 
                                                        <!-- Trigger the modal with a button -->
                                                        <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Open Modal</button>

                                                        <!-- Modal -->
                                                        <div id="myModal" class="modal fade" role="dialog">
                                                                                                //.fade class adds a transition effect which fades the modal in and out
                                                          <div class="modal-dialog">            // sets the proper width and margin
                                                                                                // additional- modal-sm, lg

                                                            <!-- Modal content-->
                                                            <div class="modal-content">         //"modal-content" styles the modal (border, background-color, etc.)
                                                              <div class="modal-header">        // to style the header
                                                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                                <h4 class="modal-title">Modal Header</h4>
                                                              </div>
                                                              <div class="modal-body">          //to style the body. (images, etc)
                                                                <p>Some text in the modal.</p>
                                                              </div>
                                                              <div class="modal-footer">        //to style the footer.
                                                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                                              </div>
                                                            </div>

                                                          </div>
                                                        </div>
                                                </ModalPlugin>
                                                <ProgressBar>
                                                    How much of user's task is over (like filling a form over pages)
                                                    <div class="progress">
                                                        <div class="progress-bar" style="width:70%"      role="progressbar" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100">
                                                            <span>70% Complete</span>         //70% comes as lable. use sr-only to hide.
                                                        </div>
                                                    </div>
                                                    variants of progress-bar- 
                                                        coloring- progress-bar-success, info, warning, danger.
                                                        striped- progress-bar-striped
                                                        animation- active- to have stipes moving
                                                        stacked progress bar- 
                                                            <div class="progress">
                                                                <div class="progress-bar progress-bar-success" role="progressbar" style="width:40%">
                                                                  Free Space
                                                                </div>
                                                                <div class="progress-bar progress-bar-warning" role="progressbar" style="width:10%">
                                                                  Warning
                                                                </div>
                                                                <div class="progress-bar progress-bar-danger" role="progressbar" style="width:20%">
                                                                  Danger
                                                                </div>
                                                            </div>
                                                </ProgressBar>
                                                <BreadCrumbs>
                                                    current navigational context.
                                                    cascade- current page's location within a navigational hierarchy
                                                     <ul class="breadcrumb">
                                                        <li><a href="#">Home</a></li>
                                                        <li class="previous"><a href="#">Private</a></li>   //class previous or next to align to extreme left or right.
                                                        <li><a href="#">Pictures</a></li>
                                                        <li class="active">Vacation</li>
                                                      </ul>
                                                </BreadCrumbs>
                                                <Tooltip>
                                                    <a href="#" data-toggle="tooltip" data-placement="top" title="Hooray!">Top</a>
                                                    regex-
                                                        < [tag] data-toggle="tooltip" title="[TextContent]" [data-placement="[top/bottom/left/right]]?> content </ [closeTag] >
                                                </Tooltip>
                                                <TogglePopOver>
                                                Eg- 
                                                    <a href="#" data-toggle="popover" title="Popover Header" data-content="Some content inside the popover" data-placement="top">Toggle popover</a>
                                                    <script>
                                                        $(document).ready(function(){
                                                            $('[data-toggle="popover"]').popover();
                                                        });
                                                    </script>
                                                Regex- < a href="#" data-toggle="popover"/data-trigger="[focus/hover]"] title="Popover Header" data-content="Some content inside the popover" data-placement="[top/left/right/bottom]">Toggle popover</ a>
                                                    <script>
                                                        $(document).ready(function(){
                                                            $('[data-toggle="popover"]').popover();
                                                        });
                                                    </script>
                                                </TogglePopOver>
                                            </InformationToUser>

                                        <LayoutComponents>
                                            iconography, dropdowns, navigation, alerts, pop-overs,etc,
                                            <Dropdown>
                                                associating a dropdown (list toggle) with a button click.
                                                make a div with class = "dropdown" (changes line) or "btn-group"
                                                    inside- make a button (or link) with data-toggle = "dropdown" (necessary) and class- dropdown-toggle (?)
                                                        //?id and aria-labelled are for screen readers.
                                                    inside- make a ul with class = dropdown-menu
                                                    //dropdown starts with first button after btn-group declaration.
                                                <div class = "dropdown">    //dropup also
                                                    <button type = "button" data-toggle = "dropdown" class = "btn dropdown-toggle" id = "dropdownMenu1">
                                                            //id, role and aria-labelledby are for sr-only.
                                                       Topics
                                                       <span class = "caret"></span>
                                                    </button>
                                                    <ul class = "dropdown-menu" role = "menu" aria-labelledby = "dropdownMenu1">
                                                            //add pull-right or dropdown-menu-right to move menu to the right.
                                                       <li role = "presentation" class = "dropdown-header">Dropdown header</li>
                                                            //to give headers to a list in items in dropdown.
                                                       <li role = "presentation">
                                                          <a role = "menuitem" tabindex = "-1" href = "#">Java</a>
                                                       </li>
                                                       <li role = "presentation" class="disabled">
                                                          <a role = "menuitem" tabindex = "-1" href = "#">Data Mining</a>
                                                       </li>
                                                       <li role = "presentation">
                                                          <a role = "menuitem" tabindex = "-1" href = "#">
                                                             Data Communication/Networking
                                                          </a>
                                                       </li>
                                                       <li role = "presentation" class = "divider"></li>
                                                       <li role = "presentation" class = "dropdown-header">Dropdown header</li> 
                                                       <li role = "presentation">
                                                          <a role = "menuitem" tabindex = "-1" href = "#">Separated link</a>
                                                       </li>
                                                    </ul>
                                                 </div>
                                            </Dropdown>
                                            <ButtonGroup>
                                                allow multiple buttons to be stacked together on a single line
                                                    <div class = "btn-group">               //set of buttons
                                                        <button type = "button" class = "btn btn-default">Button1</button>
                                                        <button type = "button" class = "btn btn-default">Button2</button>
                                                    </div>
                                                    btn-group-lg, btn-group-vertical
                                                we use buttongroup and dropdowns together- to collapse the menu buttons.
                                                <div class = "btn-toolbar" role = "toolbar">    
                                                    //presents a set of group-buttons together.
                                                </div>
                                            </ButtonGroup>
                                            <ButtonDropdowns>
                                                same a dropdown with replacing class = "dropdown" by "btn-group"
                                                Split buttons dropdown- add 2 buttons in a buttongroup- attach dropdown to the second caret labelled button.
                                                Drop-up- attached to buttongroup to make options visible upwards.
                                            </ButtonDropdowns>
                                            <inputGroup>
                                                <div class = "input-group">
                                                    <span class = "input-group-addon">$</span>
                                                    <input type = "text" class =" form-control"/>
                                                    <span class = "input-group-addon">.00</span>
                                                 </div>
                                                 sizing
                                                    input-group-lg, etc
                                                 grouping with other input
                                                    <div class = "input-group">
                                                        <span class = "input-group-addon">
                                                           <input type = "radio"/>
                                                        </span>
                                                        <input type = "text" class = "form-control"/>
                                                     </div><!-- /input-group -->

                                                    Use input-group-btn to wrap the buttons, instead of input-group-addon
                                                        //associate it with list to get a dropdown.
                                            </inputGroup>
                                            <Navigation>
                                                <ul class="list-inline">...</ul>
                                                OR
                                                <ul class = "nav nav-tabs">
                                                    <li class = "active"><a href = "#">Home</a></li>
                                                    <li class = "disabled"><a href= "#">Hi</a></li> //changes appearance not functionality; use JS.
                                                    <li class = "dropdown">.....</li>
                                                    ....
                                                </ul>
                                                nav-pills

                                                nav-stacked- to have it vertical.
                                                    nav-justified- full 100% on big screens.
                                                Toggle-able/ dynamic tabs
                                                    data-toggle="tab" to each link and href = #id1.
                                                    <ul class="nav nav-tabs">
                                                        <li class="active"><a data-toggle="tab" href="#home">Home</a></li>
                                                        <li><a data-toggle="tab" href="#menu1">Menu 1</a></li>
                                                    </ul>
                                                    <div class="tab-content">   //for all tabs, add content with ids inside this.
                                                        <div id="home" class="tab-pane fade in active">
                                                          <h3>HOME</h3>
                                                          <p>Some content.</p>
                                                        </div>
                                                        <div id="menu1" class="tab-pane fade">
                                                          <h3>Menu 1</h3>
                                                          <p>Some content in menu 1.</p>
                                                        </div>
                                                    </div>
                                                    Variants
                                                        data-toggle="pills"
                                                dropdown on navigation
                                                    The desired li tag should have class dropdown and associate button or anchor with ul.
                                                Navbar- 
                                                    placed at the top of the page.
                                                    extend or collapse, depending on the screen size
                                                    ?
                                                        styling of navigation- horizontal for larger viewport sized devices.
                                                        navbar navbar-default- main tag. Role = "navigation" is to help with accessibility.
                                                        navbar-header- info on navigation (project)
                                                            navbar-brand inside of it. RAPS we wrote.
                                                        nav navbar-nav - for ul to be added to navbar for links.
                                                    Eg- 
                                                        <nav class="navbar navbar-default">
                                                            // navbar-inverse
                                                            //navbar-fixed-top- it won't move with scroll of page.
                                                                //bottom

                                                            <div class="container-fluid">
                                                              <div class="navbar-header">
                                                                <a class="navbar-brand" href="#">WebSiteName</a>
                                                              </div>
                                                              <ul class="nav navbar-nav">
                                                                <li class="active"><a href="#">Home</a></li>
                                                                <li><a href="#">Page 1</a></li>
                                                                <li><a href="#">Page 2</a></li>
                                                                    //add dropdown to li for dropdown menu.
                                                                <li><a href="#">Page 3</a></li>
                                                              </ul>
                                                              <ul class="nav navbar-nav navbar-right">
                                                                    <li><a href="#"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>
                                                                    <li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
                                                              </ul>
                                                            </div>
                                                        </nav>
                                                        Variants
                                                            Small screen- we need to hide menuitems
                                                            Inside navbar-header div, add- 
                                                                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                                                                    <span class="icon-bar"></span>
                                                                    <span class="icon-bar"></span>
                                                                    <span class="icon-bar"></span>
                                                                </button>
                                                            add id=myNavbar in div containing ul.
                                                                <div class="collapse navbar-collapse" id="myNavbar">
                                                                    <ul class="nav navbar-nav">
                                                                      <li class="active"><a href="#">Home</a></li>
                                                                      <li><a href="#">Page 1</a></li>
                                                                      <li><a href="#">Page 2</a></li>
                                                                      <li><a href="#">Page 3</a></li>
                                                                    </ul>
                                                                </div>
                                            </Navigation>
                                        </LayoutComponents>
                                        <BootstrapPlugins>
                                            JavascriptPlugins
                                        </BootstrapPlugins>
                                    </Usecase>
                                </Bootstrap>
                                <Misc>
                                    How to disable Back Button in browsers
                                            https://www.htmlgoodies.com/tutorials/buttons/article.php/3478911/Disabling-the-Back-Button.htm
                                            It's redirection - you click a link to page a which redirects to page b. When you click back you go back to page a which instantly redirects you back to page b. If you click twice quickly then there isn't time to redirect.
                                            another back-button problem with JavaScript apps that don't do page reloads where changes to the page don't register as history events, so pressing back takes you back much further than you expected. But that's a completely unrelated issue.
                                            If you're using firefox or chrome (haven't used any others myself) you can always right-click on the back arrow, which will present you with a chronological list of previous pages. Select where you want to go and bypass all this redirect nonsense.
                                            This is so infuriating. Whoever does this to webpages isn't fit to live on this earth.
                                            https://www.reddit.com/r/explainlikeimfive/comments/2cvn6u/eli5_why_some_websites_dont_let_me_use_the_back/
                                            Disable right click - document.addEventListener('contextmenu', event => event.preventDefault());
                                                    That being said : DON'T DO IT ! Annoys users - not enough to protect data.
                                                    Javascript you code can be rendered moot by simply turning off Javascript on the browser or using a plugin like NoScript
                                                    wget works for OS.
                                </Misc>
                            </FrontEnd>
                            <BusinessLayer>
                                <Frameworks>
                                    <WebDevelopment>
                                        <HowItsDone>
                                            Apache Tomcat
                                                    Choose this Run-time for execution
                                                            give the path of Tomcat version.
                                                    when we right-click run- whole project gets deployed on Apache and is run to show us the outcome.
                                                            The project run in a the subnet container (tomcat) and for the url first of all web.xml is searched.
                                                    like IIS- we set up all files in there and it picks files and delivers for all requests.			
                                            Struts Build path setting
                                                    add user library to the project ->properties->Java Build Path->Add library->give a name (struts2)->see the list of imp ones->ok.
                                                    include user library to the deployment- project->prop->Deployment Assembly->add->struts2.
                                                    included in WEB-INF -> lib.
                                            When a project runs- tomcat searches for the url in web.xml- doesn't find it gives error- we want to transfer control to struts.xml
                                                    tell it not to worry- struts.xml will take care.
                                                    insert the filter tag which executes before the other tags.
                                            src->new xml file.
                                                    map the url path to action class execute fn called thru Action tag name,class in package tag(name,extends)
                                            src->new action class created. System.out.println writes on server console but to write on client- html needs to be sent but no servlet in here.
                                                    how to transfer the control to JSP. Business service method and gives a list of tutorials and JSP renders it as HTML?
                                                            can pass by name of JSP but what if names are changed
                                                            so standardized place for updation (XML)- have an additional column in xml
                                                                    redirect to that that.jsp
                                                                    but hey! no one jsp to forward to if error, then error.jsp else success.jsp
                                                                    xml needs outcome of execute class to redirect and action class doesn't want to hardcode it.
                                                                    Action class return a code based on which 1 of the many JSPs in xml gets called.
                                                                            xml is configures JSP to call for code returned.
                                                                            expressed thru result tag (name)-value.
                                            Create JSPs inside web folder.
                                            execute the application
                                                    get an error saying that no action mapped for root namespace- write the name of url corresponding to which we made app.
                                                    generally picked up from files on web.xml but no index.jsp in there.
                                                    create the index.jsp in web folder.
                                                    see the url- localhost:80 where tomcat is running and project name and then file.

                                                    when many pagesof 1 type we want to club them- so nested url.
                                                            helps classify actions.
                                                            How? thru namespaces. Inside package I do mapping- here I add namespace.
                                                            namespace property for that tag. ="/tutorials"
                                                            for xml change we need to restart the server.
                                                            If no namespace for root, then previous url won't work.
                                                            http://server:port/webapp/namespace/action.action
                                                                    [namespacing] url is to be constructed so that we can classify related action names into a particular namespace- organized url.
                                                                    why bundle? namespace to group action mappings.
                                            Adding a business service- action class will call business service and that will call JSP.
                                                    business service will return a value and action will print that.
                                                            call it TutorialFinderService in the service package.
                                                    our execute of action will call business service which returns response which action can do anything with
                                                            have a local variable reference of service class.
                                                            different concerns of action class and service class.
                                                            System.out.println prints on console.
                                                            How to print the string in JSP from action?
                                                                    Keep string in session- not a good idea- later.
                                                                    Make it a member variable making it global to be accessible outta class and method in world.
                                                                    1 struts2 tag does to use the value in JSP.
                                                                    add taglib tag before using struts tags- prefix "s"
                                                                            <!--<s:property -->- to see member variables of corresponding action class.
                                                                                    value- the name whose value u wanna print.
                                                                                    make getter setters for them.
                                            How input parameters work/ QueryString (GET request)
                                                    we had standardized hardcoded the outcome of service method- different for different requests type- like for dotnet,ruby.
                                                    intent is to append on url- ?name=value like language=dotnet and get corresponding outcome.
                                                            make member var (with their getters/setters) of same name in action class. we get the url value assigned to that var
                                                            interceptors do that by writing into valuestack for corresponding action class' member variable's setters.
                                                            update the service classes with if else statements.
                                                            with GET, .action extension is not required to be given.
                                            Post request to Actions (POST Request)
                                                    create new JSP. 
                                                    <!--<form method="post" action="tutorial/gettutorial.action">--> id text and submit button in there
                                                    Even for post, just keep the name of field same and its values are detected by interceptors and populated acc.

                                                    Struts also support these tags and come quite handy. easy to link to actions.
                                                    taglib prefix s tag. on top.
                                                            //of course, they will be converted into html for browser rendition.
                                                            //it automatically creates a table for alignment.
                                                            //prefer over html.
                                                    <!--
                                                    <s:form action = tutorial/gettutorial">
                                                            <s:textfield key="Language"/>	//value to be populated to language member variable.
                                                                            //Label of the same key is automatically put.
                                                                            //override label by label property- 
                                                            <s:submit/>
                                                    </s:form>
                                                    -->
                                            LoginAction and Best Practices- we now know, taking input, business logic on them and rendition thru JSP.
                                                    In web, login.jsp for user input- use struts tags.
                                                    for password make sure that text not visible so s:password.
                                                    In src- make action class corresponding. give same names as keys of form.
                                                            create getters/setters. apply equality check
                                                            return string for xml check to direct to corresponding jsp page.
                                                                    write a new package of different name and inside, action tag name= url and class it invokes.
                                            Best Practices
                                                    Let's not hardcode strings in the program- insert the constants/enumerators/(static/final) string member variables with that value.
                                                            Now, doing it for every class? We can use interface Action imported from com.opensymphony.wwork2 package.
                                                            this interface has all the string constants in there
                                                                    error,input- move back for input. Login redirection.
                                                                    and execute method throws Exception declared.
                                                    packages as many as namespaces- so divide xml- 1 within other.
                                                            create xml page under src and move a package there.
                                                            write include tag in original- <!--<include file="login.xml">-->
                                                    encapsulate you jsp's links with dummy actions
                                                            free to change jsp's later.
                                                            can hide the jsp page from the user- by using some alias (just like url name and servlets names kept different)	
                                            Uncat
                                                    Keep package names different
                                                    it is case sensitive- url doesn't mention .action extension
                                                    changes in JSP,code reflect but not xml- so need to restart for latter.
                                                    JSP can't fetch action member variables- if no getter/setter.
                                        </HowItsDone>
                                        <StrutsWorkFlow> Not Organized
                                            Configure web server running to receive the requests and respond.
                                                    ACT 
                                                    Choose this Run-time for execution
                                                            give the path of Tomcat version.
                                                    Eg- Apache
                                                            we right-click run- whole project gets deployed on Apache and is run to show us the outcome.
                                                                    The project run in a the subnet container (tomcat) and 
                                                            like IIS- we set up all files in there and it picks files and delivers for all requests.
                                                            see the url- localhost:8080 where tomcat is running and project name[, namespace] and then file.
                                            For the url first of all web.xml is searched
                                                    welcome tag used to get to the index.html to be delivered as default file.
                                                            error is thrown if requested url/file not found in web.xml
                                                    But we want to pass this request to struts framework
                                                            ACT add struts filter in web.xml
                                                                    executes before other tags thereby transfers control to struts framework
                                                            ACT Configure Struts Build path setting
                                                                    add user library to the project ->properties->Java Build Path->Add library->give a name (struts2)->see the list of imp ones->ok.
                                                                    include user library to the deployment- project->prop->Deployment Assembly->add->struts2.
                                                                            user library gets included in WEB-INF -> lib.
                                                            INTERCEPTORS- request object collects url and name-value parameters.
                                                                    Interceptors do that by writing into valuestack for corresponding action class' member variable's setters.
                                                                            update the service classes with if else statements.
                                                                            Just need to keep the names of components same as member variables (with getters/setters)- for both GET and POST.
                                                                                    We get the value of name-value pair (in querystring of url) assigned to that var
                                                                            with GET, .action extension is not required to be given			
                                                                    Struts2 first populates the member variables, then calls validate and then execute
                                                                            If flow is cut, it redirects to input result of action tab.
                                                                            And message is displayed on top of the component- if s:textfield,etc tags are used.
                                                                                    extending 1 class is much better than implementing many interfaces implemented by 1 class.

                                                            ROUTING- struts.xml referred by for routing requests			
                                                                    ACT src->new xml file.				
                                                                    Determines redirection for url requests
                                                                            map the url path to action class- in package tag we have action tag(name,extends)- path relative to current location.
                                                                                    NameSpace- when many pages of 1 type we want to club/group action mapping them- so nested url.
                                                                                            helps classify related url/actions thus organized url.
                                                                                            <!--<package namespace="/root">-->
                                                                                            for xml change we need to restart the server.
                                                                                            namespace for root, else previous url won't work.
                                                                                            http://server:port/webapp/namespace/action.action
                                                                                    execute() fn of specified action class gets called to execute
                                                                                            <!--<action name="name" class="tutorial.action">-->
                                                                            ACT action name wildcards- action name = "search*" for any url to searchForm.jsp
                                                                                    how to handle conflicts? searchform and search* are action names.
                                                                                    in the order of entry. and first match is picked.
                                                                                    search* to search{1}.jsp or {2} says replace the wildcard No {1} and then {2}nd.
                                                                                            multiple mappings with 1.
                                                                                    get* to class invoked {1}Action- tuturial or whatever.
                                                            ACTION src->new action class created in package
                                                                    is responsible to redirect the control as per request.
                                                                    calls business service to apply business Logic on the request and gets values for redirection/viewing.
                                                                    extend ActionSupport class and get validate method which can be overridden- used for validation after populating member variables.
                                                                            better than implementing all the interfaces it uses.
                                                                            execute method is invoked only after this.
                                                                            validation is a void method so returns nth. It can only display error message using _________ above the component with error.
                                                            Business Service- a class inside service package with focus on business rules and calling DAO (data access object) for DB connection.


                                                            ACTION
                                                                    ACT System.out.println writes on server console
                                                                    ACT to write on client- html needs to be sent but no servlet in here.				
                                                                            ACT There may be decision to forward to apt JSP thru returning code string to struts.xml like return "success"
                                                                                    if-else when many jsp to forward to? REL- if error, then error.jsp else success.jsp					
                                                                                    Action class return a code based on which 1 of the many JSPs gets called using xml
                                                                                            xml is configured to call apt JSP as per code returned by action class.
                                                                                            expressed thru <!--<result>--> tag (name)-value.
                                                                                    xml uses outcome of execute class to redirect and action class doesn't want to hardcode it.
                                                                                    ACT Let's not hardcode strings in the program- insert the constants/enumerators/(static/final) string member variables with that value.
                                                                                            Now, doing it for every class? 
                                                                                            use interface Action imported from com.opensymphony.wwork2 package.
                                                                                                    must have execute() fn of interface else error.
                                                                                                    this interface has all the string constants in there
                                                                                                            error,input- move back for input. Login redirection.
                                                                                            and execute method throws Exception declared.
                                                                                    ACT Validate using ActionSupport Class
                                                                                            Struts2 actions thru execute method- POJO, class has nth else.
                                                                                            Action Interface- in struts2 framework. must have execute() fn of interface else error.
                                                                                            3rd way is ActionSupport class- extend this class.

                                                                                            See the source code by ctrl+click and change attached source- place into into src of struts.
                                                                                            Methods in there
                                                                                                    Validate- userid,pwd not blank.
                                                                                                    override it in our action class. Values of member variables already there.
                                                                                                            if(StringUtils.isEmpty(getUserId())) do sth;
                                                                                                            can't return anything- return type is void- so can't go to error page.
                                                                                                                    but we have a method called addFieldError(field,Message) to display an error.
                                                                                                                    struts delivers the same page with error messages.				
                                                                            Struts2 first populates the member variables, then calls validate and then execute
                                                                                    If flow is cut, it redirects to input result of action tab.
                                                                                    And message is displayed on top of the component- if s:textfield,etc tags are used.
                                                                                    extending 1 class is much better than implementing many interfaces implemented by 1 class.

                                                                            ACT Print values in JSP from action.
                                                                                    What about Keeping string in session?- not a good idea- later.
                                                                                    ACT Make it a member variable- making it global to be accessible outta class and method in world.
                                                                                            JSP component values passed to valuestack- gets name-value from member variables of the called action class.					
                                                            Struts.xml				
                                                                    JSP component values passed from valuestack- gets name-value from member variables of the called action class.
                                                                    struts could have been programmed to pass control to specified JSP but what if names are changed
                                                                            ACT so we standardized place for updation- (XML)- have an additional column in xml
                                                                            redirect to jsp specified in result tag in the action tag.
                                                                    package many namespaces- so divide xml- 1 within other.
                                                                            create xml page under src and move a package there.
                                                                            write include tag in original- <!--<include file="login.xml">-->
                                                            web folder- JSPs inside web folder
                                                                    Struts refers to this folder to deliver the JSP's mentioned in result tag
                                                                    ACT Struts tags also used to print the value in JSP.
                                                                            add taglib tag before using struts tags- prefix "s"
                                                                            <!--<s:property--> to see member variables of corresponding action class.
                                                                                    value- the name whose value u wanna print.
                                                                                    make getter setters for them in action class.
                                                                    ACT Struts also support these tags and come quite handy. easy to link to actions.
                                                                            taglib prefix s tag. on top.
                                                                                    //of course, they will be converted into html for browser rendition.
                                                                                    //it automatically creates a table for alignment.
                                                                                    //prefer over html.
                                                                            <!--
                                                                            <s:form action = tutorial/gettutorial">
                                                                                    <s:textfield label="enter some value" key="Language"/>	//value to be populated to language member variable.
                                                                                                            //what is value property for general component tags in html
                                                                                                    //Label of the same key is automatically put.
                                                                                                    //override the label by 'label' property- 
                                                                                    <s:password -for password make sure that text not visible so s:password.				
                                                                                    <s:submit/>
                                                                            </s:form>
                                                                            -->
                                                                    encapsulate you jsp's links with dummy actions
                                                                            free to change jsp's later.
                                                                            can hide the jsp page from the user- by using some alias (just like url name and servlets names kept different)

                                                                    Configuring methods in Action mapping
                                                                            ACT how to replace execute method- add method property to the action tag and that method gets called.
                                                                            why would you want to do that? 1 unit of work can be done if only 1. 
                                                                                    addFavoriteTutorial, delete, CRUD, etc- 
                                                                                    handy to have methods for each of them and map them.
                                                                                    rather than having separate action class for all different url's thus created- 
                                                                                    let's use the same action class and many methods in there.
                                                                                    Restart the server. Use wildcards to map many methods at once.
                                                                                    <!--<action name="*" class = "TutorialACtion" method = {1}>	-->


                                            The valueStack
                                                    Struts1 would have behaved diffn to do prev thing.
                                                            Tomcat creates not instances of servlets but threads. Each thread addresses requests separately.
                                                                    In threads, make sure that servlets are 'thread safe'- any data/state- which multiple threads access.
                                                                    1 member variable by all threads.
                                                                    business services get different outcome outta different threads.
                                                            How to transfer data to JSP? have separate data space for threads.
                                                                    create request objects for every request. So, no race condition.
                                                                            don't use action class' member variables- shared!
                                                                    and session objects.
                                                                    what to store which object depends on nature- request just pass on and don't need- request object.
                                                                    but some data for the user session like userid- session object

                                                                    do push and pull of data- names of attributes and save in servlets.

                                                    Struts2 don't use new threads but new action objects for every request.
                                                            implications- we can have data as member variables as unique for every request.
                                                            How does JSP get that object? Thru value stack. Not stack DS we use- behaves like that though.
                                                                    used to save a lot of important objects. lot of components use it.
                                                                    struts2 frameworks saves action objects value in value stack.
                                                                    In JSP struct tag- which accesses the value stack and retrieves the value.
                                                                    valuestack behaves like virtual object- it eases way of access. object.member_variables
                                                                    valuestack behaves as an object itself and with all those attributes.
                                                                    okay! how are conflicts handled?  1st variable from top to down is picked up.


                                            Using model object- Move objects from Biz layer to service layer and so.
                                                    make an object to pass data to service class from action, not many many parameters.
                                                    create a model package and add User.java class there. and make a reference variable in Action class; of course, model class is imported.
                                                            loginService to do validation in service package.
                                                    make user object instantiated outside of execute method (not necessary)
                                                            How to Tell struts to write userId and pwd to user object members.
                                                            in jsp form- just update key property to user.
                                                            now no more populating of userId and userId in class will remain blank. so update the getters of user class.
                                                            initializing objects not reqd- Struts does that for us.
                                                    But now, in JSP input tags in form, we have to write user.* like [userId] for all components- use ModelDriven Interface.
                                                            add unimplimented method- getModel- to expose that object on valueStack- just return the object user.
                                                            add object initialization for user in our action class.
                                                            and you get same advantage as valueStack- you didn't have to tell classes.
                                                            refine by ModelDriver<!--<User>--> genre in java.


                                            The configuration of struts-default is inherited to default package configuration.
                                                    so that's what configures action tag of a name to action class and jsp.
                                                    it's in jar file in java resources- libs-struts2- core- .xml
                                                    abstract= true means this can't exist on its own.
                                                    interceptors and interceptor-stack there- this is where configuration is present
                                                    ACT we may want to override some of configuration.
                                                    3 concepts
                                                            cross cutting concerns
                                                                    say a consumer wants data from 3 diff modules.
                                                                    all 3 need some common functionality to go to its work.
                                                                    Normal design is isolate the cross-cutting concern and let them do their core.
                                                                            separate front module- like login- let it do its work.
                                                            Tomcat is servlet container- it's a container where we deploy our web app which uses jsp and struts.
                                                                    when writing apps for servlet container- there are components where you write your logic.
                                                                            servlet- for logic
                                                                            filter- for cross-cutting concerns
                                                                                    eg- logging- you want every servlet to lock a message- 
                                                                                    rather than writing locking code for all, 
                                                                                    you write locking code in filter and configure filter.
                                                                                    configure filter to do logging b4 servlet is called.

                                                                                    struts2 can put cross-cutting concerns in filter but not clean.
                                                                                            we write filter in web.xml- we had configured struts filter for all urls.
                                                                                            we have struts configured as filter.
                                                                                            so struts2 is cross-cutting concern- struts is actual framework.
                                                                                                    means you can make your own.
                                                                                                    use interceptors.
                                                                                                            1. configurable- we don't write code. plug and play- we just map.
                                                                                                            2. Java classes- for each interceptors- they do the work
                                                                                                            3. one or many interceptors for a request you can write.

                                                                                                            apply interceptors for an action class b4 exec thru <!--<interceptor-ref name=""/> -->tag.
                                                                                                                    can be a stack name or interceptor name- stack name has names of interceptors (declaration) whose class to be invoked in interceptor tags.
                                                                                                            <!--<default-interceptor-ref name="defaultStack"/>--> defaultStack is 1 that get invoked automatically.

                                                                                                            Interceptor eg- like I1 gets a timer for start and end of request thru pre and post lines of code.
                                                                                                                    or making logs!
                                                                                                            Interceptors don't hardcode which interceptor to call next.
                                                                                                                    "Action Invocation" is a separate object boss of eth- orchestrates eth- this guy looks at struts.xml
                                                                                                                            invoke method in there to looks into struts.xml all the time.
                                                                                                                            AI looks for a url- I1I2I3 invoked- so pass the control to I1.intercept(). Hey AI guy i am done with it- ai.invoke(); 
                                                                                                                            recursion it is. And how beautiful it is.
                                                                                                                    1 method intercept() in every interceptor. b4 post- it calls action invocation and pass the control.

                                                                                                    you better write interceptors than messing with filters.
                                                                                            filter intercepts every url- completely takes care of control.

                                        </StrutsWorkFlow>
                                        <Bootstrap>
                                            Incomplete
                                            Responsive to page size
                                                allows to use 1 base website to satisfy all the devices.
                                                Bootstrap is framework to make it responsive for every device.
                                                You have made a website- zoom-in/out and different screen size.
                                                getbootstrap.com/- your content looks good ew.
                                                Traffic from mobile- still use and we don't wanna lose them.
                                                readymade components to look good.
                                                Download Bootstrap(JS/CSS/FONTS)/Src (code of that)/sass (later)
                                                Bootstrap CDN- put codes into website.
                                                Install Bower (not now)- for LINUX distribution
                                                Download Sublime text- use any IDE that you like. Stick with stable versions and not beta versions/.
                                                Bootstrap- we have 3 folders in there.
                                                        to make sure that website loads faster.
                                                        we will learn a lot of html,css here also.
                                                        It's just CSS and JS files.
                                                        Use any IDE.
                                                Preferable to add other html b4 js.
                                        </Bootstrap>
                                        <WebServer></WebServer>
                                    </WebDevelopment>
                                    <Compiler></Compiler>
                                    <IDE>
                                        how to remove lines from eclipse java code
                                    </IDE>
                                </Frameworks>
                                <Misc>
                                    Excellent Resource for Java with codes
                                        http://www.cafeaulait.org/
                                        How browser must have been written
                                                https://www.javaworld.com/article/2076869/learn-java/drawing-text-is-easy-with-three-java-classes.html
                                                https://stackoverflow.com/questions/3742731/java-how-to-draw-constantly-changing-graphics
                                                Swings + Drawing in the window - how swings must have been implemented in terms of drawing (Libraries)
                                </Misc>
                            </BusinessLayer>
                            <DataLinkLayer></DataLinkLayer>
                        </WebDevp>
                        <WebServices>
                            online API from code
                                vs proper communication within computer- Any API you add jars/classes along class path- eth executes on 1 machine.
                                web services- codes are on different PC.
                                    exchanging data between applications (diffn platforms and PL) or systems 
                                    using collection of open protocols and standards => interoperability.
                                    over computer networks like internet (inter process comm)
                                eg- how to do post on the wall of a different system say facebook.
                                    vs web-sites- twitter and FB have devp web-services that other codes can call.
                                        consuming service, exposing service.
                                        twitter is a website- html pages with styles- human consumption so formatted nicely.
                                        also, http://api.twitter.com- not html but xml/ json format- bare bones (url's for operations)
                                        developer can parse it and consume it for their devp.

                            We can use
                                Soap- Simple Object Access Protocol
                                    messages in xml format- rules.
                                    Service definition by WSDL- details of API- args, return types, etc.
                                        client has all about it.
                                <SOAP>
                                    SOAP and REST
                                    JAX-WS and JAX-RS
                                    Web service made available on internet
                                    web site for human vs core consumption
                                    getProducts() applied to App Server - Web App 
                                            vs Developer wants his web app to use your method
                                            give jar file and deploy on his server - might not work cuz 
                                                    DB is not there
                                                    versions not updated
                                            direct call would be best - 2 apps to talk with each other
                                                    they can call others' methods over the network
                                            Interoperability - JAVA can call DOTNET and vv.
                                                    do what a PL does best
                                    Jargon
                                            Impl to be shared - consumer class accesses thru interface (standard)
                                            Web Service to be shared with consumer external to system
                                                    XML - WSDL (Web Service Description Language) - this is shared with consumers
                                                            Technology Independent - don't know technology - java, dotnet, cpp, etc
                                                            Format understood by all - XML
                                                            contains methods/operations, args, returns.
                                            Client App
                                                    UDDI - Universal Description Discovery Integration
                                                            Register this directory and query
                                                            to catch wsdl
                                                    Java code - a string to be sent to web site as per wsdl
                                                            xml to send the data - serialize not understood by cpp
                                                            protocol called soap for communication
                                                            simple object access protocol
                                                            Java object to xml conversion done by SEI (Service Endpoint Interface)
                                                            This is an interface at your machine representing other party
                                                            Generate SEI for your app
                                                                    CPP has SEI for itself which knows how to convert to SOAP for WS
                                    Handson
                                            Client to consume
                                            free online
                                            geoIPService - give ip and get country
                                            Hello world for it - open wsdl - don't worry - parse tools to read
                                                    note service and port
                                                    New Java Project - IPFinder
                                                    Java class - IPLocationFinder and package
                                                    main method
                                                            String ipAddress = args[0]
                                                            service.getCountryName(ipAddress);
                                                            //java provide tools to generate sei for us - stub will take care of it
                                                            mkdir sei
                                                            cd sei
                                                            wsimport (if you have java se)
                                                                    url is where we obtained wsdl from
                                                            wsimport (url) - it generates compiled code for us
                                                                    find all the class files made under the current folder
                                                            wsimport -keep -s src (url)
                                                                    find all the stubs created we will use
                                    Calling the service
                                            create a package - net.webservicex (default download)
                                                    drive all files into the package
                                            which class is the stub we will use
                                                    Service and Port tags in WSDL - GeoIPService and GeoIPServiceSoap
                                                    Let's do it
                                                    GeoIPService ipService = new GeoIPService();
                                                    GeoIPServiceSoap geoIPServiceSoap = ipService.getGeoIPServiceSoap();
                                                    GeoIP geoIP = geoIPServiceSoap.getGeoIP(ipAddress);
                                                    sysout(geoIP.getCountryName);
                                            Add arguments thru run configurations - use google's ip
                                            use documentation else wsdl
                                    Setting up Java EE SDK
                                            java -version
                                            echo $JAVA_HOME
                                            Oracle.com / Java downloads / SDK 7
                                            If linux, make it executable - cuz it is not by default
                                            start installer - shell file
                                            glassfish server - let it be installed
                                                    port was 4848 - glassfish admin console to deploy our web apps
                                                    ./asadmin start-domain and ./asadmin stop-domain

                                </SOAP>
                                <REST>
                                    What- 
                                RESTful web services
                                    by Roy Fielding (1 of the authors of HTTP specification) in 2000.
                                    Implementation by JAX-RS
                                        greatly popular these days.
                                        characteristics
                                            Light weight, highly scalable, maintainable.
                                        prereq- HTML, CSS, AJAX, Java, etc.
                                        REpresentational State Transfer
                                            REST Server simply provides access to resources 
                                            REST client accesses and presents the resources
                                    Why- 
                                    web services based on REST architecture (for web service design)
                                    How- 
                                        <ExposingAWebService></ExposingAWebService>
                                        <ConsumingAWebService>
                                            Using Browsers- Standard Ones allow GET
                                                vs Postman allows us to interpret the fields of request.
                                            Using Code-
                                        </ConsumingAWebService>
                                        <Protocol>
                                            uses HTTP Protocol for data communication 
                                                hypertext/ links- structured form of text that contains links to other text- links called hyperlinks.
                                                    written in a language called HTML.
                                                    not for human consumption- eg- weather info- in json- weather:15C; ...
                                                        Resource based URI (show sth))vs action based URI- do sth.
                                                        Eg- weatherapp.com/loopup.do?zip=12345 vs weatherapp.com/zipcode/12345
                                                        Eg- weatherapp.com/countries/brazil
                                            Client- 
                                                Use POSTMAN app to see these things in detail.
                                                    http://www.getpostman.com/- chrome extension.
                                                application can parse data and format for human consumption.
                                            Server- can use JAX-RS to implement.
                                                every component is a resource (identified by URI)
                                                    represented by text, JSON, XML.
                                                        REST puts no restriction- responsibility of the REST server to pass the client the resource in the format that client understands.
                                                            Understanding- Both server and client should understand it.
                                                            Completeness- simple as well as complex structures of resources
                                                            Linkability- a resource can have a link to another resource.
                                                    every content as a resource - text files, html pages, images, videos or dynamic business data
                                                        Similar to object in OOPL and entity in DBMS.
                                            Exchanges- xml, json, text- no rules as long as mutual understanding.
                                                http exchanges- can use get, put, etc- use anyone.
                                                service definition- call library class- method, args (know about jar- service defn)
                                                    web listing web services- but little to no documentation- but don't need.
                                                    WADL- equivalent of WSDL but didn't catch on. SOAP web specification- designed and maintained by comittee- don't follow? it's not SOAP.
                                                    REST has no comittee.
                                                        has a set of criteria and constraints. Guidelines- not Restful, not fully restful, completely restful.

                                            <HTTPRequest>
                                                <Verb>
                                                Verb- HTTP Methods- to interact with URL- identifies the operation to be performed on the resource (server)
                                                    PUT- create a new resource
                                                            /UserService/users/1- insert user with id 1.
                                                            it's idempotent- same result all the time.
                                                    POST- Update existing resource (or create)
                                                            /UserService/users/1- update user with id 1.
                                                            POST multiple times may cause different results.
                                                    GET- read only access to a resource
                                                            URI- /UserService/users- get list of users.
                                                            /UserService/users/1- get user with id 1.
                                                    DELETE- Remove resource
                                                            /UserService/users/1- delete user with id 1.
                                                            it's idempotent.
                                                    OPTIONS- get supported operations on resource.
                                                            /UserService/users- list of operations supported by this URI.
                                                </Verb>
                                                <URI>
                                                URI (uniform resource identifier)- to identify a resource on server
                                                    @Locate a postal address of a person.
                                                    protocol://service-name/ResourceType/ResourceId
                                                        Eg- http://localhost:8080/UserManagement/rest/UserService/users and VERB is GET. 
                                                        use plural resource nouns (users)
                                                        Use underscore(_) or hyphen(-), no space
                                                                Eg- use authorized_users instead of authorized%20users
                                                        use lowercase letters (though URI is case-insensitive)
                                                        Maintain backward compatibility- redirect URI if updated (it's public)
                                                        Use HTTP verb- don't use operation names in URI.
                                                            !Eg- http://localhost:8080/UserManagement/rest/UserService/getUser/1
                                                </URI>
                                                Following are metadata- helps operations.
                                                <HTTPVersion>
                                                HTTP Version- Eg- HTTP v1.1
                                                </HTTPVersion>
                                                <RequestHeader>
                                                Request Header- metadata as key-value pairs
                                                        client (browser) type
                                                        formats supported by client
                                                        format of message body, cache settings, etc.
                                                </RequestHeader>
                                                <RequestBody>
                                                        Message content or Resource representation.
                                                </RequestBody>
                                            </HTTPRequest>
                                            <HTTPResponse>
                                                HTTP Response- 4 major parts
                                                        Status/ Response Code- Server status for the request[ed resource]?.
                                                                404- resource not found
                                                                500- server error
                                                                200- response is ok
                                                                Why code? not html so error page here.
                                                        HTTP Version- eg- HTTP v1.1
                                                        Response Header- metadata as key-value pairs.
                                                                Content Length
                                                                Content type- text/xml; application/json- so as to parse accordingly.
                                                                    content negotiation- I prefer json- server will give that.
                                                                Response date, server type, etc.
                                                        Response Body- resource representation or message content.
                                            </HTTPResponse>
                                        </Protocol>
                                        <EnvironmentSetup>
                                            <JerseyFramework>
                                                Jersey framework to create RESTful web services (RWS)
                                                        implements JAX-RS 2.0 API- std specification to create RWS.
                                                                set PATH=C:\jdk1.7.0_75\bin;%PATH%	//concatenates new string to path.
                                                                set JAVA_HOME=C:\jdk1.7.0_75
                                                                On Unix based
                                                                        setenv PATH /usr/local/jdk1.7.0_75/bin:$PATH
                                                                        setenv JAVA_HOME /usr/local/jdk1.7.0_75
                                                                OR computer settings.
                                                                OR IDE- run a simple program to confirm that the IDE knows where you installed Java
                                                        install IDE- Eclipse
                                                                run on windows- %C:\eclipse\eclipse.exe
                                                                run on unix like- $/usr/local/eclipse/eclipse
                                                        set up Jersey Framework Libraries
                                                                download .zip file for your OS choice.
                                                                Jersey framework binaries from https://jersey.java.net/download.html
                                                                unzip the file to find folder structures.
                                                                        all the Jersey libraries in the directories C:\jaxrs-ri-2.17\jaxrs-ri\lib
                                                                        dependencies in C:\jaxrs-ri-2.17\jaxrs-ri\ext
                                                                        set your CLASSPATH variable on this directory properly
                                                                                OR using Eclipse then it is not required to set CLASSPATH because all the setting will be done through Eclipse
                                            </JerseyFramework>
                                            <ApacheTomcat>
                                                Setup Apache Tomcat
                                                        download the latest version of Tomcat from http://tomcat.apache.org/
                                                        unpack the binary distribution into a convenient location
                                                                Eg- C:\apache-tomcat-7.0.59 on windows, or /usr/local/apache-tomcat-7.0.59 on Linux
                                                        set CATALINA_HOME environment variable pointing to the installation locations
                                                        Starting Server
                                                                Tomcat can be started by executing the following commands on windows
                                                                        %CATALINA_HOME%\bin\startup.bat OR  C:\apache-tomcat-7.0.59\bin\startup.bat
                                                                        or double click the .bat
                                                                On Linux
                                                                        $CATALINA_HOME/bin/startup.sh OR /usr/local/apache-tomcat-7.0.59/bin/startup.sh
                                                        the default web applications included with Tomcat will be available by visiting http://localhost:8080/
                                                        To Stop Tomcat
                                                                %CATALINA_HOME%\bin\shutdown OR C:\apache-tomcat-7.0.59\bin\shutdown
                                                                LINUX- $CATALINA_HOME/bin/shutdown.sh OR /usr/local/apache-tomcat-7.0.59/bin/shutdown.sh
                                            </ApacheTomcat>
                                        </EnvironmentSetup>
                                                        New Project-> Dynamic Web Project -> Add all jar in lib,ext,api to WEB-INF->lib.
                                                                Project -> [properties -> Java Build Path / -> create a build path -> config] -> Libraries -> Add jars -> from WEB-INF->lib.
                                                                Create package (com.tutorialspoint) -> add files (User.java, UserDao.java, UserService.java)
                                                                add web.xml code to redirect thru jersey.
                                                                export your application as a war file and deploy the same in tomcat
                                                                        File -> export -> Web > War File -> [WebProject] (UserManagement) and destination folder
                                                                        place the UserManagement.war in Tomcat Installation Directory - webapps directory -> start the Tomcat.
                                                                DAO
                                                                        PrintWriter writer = new PrintWriter("the-file-name.txt", "UTF-8");
                                                                        writer.println("The first line");
                                                                        writer.println("The second line");
                                                                        writer.close();
                                                                        OR
                                                                        byte data[] = 
                                                                        FileOutputStream out = new FileOutputStream("the-file-name");
                                                                        out.write(data);
                                                                        out.close();
                                                                        OR
                                                                        BufferedReader br = new BufferedReader(new FileReader("file.txt"));
                                                                        try {
                                                                            StringBuilder sb = new StringBuilder();
                                                                            String line = br.readLine();

                                                                            while (line != null) {
                                                                                sb.append(line);
                                                                                sb.append(System.lineSeparator());
                                                                                line = br.readLine();
                                                                            }
                                                                            String everything = sb.toString();
                                                                        } finally {
                                                                            br.close();
                                                                        }
                                                                        OR
                                                                        FileInputStream inputStream = new FileInputStream("foo.txt");
                                                                        try {
                                                                            String everything = IOUtils.toString(inputStream);
                                                                        } finally {
                                                                            inputStream.close();
                                                                        }
                                                                        OR
                                                                        Scanner in = new Scanner(new FileReader("filename.txt"));
                                    <JavaBrains>
                                        <Architecture>
                                        understanding architecture is more important than implementation.
                                                post messages
                                                comment on messages
                                                like and share messages.
                                                user profiles
                                                Tables- user, message, comment, like, share; U<-M, M<-C,L,S, C->U.
                                                        so comment mentions messageId; comment mentions userId (of 1 commenting on whom? thru messages to user table)
                                        </Architecture>
                                        <URI>
                                        URI- User doesn't have to remember- links traverse from home page.
                                                here we must. so common uri for all- else prob comes.
                                                best practices
                                                URI uniquely identifies a web page on website.
                                                imagine facebook was static profile pages- you would create 4 html pages- I would put pages under profile folder
                                                        uri would be /profiles/[profileName]?
                                            <InstanceURI>
                                            Instance resource uri- of type- /profiles/[name]
                                                to post write - /messages/1- these are nouns and not verbs- not doing but fetching.
                                                        using plurals (cuz many)
                                                Q- comment 20? comments/20 vs /messages/1/comments/20 (relationship is acknowledged in 2nd)
                                                        comments belongs to messages resource. But may want to use comment/20 also if it's obvious.
                                                        /messages/[id]/likes/[likeId], share also.
                                                        Many to many later.
                                                        But why not /profiles/[name]/messages/[id]
                                                                kept separate bcuz not tightly coupled.
                                                                we want client to be able to say that bring me this message- independent of who posted it.
                                            </InstanceURI>
                                            <CollectionURI>
                                                collection uri- access /messages to access list of all comments corresponding that message
                                                        subresource- comments.
                                                        Eg- /messages/2/comments.
                                                        if /comments- you can get all comments- but I want specific to messages (trade-off!)
                                            </CollectionURI>
                                            <QueryParameteres>
                                                    Pagination
                                                    /messages is huge
                                                            filters thru pagination
                                                                    /messages?offset=30&limit=10- start from 30 and 10 records.
                                                    on date- /messages?year=2014
                                                            /messages?year=2014&offset=30&limit=3
                                            </QueryParameteres>
                                        </URI>
                                        <HTTPMethods>
                                                / get Messeges .do?id = 10 vs / messages / 10- both contain 10 and message resource but getting is not stated.
                                                what about posting? /postMessage.do?id=10 or /deleteMessage.do?id=10
                                                        using http methods /messages/10 will mean different things.
                                                        intrinsic in web world- get webpage fetch and post on submitting a form.
                                                        so get request for /products/10 resource and delete request for /orders/1 resource and not telling to do.
                                                put request to /messages/20 to replace
                                                delete request to /messages/10
                                                post request to /messages- id client doesn't know in advance.
                                                        post request to /messages/10/comments
                                                archive message or server side job- CRUD not sufficient.

                                        Idempotence
                                                put to update and post to create new resource (lot of contradiction on web)
                                                get- read only
                                                put,post, delete- write methods.
                                                another way to classify
                                                        get changes nth on server- make multiple request- it's safe
                                                        put, post, delete
                                                                Eg- count =100; count =100; ....- count in the end will still be same.
                                                        delete /message/10 repeated- it will fail- resource doesn't exist so safe.
                                                        put- replacing- final message will be same.
                                                        post- not replaceable. create a new resource- not safe.
                                                                not idempotent- other were.
                                                caching GET responses is possible but not post.
                                                Browser refresh just makes a new request- non-idempotent request- browser warns you on say submitting a form!- protection
                                            </HTTPMethods>
                                        REST response
                                                html webpage in web
                                                no formatting- only xml/json (json is compact is gaining popularity)
                                                        javascript client can convert it into objects.
                                                Different representations of a common resource (these representations are being transfered so representational state transfer(REST))
                                                Eg- 
                                                {
                                                "id":"10",
                                                "message":"hello world",
                                                "created":"2014-06-01"
                                                }
                                                <messageEntity>
                                                        <id>10</id>
                                                        <message>Hello world</message>
                                                        <created>2014-06-01</created>
                                                </messageEntity>
                                        <StatusCodes>
                                        Client doesn't know in advance and server may not have representation for xml if client asks for it.
                                                Using HTTP headers
                                                        metadata of message- length, date, content-type
                                                        content-type:json, xml
                                                status code- 
                                                        in web, error pages not possible here
                                                        consumer is not human- so other mechanism to let client know or identify- what error scenario it is
                                                        first line is status code and what it means.
                                                        eg- 200 OK; 404 NOT FOUND; 
                                                        not all numbers are valid so 400 to remember, nay.
                                                        1XX- informational code (ACK)
                                                        2XX- success codes; 
                                                                201- created (resouce)- POST Success
                                                                200-ok, 
                                                                204- no content (deleted. nth to bring back)
                                                        3XX- redirection codes- server asks client to send request somewhere else.
                                                                302 Found, 
                                                                307 Temporary Redirect
                                                                304 Not Modified (I sent resouce little while back)
                                                        4XX- Client Error
                                                                error in request- not supposed to see
                                                                400- bad request (wrong format/data)
                                                                401- unauthorized
                                                                403- Forbidden
                                                                404- Not Found
                                                                415- Unsupported Media Type (language or format that server doesn't understand)
                                                        5XX- Server error
                                                                I got your request but sth went wrong on processing
                                                                500- Internal server error (generic one)
                                        </StatusCodes>
                                        <HATEOAS>
                                        HATEOAS- 
                                                What?
                                                    Acronym- Hypermedia As The Engine of Application State
                                                    No Service Defn- no documentation.
                                                    Best restful don't even need.
                                                        REL Ever needed documentation to visit a website or help guide- navigation thru links
                                                Why? Get Request from client- I can also send links along with response.
                                                    so along with message- I am throwing comments uri, likesUri, shareUri link in case you want.
                                                    thus, uri not to be memorized- hypermedia or hypertext- becomes the engine of app state.
                                                How?
                                                Put request after get request/ messages- we can add- href for every message so that put will be easy.
                                                "href":"/messages/1"- no construction of resource reqd from get request result.
                                                        remember href in html.
                                                        of itself.
                                                context of message- /profiles/koushik, /messages/1/shares,...
                                                        but messy- lot of property names to remember.
                                                                "likes-href":"/messages/1/likes",...
                                                        use rel attribute- to inform relp betw current and linked doc.
                                                                eg- stylesheet.
                                                        so-
                                                                "links":[
                                                                        {
                                                                                "href":"/messages/1",
                                                                                "rel":"self"
                                                                        },
                                                                        {
                                                                                "href":"/messages/1/comments",
                                                                                "rel":"comments"
                                                                        }
                                                                        ]
                                        </HATEOAS>
                                        <RichardsonMaturityModel>
                                        How much restful it is?
                                                Level 0- Not restful at all.
                                                        SOAP web service- URI receives all requests from client
                                                        serverName/messenger- operations CRUD thru message body request body.
                                                        Eg- HTTP method- use any doesn't matter.
                                                                <delete-comment>
                                                                        <messageId>30</messageId>
                                                                        <commentId>2</commentId>
                                                                </delete-comment>
                                                        Mthodology called swamp of POX (plain old XML)- eth in xml.
                                                Level 1- Bring Resource URI- for messages, comments- resources.
                                                Level 2- Introduce HTTP methods (GET, POST, PUT, Delete), status code (idempotent rules mindful)
                                                Level 3- HATEOAS (responses have links that client can use)
                                                Helpful in designing an API- where we stand and make it better.
                                                        guideline to devp and learn and not scorecard
                                        </RichardsonMaturityModel>
                                        What is JAX RS
                                                Good designs for REST API were studied.
                                                B4 coding and using JAX RS, what is JAX RS
                                                        several restful libraries to write them- resteasy, jersey
                                                        if learn 1 of them, then you learn them all- implement a common API (JAX RS)
                                                                remove 1 and plug other- it will seamlessly work.
                                                Bunch of interfaces and annotations (javax.ws.rs.*)
                                                        no functionality and libraries- Jersey and RESTEasy do the rest of the work.
                                                        when we include jersey- we automatically include the JAX RS data.
                                                                the interfaces will invoke the library implementation.
                                                        why jersey- it's reference implementation- model implementation- designed by specification setters.
                                        Setting up
                                                can download jersey but simpler with maven- used for java project management
                                                        dependencies, lifecycle.
                                                        if enterprise app, you must know maven.
                                                new project -> maven [-> Add Archetype -> org.glassfish.jersey.archetypes (group id); jersey-quickstart-webapp (artifact id); version- 2.16 (changeable); blank url -> Ok]? -> search "jersey" (jersey quickstart webapp) -> Next
                                                        GroupId (package name)- org.koushik.javabrains; Artifact Id: messenger (project name)- defaults -> Finish.
                                                        maven will download all the jar files b4 start- you get errors that javax.servlet.http.httpServlet was not found (cuz the library is missing) but don't worry cuz the library is included in tomcat.
                                                [add Server view]? -> add server -> Tomcat 7/8 -> select path to tomcat folder.
                                                        JRE is ok.
                                                        run it.
                                                        you see simple page showing up- Link jersey resource- got it!
                                                                I was making a rest request and "got it" was response.
                                                                what are we celebrating?
                                                                        look at url- localhost:8080 is your url. messenger is application context.
                                                                        webapi/myresource- configured to accept requests on /webapi (it's choice of creators), myresource is a resource (message, comment, etc)
                                                                        we did a get request here and index.jsp was loaded.
                                                                filtering to jersey framework happens in web.xml
                                                                        servlet and servlet-mapping tags are used inside web-app tag.
                                                                        jersey looks at your code and decides what to do
                                        Application Structure
                                        Creating a Resource
                                                on uri webapi/profiles/koushik- I will tell what to do.
                                                we will create a messages resource
                                                make a new java class- messageResource.java
                                                Make a method which will return response to jersey to send to client.
                                                        string getMessages(){ return "Hi";}
                                                        jersey expects package names to look up (param-name in servlet filter)
                                                        map uri to class
                                                                we use annotations on class and method to tell where to look up.
                                                                @Path("/messages")	//class is a resource, import packages
                                                        map http method to class method
                                                                @GET on method.
                                                                @POST on another method.
                                                                what format to return it?
                                                                        @Produces(MediaType.TEXT_PLAIN)
                                                enter uri- localhost:8080/messenger/webapi/messages and get the method run.
                                        How to return a list of objects (list)
                                        OR returning XML response
                                                Data Link Layer- thru JDBC, hibernate, etc- here, we stub it.
                                                Make a message class with attribs in model package under main package.
                                                make a messageService class in service package with method to return a list.
                                                on message class, add @XmlRootElement annotation to hint to use JAXB to make xml from class and attribs.
                                                        don't forget to include empty default constructor else no outcome for you!!
                                        Installing REST API client
                                                in browser we can use GET methods
                                                put, delete methods? we want more control
                                                many clients- easy to get started with are plugin- postman (go to webstore of chrome and get it- install button, launch button)
                                                        if a web page- the page is returned vs browser.
                                                we can choose thru dropdown the http method on uri.
                                                URI params- key value pair on uri
                                                header-value pairs are metadata
                                                        for post, we can use format as raw (or other) and send sth to server.
                                        Building Service Stubs
                                                Messenger Service is hardcoded- to CRUD and without DB- we will use file storage.
                                                Or using hashmap- get, put, etc.
                                        Accessing Path Params
                                                methods annotation- with fixed string or variable to map from URI (eg- get messageId)
                                                        using curly braces.
                                                does typecast seamlessly
                                                in a url we can take more than 1 as variables - eg= sth/{id1}/name/{id2}
                                                        pathparams for them separately.
                                                regex are allowed- name*, etc.
                                        Returning JSON response
                                                why xml was chosen- it is automatic conversion for xml thru JASB but not for json.
                                                server error without that- see in console.
                                                in pom.xml- remove dependency for jersey-media-moxy.
                                                annotate with Application_JSON
                                        Post method
                                                make sure all files are saved b4 execution
                                                freely add annotations and method- don't have to restart server over these.
                                                in request header- add content-type to application/json
                                                Here is reverse json input from client is to converted to object
                                                        use @consumes
                                                        use class method straight away.
                                                Put and Post are interchangeable- mean nothing in themselves.
                                        Update
                                                use put- message id will be picked from uri using pathparams and message object from message body
                                                all requests to rest server are isolated and hashmap can't handle such discrete requests in continuum- no memory of last transaction.
                                                you can move all @consumes and @Produces to the class- if common for all.
                                                Hashmap contents are lost as soon as there is any change in code of class containing the static hashmaps or messageService, etc.
                                                        recompilation or process making- spoils eth maybe.
                                        Profile nuances
                                                change hashmap to string, profile- search by name.
                                        Filtering and Pagination
                                                Filter messages- by year./messages?year=2015
                                                pagination- /messages?start=10&size=5
                                                can't have many methods for them for different queryparams
                                                        so use @Queryparam annotation to get hold of params and then use selection criteria on them.
                                                        value is 0- if query param with specified name is not passed.
                                                        start is 0 based.
                                                add methods to MessageService.
                                        The Param Annotations
                                                when making a new class- we need to restart the server- eg= injectdemoresource.java
                                                using ;param=value
                                                using @MatrixParam("param")String matrixparam
                                                we can send header values- useful in authentication and security
                                                        metadata for authentication, etc
                                        Context and BeanParam annotations
                                                bunch of annotations don't look good.
                                                you must know what cookie name is. what headerparam name is.
                                                @Context @UriInfo- true to its name contains uri info- getBase, absolute path, segment uri, query params in map form, path params- map- go thru.
                                        Implementing Subresources
                                                /messages/1/comments/2
                                                can use @Path(@Path("/{messageId}/comments")		//but not desireable cuz mess of other cascades)
                                                hook responsibility / handover to another resource
                                                remove GET, cuz applicable for all methods.
                                                return new CommentResource()- it will look into that resource for return.
                                                @XmlTransient- to not send comments map in json returned to client.
                                        Sending Status Codes and Location Headers
                                        Handling Exceptions
                                                we just handles all happy path scenarios- error- inform it nicely.
                                                now we want to map excpetion to a response (previously till now- uri to response)
                                                        map these fields to response when this excpetion happens.
                                                stop at framework- b4 tomcat gets it.
                                                @Provider
                                                        //registers this class in JAX RS (similar to declaring class in xml.)
                                                gotta restart server.
                                        Content Negotiation
                                                Send me json- I don't know- error message.
                                                why so? why not all- using different methods if xml is asked or json is asked.
                                                To send to server- Content_type but for consuming from server- accept header.
                                                        should match with @consumes and @produces respectively.


                                    </JavaBrains>
                                    <facebookAPI>
                                        google- facebook javascript sdk -> developers.facebook.com/docs/javascript/quickstart
                                        -> Register Now -> authenticate with phone number
                                        Basic Setup->Form filling- Display Name- applicationName; education; etc.
                                                appId is generated for the appName.
                                                settings-> site URL- http://localhost.com, app domains- localhost.com
                                                add this code below init function
                                                FB.getLoginStatus(function(response){
                                                        if(response.status == 'connected'){
                                                                document.getElementId('status').innerHTML = 'We are connected';
                                                        } else if(response.status == 'not_authorized'){
                                                                document.getElementId('status').innerHTML = 'Not Logged in';
                                                        } else{
                                                                document.getElementId('status').innerHTML = 'Not Logged into Facebook';
                                                        }
                                                });	//associate this with div id = "status"
                                                add this code b4 script end tag
                                                function login(){
                                                        FB.login(function(response){
                                                                if(response.status == 'connected'){
                                                                        document.getElementId('status').innerHTML = 'We are connected';
                                                                } else if(response.status == 'not_authorized'){
                                                                        document.getElementId('status').innerHTML = 'Not Logged in';
                                                                } else{
                                                                        document.getElementId('status').innerHTML = 'Not Logged into Facebook';
                                                                }
                                                        });
                                                }	//associate this with a button click.

                                    </facebookAPI>

                                                                    <RESTMaking>
                                                                    new dynamic web project
                                                                    write start index web pages in web.xml in WEB-INF- ensure that tomcat detects start page.
                                                                            add a link to restful page from the index page.
                                                                            add the redirect tags to web.xml
                                                                                    <servlet>
                                                                                            <servlet-name>Jersey RESTful Application</servlet-name>
                                                                                            <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
                                                                                            <init-param>
                                                                                              <param-name>jersey.config.server.provider.packages</param-name>
                                                                                              <param-value>com.saurabh</param-value>
                                                                                            </init-param>
                                                                                      </servlet>
                                                                                      <servlet-mapping>
                                                                                            <servlet-name>Jersey RESTful Application</servlet-name>
                                                                                            <url-pattern>/rest/*</url-pattern>
                                                                                      </servlet-mapping>
                                                                                    Download the relevant mvn dependencies- search for servlet-class for pom.xml dependency (convert project to maven if not done yet)
                                                                                    Also download maven dependencies for javax.ws.rs.*- for annotations like @GET, etc
                                                                            In the package, as per servlet tag- add the service class
                                                                                    Give class a @Path tag.
                                                                                    Make a method for entry gate into rest- which would look like follows:
                                                                                            @GET
                                                                                            @Produces(MediaType.TEXT_PLAIN)
                                                                                            public String hello(){
                                                                                                    return "Hi HATEOAS\n Use http://localhost:8080/Restful/rest/results/tools?tool=Drill&query=12 \n OR http://localhost:8080/Restful/rest/results/hive";
                                                                                            }
                                                                                            Confirm that with class annotation you can read the string.
                                                                                    Give methods- tags
                                                                                            @Get
                                                                                            @Path("/tools")
                                                                                                    @Path("/{toolName}")- with corresponding @PathParam("toolName") String toolName in method signature
                                                                                                    @QueryParam("tool") String tool- for reading tool=12 kinda querystring in url.
                                                                                            @Produces(MediaType.APPLICATION_XML)
                                                                                                    Corresponding return List < Class >- make the list and return it
                                                                                                            Serialize- but how to serialize the class for xml to be returned?
                                                                                                                    @XmlRootElement(name="query") to the class- name value matches with what we intend to return (can be different from classname)
                                                                                                                            Name of root tag is taken from class name's plural of list to be returned.
                                                                                                                    implements Serializable for the class
                                                                                                                    An empty constructor- absolutely must!
                                                                                                                    @XmlElement for setters methods (optional)
                                                                                                            also make a toString() for checking purposes.
                                                                    </RESTMaking>
                                </REST>
                        </WebServices>
                </ChoosingTechnology>
            </ProtocolSetting>
            <OBIP>
                <FromOOAD>
                Learn reqd technology- strong grip->confidense that I can make any system given its specification.
                        have a hierarchical structure of teams- 8 teams with their leads and central coordinator.
                        Sir is at top- client and PM who doesn't know technology.
                        In IT, friends count!
                                First self study.
                                Equals
                                        7 helps you gets strong friendship
                                        always say YES for help
                                                may be forward- I will get someone to explain it.
                                                may be inform in pieces, not 100% correct but don't deny.
                                                        sth is better than nothing.
                                        My knowledge should not stick with me- should flourish.
                                                If you have knowledge, share thru presentation
                                                        you learn and help learn.
                                                gotta interact with clients- helps in that.
                                Seniors- If equals don't know, tell them
                                        Senior informed that equals don't know and not part of self study- else he may ask to refer doc.
                                        No redundancy
                                                If heard once, don't have to ask it again.
                                        May have KSM (Knowledge Share Meetings even with equals to benefit all).
                                        Ask seniors/lecturere for help and guidance
                                                but it is our decision, (reasonable and informed one)
                                                learning is my responsibility- no1 else's- others just assist to their capability
                                gotta master technology, now or later- have a streak and finish it off!
                Principles to remember thru the process
                        Must be scalable- eg- place for ads- afterall, money makes mare go.
                                system that can't modify is useless- consider this while chooseing tools also.
                        Express concerns don't act on them
                                "I can make a system without struts"- Response should be- Why should they use? not- I don't need it!
                        Deadlines don't extend generally- else client anoid/lost. office pays cuz clients there.
                                When many stakeholders and company reputation- milestone be achieved by hook or crook
                                        work OT- overtime, depending on what's left- even 24 hrs 3 day streak!
                                        Divide milestone into smaller timelines and gotta achieve them anyway.
                        Manager can explain his situation- big picture to convince his stand.
                        Getting Started
                                have the full specification of system
                                Before starting the job, standardize the technology.
                                        else can't integrate on 1 platform.
                                        Version also to be considered.
                                                Make sure it is stable.
                        ASK
                </FromOOAD>
                <TimeManagement></TimeManagement>
                <CostManagement></CostManagement>
            </OBIP>
        </BusinessModel>
        <RequirementsGathering> aka functional specification
            Requirements- how customer should see the final product (look & feel (statecharts), description (usecase))
                scope is decided. (Systems Analyst)
                ?How the end product should look.
                <FunctionalRequirements>
                    aka capabilities or features
                        Eg- login is a feature not a use case (user is not there for that!!)
                        Eg- add to kart is a feature not a usecase (buying is a usecase)
                    describe the functions that the software is to execute
                        make sure "this" is really what user wants- else wasted MTE.
                            Understand
                                Gathering
                                    aka Requirement elicitation
                                    Activites
                                        Discussion with cust (say Amazon web site) and end users (maybe Amazon website users)
                                            Interview- get feel of how work is done manually (b4 automation)
                                                demands good interaction skills.
                                                Answer following-
                                                    Problem with current system
                                                    Why you want us to do it? What other solutions?
                                                    What challenges might arise?
                                            collect data pertaining to product
                                                input and output formats
                                        Feasibility thought on basis of 
                                            Takes imagination and creativity in absence of working system.
                                            observing existing systems (requires experience)
                                            studying existing procedures (what's doable)
                                Analysis
                                    Remove Inconsistencies- point a contradicts with b.
                                        Eg- when temperature > 100, 1 cust says water shower be turned on, other says cooler.
                                    Remove anomalies/ ambiguity- what exactly you want is not clear.
                                    Remove Incompleteness- omitted due to oversight.
                                        Eg- what to do if temperature falls below 90C- heater On? shower off?
                                    Task Analysis
                                    Scenario Analysis
                                    Form Analysis
                            Document/ Specification- 
                                Focuses on what needs to be done (not how)
                                    concise well-structured
                                        not narrative essay- scope of following not met.
                                    easy to change
                                    consistent, complete, non-ambiguous
                                        Noise- Presence of text containing information irrelevant to the problem.
                                        Silence- Incomplete- aspects important to proper solution of the problem are omitted.
                                        Over-specification- addressing "how to" aspects (restricts solution space for designer)
                                        Contradictions- Inconsistency- even redundancy is a problem!!
                                        Ambiguity- good UI, fantastic processing- not quantifiable.
                                        Forward References- defined only later on.
                                        Wishful thinking- Searching 1B ppl in 1ns!!
                                    Traceable- Traceability matrix- which specification corresponds to which part of design/code.
                                    Verifiable- objective on scale of 0 to 10 kinda.
                                SRS document for client to agree on.
                                    Contract Document- Resolve/settle controversies thru refering it.
                                        written using end-user's terminology.
                                Reviewed for future development work (for developers' guide)
                                    Reference document
                                Processing Complex Logic
                                    DecisionTree- Edges repr user choices (triggers)
                                        leaves are what all actions (process) the system must take
                                        covers DB, I/O, File generation
                                        Easy to traverse down the tree.
                                        Eg- new member?- Create Details, create record, print bill.
                                    DecisionTable
                                        covers all possibilities
                                        Write all binary combinations of conditions and corresponding actions checklist for them.
                                        A column of table is called Rule.
                                UML-
                                    States in box- i/o states only
                                    Use Case Diagrams- 
                                        Identify actors of the system
                                            who will be users of your system (interacting with your "office")
                                        Identify system boundary
                                            identiy WIIFM for all actors (what system does/ demand from actors)
                                            break those functionalities down into parts for greater insights.
                                            vs Context Diagram- 
                                        Features- 
                                    Interaction Stories
                                        What will user's experience of i/o look like (imagine you are 3rd person looking at screen)
                                    Scenarios
                                        Collect a set of interaction stories and standardize similar ones of same type (class) as scenario
                                    Flow of events
                                        a set of related scenarios covering a range of possible reachable states for a given use case.
                                        <ActivityDiagram>
                                            control flow, protocols/ algorithms (depd on level)
                                            vs DFD- Sequence of Events culminating in final usecase (or their exception)- this is going inside the system (what's happening)
                                                Transition between processes (noun) vs activites (verbs) by system.
                                            vs FOE- Activity Diagram is UML standardized language for describing software systems- this is dealing with user's experience totally.
                                        </ActivityDiagram>
                                    Screen Navigation Diagram (aka Statechart)
                                        Aggregate of FOE.
                                        start generating test cases for User Acceptance
                                            finite set of test steps can be written to validate its behavior
                                    Class Diagram
                                        Identifying entities and relationships to be captured in a system
                                        DBMS- identify entities and relp to capture.
                                    Develop a prototype in ppt or sth- helps detect anomalies.
                </FunctionalRequirements>
                <NonFunctionalRequirements>
                    constraints or quality requirements
                        Eg- Hardware, OS, I/O capabilities reqd, standards to comply, Data repr.
                    maintainability requirements
                        Scalability
                    Security
                        safety requirements, security requirements
                    Portability
                        interoperability requirements
                    Reliability- 
                        External Interface Requirement- Interface with other external systems
                    Performance- How fast system produces results.
                    Human-computer interaction- UXD (User Experience Design)- not distracting, etc
                        Usability
                    <EmergentProperties>
                        Requirements addressed by interoperation of all components of software not single.
                        Eg- throughput of call center- depends on telephone system, info sys, how operators interact in condn.
                        Important call on architecture.
                    </EmergentProperties>
                    <Notes>
                            Some typical non-functional requirements are
                                    Looking for non-working
                                            Robustness (stability) - detecting situations where functionality may fail
                                                    Fault Tolerance - ability of computer software to continue its normal operation despite the presence of system or hardware faults.
                                                    ?Failure Management (messages, dumps, etc) - it's functional!! usefulness of error messages is usability.
                                                    Scalability (Load Testing)/Resilience - #users using the functionality at once.
                                                            measured in terms of its ability to scale up or scale down the number of user requests
                                                            https://softwareengineering.stackexchange.com/questions/65080/what-makes-an-application-scalable
                                                            vertical - hardware resources.
                                                            horizontal - CAP theorem.
                                            Maintenance (what to do when problems will come in using functions), 
                                                    Availability - ensure that systems are running and available most of the time
                                                            no downtime.
                                                    Maintainability - the degree to which an application is understood, repaired, or enhanced.
                                                            approximately 75% of the cost related to a project!
                                                            Mean Time to Repair (MTTR)
                                                            Quality - faults discovered, delivered, removal efficacy.
                                                            Supportability
                                                    Serviceability
                                                            ability of technical support personnel to install, configure, and monitor computer products, identify exceptions or faults, debug or isolate faults to root cause analysis, and provide hardware or software maintenance in pursuit of solving a problem and restoring the product into service. Incorporating serviceability facilitating features typically results in more efficient product maintenance and reduces operational costs and maintains business continuity.
                                                                    like debugging to let it step over and run it for user.
                                                                    even if this is broken the app can still be used.
                                    Looking for working
                                            Usability (usefulness of functions made) - think easy life of users
                                                    The ISO/IEC 9126-4 Metrics recommends 3 principles - 
                                                            Effectiveness: The accuracy and completeness with which users achieve specified goals
                                                                    Completion Rate, No of errors per task, 
                                                            Efficiency: The resources expended in relation to the accuracy and completeness with which users achieve goals.
                                                                    Task Time = End Time – Start Time
                                                                    0.46 goals per sec per user.
                                                            Satisfaction: The comfort and acceptability of use.
                                                                    After task questionnaire.
                                                    Documentation
                                                            Platform Compatibility, Compatiblities, resource constraints
                                                    Wow factor
                                                    Configurable by users
                                                    Auditable
                                                    Transparency
                                                    https://usabilitygeek.com/usability-metrics-a-guide-to-quantify-system-usability/
                                            Flexibility (ease of adding more features in future) - think easy life of developers
                                                    now 
                                                            Ease of Integration with others, Ease of Extensibility
                                                            Reusability - someone to extend your solution for personal purpose.
                                                            Adaptability (different customer to buy ByD but different companies, different business models and management)
                                                    Future
                                                            Ease to change over time 
                                                            How well code is understood and how well Object Oriented principles (Design Patterns)
                                            Performance (Benchmarking) - how fast will function be done - think speed.
                                                    Response Time/ throughput
                                                    resource utilization
                                            Server Management Considerations - think IT Teams
                                                    DB assures but so does your software
                                                            ACID - Atomicity, Consistency, Isolation, Durability
                                                    Reliability - probability of failure-free software operation for a specified period of time in a specified environment
                                                            Disaster recovery, Durability.
                                                            Recoverability - determine how quickly the system can recover after it has gone through system crash or hardware failure
                                                                    Recovery testing is the forced failure of the software to verify if the recovery is successful
                                                                    checkpointing.
                                                                    backup
                                                    Portability.
                                            Worldly Considerations
                                                    Cost, escrow, Certifications (ISO certified)
                                                    Compliance, Environmental considerations
                            Security (some undesirable creeping with functionality) - uncover vulnerabilities of the system and determine that its data and resources are protected from possible intruders
                                    Network security - in network infrastructure (resources and policies)
                                            https!
                                    System software security - weaknesses in the various software 
                                            bugs that give shell access to users.
                                            how to use shell to access folders in a web site or db and how to exploit it.
                                    Client-side application security - ensure that client can't be manipulated
                                            Log in, Log out, Back - are credentials asked for
                                    Server-side application security - server code and its technologies are robust enough to fend off any intrusion
                                            involve complex steps and out-of-the-box thinking
                                            https://www.owasp.org/index.php/Category:OWASP_Testing_Project
                                            Unsecure if
                                                    1) A Student Management System is insecure if ‘Admission’ branch can edit the data of ‘Exam’ branch
                                                    2) An ERP system is not secure if DEO (data entry operator) can generate ‘Reports’
                                                    3) An online Shopping Mall has no security if customer’s Credit Card Detail is not encrypted
                                                    4) A custom software possess inadequate security if an SQL query retrieves actual passwords of its users
                                            Secure if authorized access is granted to protected data and unauthorized access is restricted
                                                    Ref - https://www.softwaretestinghelp.com/how-to-test-application-security-web-and-desktop-application-security-testing-techniques/
                                                            Brute-Force Attack
                                                            Password management (3 times then regenerate)
                                                            SQL Injection and XSS
                                                            Service Access Points
                                                            Session Management
                                                            Error handling
                                                            Specific Risky functionalities (Payments and file uploads)				
                                            CIA principle - Confidentiality, Integrity and Availability
                                                    keep log of changes - which user made that change.
                                                    Your data is with us - when you want we give it, to no1 unauthorized and as it was (not changed)
                                    infinite number of ways to break an application
                                            security testing is not a measure of how secure application is.
                                    Capacity
                            Open Source.
                    </Notes>
                </NonFunctionalRequirements>
                <GoalsOfImplementation>
                    Desirable things but not checked for compliance.
                    Eg- Reusability issues, ?Scalable, etc
                </GoalsOfImplementation>
                <Apps> Eg of Functional Specifications of different software products (can be utilities (we are consumers) or to be done by us (we are provoders))
                    Products
                        TV
                            Files Internal - APK Folder, etc
                                Media, Player, FB, etc
                                YT, GPlay, Hotstar
                                Playstore, Games, etc
                            External (PD)
                                APK Files packages (to be installed into APK Folder of Files Internal)
                                other files
                            Home
                                Apps
                                Next Recommendation
                                YT Trending
                                Ted
                            Personal Group
                                TV Channels - Add, Remove, Sort, Ted (Latest, MyTalk), Trending, Recommended
                            Search - by text, by voice - Results online File on a channel, Apps Available (YT, Netflix (NA), Amazon (A but no option))
                            Inputs - 
                                Channels
                                HDMI (Laptop Integration)
                                Composite => TV (no back)
                                Tuner (ATV, DTV)
                                Mobile Cast / Chrome Cast
                            Settings
                                Device (Network, Input, Sound, Apps, Screensaver, storage/Reset, About)
                                Pref (Datetime (off/network/trans..,Tz, etc), Lang, Keyboard/GBoard Info)
                                Remote and Accessories (Bluetooth Connection)
                                Peronsal Location (Location Yes/No on LAN); security (allow APK verify), restricted profile on pin; diagnostic crash reports
                                Accounts - Sync, add, remove
                    Web Apps
                        MMT
                        Matrimony Apps - 
                            Account
                                Profile
                                Preferences
                                Consolidated views
                                    All Chats
                                    Daily Recommendations
                                Notes
                                Settings - on features and presentations
                                    View (List, photo), 
                                    Notif (stages tabs to include)
                                    Privacy - mob, photo, horoscope, activity
                                    Account - services and how much consumed (sms, mob, astro, membership duration)
                                    Advanced - Blocked, Ignored profiles, Contact filter, Call preferences (when avail)
                                Support
                            Notifications across the following
                            Stages
                                Prospective - Near Me/ Suggestions/ Search [by id]
                                    1 Criteria Search - Also match by Location, Profession, Star, Education, etc
                                    Bulk Search - yet to be viewed that match your criteria
                                Viewed [by ]me - detailed view (objective Detailing)
                                    Chat Service (Missing Info/Subjective Qs)
                                Shortlisted (Candidates to initiate discussion with)
                                Interested - Pending, Accepted, Declined (shortlisted from shortlisted) - Mutual
                    Android Apps
                        Travel
                            Ride - CRUD
                                Travel Type - Daily, Rental, Outstation
                                Car Type - Distance in time, food
                                Book / Share
                                Source / Destination
                                Schedule for travel
                            Services - Ola select, Ola Pass, Share Pass.
                            Payments - Ola Money, Credit Cart, UPI, Paytm
                                Referral Service.
                            Support, About, Food.
                        Food
                            Order
                                Location - scope of restaurants.
                                Food - select restaurants, select items for meals.
                                Delivery - Who, Contact, Time.
                                Payment - COD, Online.
                            Restaurant Booking - Go Out Recommendations - Zomato Gold, Book Table.
                                Collections Sets - Nightlife, Popular, Pub, Fine Dining, Casual Dining, etc
                                    SneakPeek
                                Events - Live sports Screening, Singer, etc
                                Cuisines
                                Restaurants - Likes, Comments, Share, Inapt marking.
                            Offers - General, Specific to Restarants
                            Accounts - Details, Followers, Contributions (Reviews, Photo, Been There, Dineline)
                                Gold Offers - by #times, by duration.
                        eCommerce
                        Groceries
                            Order Shopping - Features and details
                                Shop by Category
                                Search
                                Kit or packages to sell
                                Location, Delivery
                            Payments Wallet
                            Basket - Checkout
                            Offers - Pay by Paytm and get, Credit card and get, etc.
                            Articles and Blogs
                                Cookbooks - Browse Catalog - Indian, World, Kids, Bakery, etc.
                                    Shop Ingredients, Recipe
                                Lifestyle (articles and blogs)
                                Beauty Store
                            Account
                                Referral, Serivice, FAQ, Notifs
                        Online Streaming
                            Series, Films, MyLists - Watchlists by Shows or movies.
                            Home - Suggestions and Aggregation of all features.
                                Carousel
                            Find Video
                                Categories - Genre, Recommended by preious watch (customizable in YT - not interested), New, 
                                Search - Program, film, genre, etc - suggestions, history, auto-complete
                                Trending, Subscriptions, 
                            Inbox - From Subscriptions, Comments responses
                            Library - same as MyLists (but more control and thorough in YT), includes default Watch Later, Downloads.
                                CRUD for folders and files.
                            Coming Soon - 1 by 1.
                            Video - Like/Rate, Share, Download, Save, Recommendations
                                Play, Rewind, 
                                Comments in YT (Nesting) - CRUD - full fledge usecase
                            App Settings - Data Usage, Notifs, Download on wifi with what quality and location, Netflix storage %,
                                Diagnostics - Network, Speed.
                                Legal - Open Source, Privacy, Cookie Preference, Terms of use.
                                Account - Parental Controls, 
                        Chat Apps - Search Feature for all, Broadcast, Whatsapp Web.
                            Camera
                            Chats
                            Status
                            Calls
                            Contacts
                            Group - CRUD
                            Bookmarks - Star Marked Messages
                            Settings
                                Account Details
                                Chats, Notifs, Data and Storage Usage, Help, Invite.
                        Home Automation
                            MiHome
                        Assistants - Google Assistant
                        Games - Subway, Temple Run.
                        Utils - Camera, Recorder, Radio, etc
                        Maps
                        General Info Mgr Apps - PushUps, Wallet, MyGate, Rewire, Simple Habits, Books, etc.
                    Paint Windows
                        View
                        Canvas Creation
                            Pencil, Thick Nib Pen, Fill Region, Rubber, Brush
                            Shapes - thickness size
                            Color
                            Rotate, Resize, Crop, Paste
                        File Services - Save, Send Email, New, Open, Print, About, Image Properties, Exit.
                    Development Softwares - IDE
                        Eclipse
                        Netbeans
                        ?Logon
                    Internet Client Apps
                        Browser
                        Skype
                        Outlook
                                Mailbox
                                        inbox
                                                CRUD, Status, actions - reply, change status, forward, category status, read status, flagged status, so many group by for retrieve.
                                                there's no update for mail, only add or remove in modify.
                                                Mail BELONGStO Some Folder.
                                                Query - filtering.
                                        sent
                                Calendar
                                Contacts
                                ToDo
                                Notes
                                Folders
                                More
                                        Schedule a mail, priority setting, votes, all options in options tab of new mail.
                    Text Editors or Readers
                        Text Editors
                        Microsoft Word
                        Acrobat Reader
                    Data Management Softwares - Excel
                    Multimedia - VLC
                    File Explorer
                    Microsoft Teams
                    OS - windows system
                        ?quick thinking
                            Desktop
                            Launcher
                            Task Bar
                                Icons
                                Toolbar/Notification Area
                            Windows
                                Titlebar
                                Menubar
                                Toolbar
                                Statusbar
                            Settings - Control Panel
                                System Devices - Display, Battery, Projection
                                    Personalization - Background, Themes, Start, Taskbar.
                                        gsettings set ..
                                        taskmgr, tasklist, taskkill
                                    Time and Language - Region, Timezone, Language.
                                Extension Devices - Bluetooth, Mouse, USB, Printer.
                                    Phone - Link to a phone
                                    Network - Network and hotspot
                                        netsh
                                    Gaming
                                Usage
                                    Apps - Installed, Repair, Reset, Uninstall
                                        wmic
                                    Accounts - Admin, Sign In Options, Email Account, 
                                        net user add/localgroup, etc.
                                Customizations
                                    Ease of Access - Narrator, Magnifier, High Contrast, Mouse, Keyboard.
                                Privacy and Security
                                    Update and Security - Windows Update Active Hours, Recovery, Backup, Troubleshoot
                                        dism
                                    Privacy - which apps allowed to use which feature on PC.
                                    Search - Device History Usage, Windows Cloud Search, 
                            File Explorer - My Computer, Recycle Bin, etc
                            Core Stuffs
                                Command Shell
                                Registry Editor
                                My Computer Settings and Manage - Devices, RAM, Disks Partitions.
                            Quick Apps Launch Shortcuts
                    Android OS
                        Hardware Controls - Power, Volume, Charging Point, Sound Jack, Sound Exit
                        System and Status Bar
                        Notification Bar
                            Quick Access Tiles
                            Datetime
                            Settings
                                Parts
                                    Battery
                                    Display
                                    Sound
                                    Storage
                                Extensions
                                    Network and Internet
                                    Connected Devices
                                Usage
                                    App and Notifs
                                    Security and Location
                                    Users and Accounts
                                Customize
                                    Accessibility
                                    Google
                                    System
                        Home Screen
                            Google Search
                            Google Assistant - Long Press or Ok Google
                            Apps Shortcuts
                            Widgets
                        App Content Section
                            Context Menu
                        Favorite Bar - Apps
                        Apps View
                            Most Used Apps
                            All Apps - Search Feature
                        Google News Section
                        Home, Back, Recent Apps
                    Social Networks
                        Facebook
                                Home
                                        Me
                                                Intro, Photos, Friends
                                                Timeline Posts - CRUD. Retrieve where you were tagged or you created. (Settings)
                                                        Photo/Video, Live Video, Life Event
                                                        Tag Friends
                                                        Feeling/Activity
                                                        Check in
                                                        GIF
                                                        Tag Event
                                                        Watch Party
                                                        Poll
                                                        List
                                                        Answer a Question
                                                        Play with Friends
                                                        Who should see - Public, Friends, Friends except, Specific Friends, Only Me.
                                                                Story for 24 hours.
                                                Friends - 
                                                Notifications
                                                        Friends Requests (Accept Notifications), CRUD
                                                        Messages
                                                Photos
                                                Archive
                                                More - Videos, Likes, Events, Books, Groups.
                                                Activity Log
                                        Messenger
                                        Video on watch
                                        Marketplace
                                        Panda-pop
                                        Explore
                                                Groups - Member of
                                                Pages - Liked, Shop now, send message.
                                                        Home
                                                        About
                                                        Photos
                                                        Events
                                                        Notes
                                                        Videos
                                                        Posts
                                                        Community - chat, Pages liked by this page.
                                                        Info and Ads
                                                Events
                                                Offers
                                                Recent Ad Activity
                                                Jobs, Movies, Buy and Sell Groups.
                        Model - Facebook Data Model
                                your wall - friends, groups' posts - tagged and not. Add story, status, etc.
                                groups - Create, Posts, follow, Join - has its own wall - invite.
                                Videos - Trending videos postings from outside groups or friends. You can follow them.
                                Profile and Configuration - Wall pic, your profile pic, add story, edit profile, activity log, search profile, saved items, etc. Friends add and see, Timelines, Personal Tagged or relevant posts (like profile update)
                                Notifications - background info (his birthday), some activity to your relevance (friend posted, friend request).
                                More - Events, Marketplace, Memories, saved, pages, jobs, games, local, nearby friends, etc.
                        Model - TV Data Model - Every TV has set top box - unique for the tv. No, unique for the antenna for the signal to convert it to tv. No, again.
                                antenna to catch all the channels - our own dish or cable providers do it and broadcast it or dispatch it.
                                set top box converts some signal representation to the one conducive for the tv - we switched set top box with no impact so this means it is not unique.
                                remote is unique as per channels supported thru set top box. tv remote is separate.
                                bubbling screen because set top box gets heated - set top box is compulsory for transmitted signal conversion.
                        Twitter
                                Me
                                        Tweets, Replies, Following (Follow Suggestions), Followers, List, Moments
                                        Trends of #tags - Top
                                                Latest
                                                People
                                                Photos
                                                Videos
                                                News
                                                Broadcasts
                                Following's Tweets.
                                Search Twitter
                                Moments - Like, Tweet on the news.
                                Messages
                </Apps>
        </RequirementsGathering>
        <Design>
            <What>
            Design- how programmer (implementer) should go about (what all am I gonna do in HLD- blueprint)
                How DB schema should look?
                Blueprint for implementation (in terms of decided platform, environment, etc)
            </What>
            <HLD>
                <UMLDiagrams>
                    Using StarUML (ctrl+A, copy-paste in paint, save as image OR save as ALL FILES-> 1.png)
                    <UseCaseDiagram></UseCaseDiagram>
                    <DataFlowDiagram>
                    DFD (process is a function- i/o as data)
                        <StructuredAnalysis>
                            Functional Decompostion
                                aka Top Down Decomposition
                                Purpose- Capture the detailed structure of the system as the user views it.
                                    Uses customer terminology- his perception of problem.
                                    doesn't require technical knowledge.
                                High-level functions are successively decomposed into more detailed functions
                                    continue with hierarchical decomposition
                                    which are mapped to a module structure
                            Textual2GraphicalModel
                                End Result- DFD or Bubble charts
                                    useful showing flow of items/docs in org.
                                    Hierarchical model
                                        more details are added thru hierarchy
                                    Bubbles- Nodes- Shows the different functions (or processes) of the system
                                        aka process, bubble, transform
                                        Annotate with verbs- consumes some input and produces some output.
                                            @conceive as a processing station.
                                        Parallel lines for DB.
                                    Arc/Line- Edges- Data Interchange among them
                                        aka Data Flow symbol.
                                        annotated with name of data they carry from proc to next.
                                            arrow to- write, from- read.
                                    Rectangle- External Entity (real physical entities)- input/consume data to/from system
                                        aka terminator, source, or sink
                                    Parallel Lines- Data Store Symbol.
                                        For logical file- DS, file
                                        connects to process thru Data flow symbol.
                                        Synchronous operation- if 2 procs are cononected directly
                                            asynchronous operation- if connected via data store.
                                    Process
                                        Context Diagram- "1 bubble"- labelled with main function of system.
                                            shows following
                                                Data input to the system
                                                Data output
                                                External entities- only for L0.
                                                    various entities external to system (boundary)
                                                    interacting with it.
                                             Data sources and sinks are identified- ALL of them.
                                                ?covers only successful case
                                        L1- Refer SRS- identify high-level fn with data i/o
                                            identify sub-functions of the function along with their i/o
                                            Decomposing/ Exploding/ factoring- Decompose to 3-7 bubbles
                                                too few- redundant decomposition.
                                                too many- hard to understand.
                                                number them in seq of exec
                                                    but no guards- condition check (no control info)
                                                    must cover all SRS functions (no omission)
                                            Decompose how long- level at which the function of the bubble can be described using a simple algorithm
                                                add a dot after every level.
                                                Consistent down the abstraction
                                                    Data flowing into or out of a bubble Must match the data flows at the next level of DFD
                                    Terms
                                        Data Dictionary- DFD is accompanied by this.
                                            lists all data items appearing in a DFD
                                                consistent vocabulary for project
                                            data names along with their purpose.
                                            Composite in terms of components- eg- grossPay = regularPay+overtimePay
                                            Diffl maintain 1000s of entries for large projects.
                                            Semantics
                                                + composition
                                                [,,,,]- selection among bracket elements
                                                = equivalence (a = b+c)
                                                *comment*
                                                (optionalData) eg- a + (b)
                                                {iterativeData} eg- {name}5- 5 name data.
                        </StructuredAnalysis>
                        <StructuredDesign>
                            has essential features of function oriented design.
                            End Result- [module ]structure chart- from DFD
                                Represents- 
                                    Module Structure- Various modules making up the system,
                                    Module dependency (i.e. which module calls which other modules)- Interaction
                                    Parameters passed among different modules.
                                    Procedural aspects not represented
                                        how functionality is achieved
                                        Easily implementable using PL.
                                Building Blocks
                                    Rectangular box:
                                        A rectangular box represents a module.
                                        Annotated with the name of the module it represents.
                                        Rectangle with double side edges- simplifies drawing when a module is called by several modules
                                    An arrow between two modules implies:
                                        During execution control is passed from one module to the other in the direction of the arrow.
                                        Selection- using a diamond symbol- invoked depending on some condition
                                        Repetition- module invoked repeatedly
                                        Lower level modules never call higher ones (non-symmetric, non-transitive edges)
                            Purpose- Arrive at a form that is suitable for implementation in some programming language
                        </StructuredDesign>
                    </DataFlowDiagram>
                    <ClassDiagram>
                        @ to ppl in boundary (entities- obtained from data and idea of methods)
                        Association- Using. Class A uses Class B's objects as params in its methods.
                            A line of connection.
                            Eg- Customer (purchases) item (can have a name of relp (with properties))
                            Eg- Person (works_for) company, 
                        Aggregation- has A. Class A holds references of Class B's objects.
                            So deleting an A doesn't delete those B's (cuz only their references are lost from the A's scope)
                            Boss has hollow diamond. (0..?* to ?0..*)
                            ?having an arraylist of B's in constructor isn't sufficient to make it composition of A over B.
                            ?Create an object outside but pass its reference to the class method to be remembered.
                            Eg- Team-Employee, 
                        Composition- contains/madeOf/container-contained. Class B's objects exist inside of Class A (no independent existence).
                            creation of B's objects with an A's constructor call or an A's creation.
                                So deleting an A deletes all B's within it.
                                Creation of a B is done by A.
                                    ?not necessary all- pass a ref, copy object (not ref) and delete old ref
                            Boss has dark diamond. (1 to 1..*)
                            Eg- Company-Employee, Person-Leg, Account-Customer (every acc has a cust and cust can be without account)
                        Inheritance- is A. Strongest relp- class B extends class A.
                            Boss has triangle arrow.
                    </ClassDiagram>
                    <SequenceDiagram>
                        defines methods of classes
                        for the Flow of event (FOE) or scenarios (class of all interaction stories of 1 type)
                        check which class is listening to user's input
                    </SequenceDiagram>
                    <uncat>
                        https://www.lucidchart.com/- iiitb@gmail registered for UML making.
                        starUML- 2.8.0
                        VisualParadigm- 14.0
                        Sequence diagram of the code
                                measurement of how fast you understood the code (components/ time)
                                use principle of abstraction in making seq diagram.
                                From code/ design, We are trying to arrive at requirements. Of course, this is not the best course.
                                Or use the tool (acceptance testing) to come up with requirements and then look into design.
                    </uncat>
                </UMLDiagrams>
                <DesignPatterns>
                    <What>
                        Design pattern is a general (repeatable) solution to a commonly occurring problem in many different situations in software design
                            DP is a description or template for how to solve a problem not finished design that can be transformed directly into code.
                        Book- http://www.uml.org.cn/c++/pdf/DesignPatterns.pdf
                        <Intro>
                            Based on 1995 book by Gang of Four- Building Flexible and Reusable OO System, in C++
                                @Builder architecture- Christopher Alexander (1950)- he said we make buildings lots of them
                                    can we come up with design principles using which we can make any building in any situations (> 540 patterns)
                                    This gives Inspiration for application in CS.
                                GOF applied this approach to Software engineering (thereby passing experience of community to newcomers)
                                    How they did it?
                                        analysed all codes from experts- observed features that gave it flexibility- came up with 23 principles
                                        asked companies to check for completeness to solve all situations. No update, no addition so standard book.
                                        LESSON- Keep open minds to other fields- combine inspiration from them to your field
                                            eg- Google may recruit- Wizard/ magician, sociologist, biotech engr, civil engr, etc
                                    Benefits (why write a book on it/ study the course)
                                        Beginner couldn't have gotten thru intelligence or intuition.
                                            they had to toil/ hardships (experience of experienced ppl) to get there
                                            REL why we teach in schools
                                        Passing intelligence and experience to next generation easily
                                            vs we use them as standards (better grasp then reinvent) => Maturity earned by them easily 
                                            Solution for a context- generalized to all situations in multiple unrelated contexts.
                                            You have kinda framework to change details and fix your situ.
                            Approach adopted- Sir uses Head First Design Patterns book (in Java) (Ref: GOF book + Internet Materials)
                                Uses non-software context to demonstrate situation
                                Software situation- how expert Java Programmer would solve
                                    what happens when change in reqt encountered
                                    How they would have changed
                                vs Design Pattern!
                            Different From Design Principles- we will learn along.

                        </Intro>
                    </What>
                    <Why>
                        <Uses> sorted to SDLC stage of help
                            application to a broader range of SE problems (Problem Solving)
                            allow developers to communicate using well-known, well understood names for software interactions (Plan making)
                                It forms a good vocabulary- rather justifying every stand you have taken
                                REL just say I have used strategy patterns.
                            solves subtle issues that can cause major problems later (Design)
                            speed up the development process by providing tested, proven development paradigms (Devp)
                            improves code readability for familiar coders, architects (Maintenance)
                        </Uses>
                        <DesignConcerns>
                        Deals with Design principles for building Object Oriented Software systems with 
                            #Principle of separation of concern
                                High cohesion, low coupling (Among them)
                                    coupling- 1 module no relp with other.
                                    cohesion- unique purpose of a class and unique service by every method- furcate if not unique.
                            <Flexibility>- By Design.
                                means- implies a design that can easily accommodate the changes
                                ?Need- Ability to do modification with least effort.
                                    Eg- If data storage changes (from oracle to DB2)
                                        will we rewrite 1 million lines of code?
                                        vs rather use a patch to connect to data storage
                                            even a new technology comes the patch has change at max.
                                    Eg- Algorithms keep on getting refined or changed- implement them in a separate function (Don't hardcode)
                                    Eg- Frameworks Concept- 70% of software (skeleton) is built. 30% is programmer dependent (conforming to limits by skeleton, thus driving your thought process)- to make it complete.
                                        Sorting criteria of objects on a certain property may change- so allow compare method to be made by user- sort on height or weight of objects.

                                Aspects of flexibility:
                                    Adding more of the same kind of functionality
                                        Example (banking application): handle more kinds of accounts without having to change the existing design or code
                                        Add a base class
                                    Adding different functionality
                                        Example: add withdraw function to existing deposit functionality
                                        Adding new methods to existing class.
                                    Changing functionality 
                                        Example: allow overdrafts 
                            </Flexibility>
                            <Reusability>
                                means- Designing a software system such that components of a developed system can be used again in developing new applications
                                Need- 
                                    important factor in TME
                                        saves hell lot of effort
                                        producing low cost applications
                                        affects company's productivity 
                                            1 unit of time per person to reproduce * work vs 1 unit of time that 7 else has already done could have done
                                    Take it ahead from there vs reinvent the wheel- although I may like to use my design.
                                Types
                                    Architectural/design level (?Design Reuse)
                                    Implemented component level (?Code Reuse)
                                Implementations- How?
                                    Reusable functions
                                        Expressive names be used
                                            Understandability promotes re-usability
                                        Specify completely
                                            Preconditions, Postconditions, invariants.
                                        Include parameterization (inputs)
                                            But limit the number of parameters (minimize Inputs)
                                            and outputs.
                                        Avoid unnecessary coupling with the enclosing class
                                            Make static if feasible
                                        Explain the algorithm
                                            Re-users need to know how the algorithm works
                                    Reusable classes
                                        DESCRIBE- Describe the class completely
                                        MODEL REAL WORLD CONCEPT- Make the class name and functionality match a real world concept
                                        USEFUL ABSTRACTION- Define a useful abstraction
                                            Attain broad applicability
                                        DEPENDENCY- Reduce dependencies on other classes
                                            Elevate dependencies in hierarchy
                                    Reusable class combinations
                                        DESIGN PATTERNS- Design patterns are reusable class combinations.
                                        RELATIONSHIP TYPES'TYPES- Leveraging inheritance, aggregation and dependency 
                            </Reusability>
                            <ApplicableTo>
                                principles are generic. Dependent on capabilities of OO (but even OO is built on C like)
                                so we can always map concepts learnt on other paradigms as well.
                                    How to implement Polymorphism, inheritance, Interface in C.
                                    Mapping like if C didn't offer recursion- all problems had to be reduced to iteration But mapping exists.
                            </ApplicableTo>
                        </DesignConcerns>
                    </Why>
                    <How>
                        <Principles>
                            META- Need merging with the next
                            SOLID is an acronym for the first 5 principles of object-oriented design:
                                SRP The Single Responsibility Principle: -- a class should have one, and only one, reason to change.
                                OCP The Open Closed Principle: -- you should be able to extend a class's behavior, without modifying it.
                                LSP The Liskov Substitution Principle: -- derived classes must be substitutable for their base classes.
                                ISP The Interface Segregation Principle: -- make fine grained interfaces that are client specific.
                                DIP The Dependency Inversion Principle -- depend on abstractions not on concrete implementations.
                                    http://www.oodesign.com/dependency-inversion-principle.html
                                http://www.davesquared.net/2009/01/introduction-to-solid-principles-of-oo.html
                                http://unhandled-exceptions.com/blog/index.php/2010/03/13/nyc-codecamp-2010-refactoring-to-a-solid-foundation-session-content/
                            There are almost 10 Design principles. (5 more secondary ones??)
                                1. Open Closed Principle 
                                2. Liskov Substitution Principle 
                                3. Dependency Inversion Principle 
                                4. Interface segregation Principle 
                                5. Release Reuse Equivalency Principle 
                                6. Common Closure Principle 
                                7. Common Reuse Principle 
                                8. Acyclic Dependencies Principle 
                                9. Stable Dependencies Principle 
                                10. Stable Abstraction Principle 
                                http://geekswithblogs.net/ramkinkarpandey/archive/2009/10/03/how-to-write-a-good-code-again.aspx
                            don't forget the Law of Demeter
                                http://en.wikipedia.org/wiki/Law_of_Demeter
                            principles mentioned in "Head First: Design Patterns (Freeman, Eric; Robson, Elisabeth; Bates, Bert; Sierra, Kathy (2004-10-25). O'Reilly Media.)"...
                                Identify the aspects of your application that vary and separate them from what stays the same.
                                Program to an interface, not an implementation.
                                Favor composition over inheritance.
                                Depend upon abstractions. Do not depend upon concrete classes.
                                Principle of Least Knowledge: talk only to your immediate friends.
                                The Hollywood Principle Don’t call us, we’ll call you.
                            Dry and Yagini
                                http://www.codeproject.com/KB/architecture/Design_Principles.aspx

                        </Principles>
                        <FlexibilityInOO>
                            <SeparateUnknownFromKnown>
                            Separate the part you don't know from what you know
                                Fixed + Variable Part
                                Eg- Algorithmic part separate, data source separate
                                @Door is a part of room- may want to separate door from room (to change it later on- glass door, golden door, etc)
                                    But all gotta have hinges!
                                    all doors gotta have capabilities (behavior- maps to methods)- open/ close
                            </SeparateUnknownFromKnown>
                            <CompositionOverInheritance>
                            Composing Objects helps to give flexibility (over inheritance)
                                iow, Prefer composition over inheritance.
                                ?Compose object A and object B to get object C.
                                Inheritance- Rigid. 
                                    class A extends B => B's properties are embedded; come at compile time.
                                    Be conscious while using inheritance!
                                Composition- combining properties and behaviors of 2 objects of different kinds.
                                    @room extends door vs room has a door.
                                    establish connection between 2 objects
                            </CompositionOverInheritance>
                            <ProgramToInterface>
                                means- Program to interface rather than implementation
                                    Why connectable? because of standardization
                                    Interface means known to everybody
                                        Implementing class knows signature to conform to it
                                        to any class that wants a service of interface.
                                @Cap/ lid of bottle and bottle can be made from different vendors and assembed
                                @Door and Room
                                    Door and Room- what's connection? Thru hinges (patch)
                                    You may make golden door- but tell carpenter to keep hinges!
                                How?
                                    Interface Implementation
                                        The interface to other object is defined and facilitated.
                                        Any class in world can implement 
                                            thereby aggreeing to give stated services or behavior or 'what' aspect to any class
                                            all methods must be implemented- make sure ppl don't make dummy methods (so interfaces be short and concise)
                                    Interface Consumption
                                        client can invoke any object in the name of interface and take the services as specified by interface.
                                        any class may want a service from anyone conforming to the interface
                                        Thinking MVC pattern in terms of interfaces makes it easy.
                                    Dependence Inversion Principle- classes conform to abstraction definition (interface) and not vv.
                                Eg- class A may want to use different sorting algorithms
                                    Let class A maintains a sorting interface reference
                                    any client class' methods which wants to use a sorting algo- passes as args- the algo also
                                    OR class A discerns as per situation- and the interface- instantiated with right class (bubble sort, quicksort, etc)
                                    and that class' methods are invoked thru interface.
                            </ProgramToInterface>
                            Class object passed as argument and received as an interface.
                            Reusability Principle (later)- 2 interfaces- socket of electricity and plug of PC- made compatible by an adapter.
                        </FlexibilityInOO>
                        <StandardizedPatterns>
                            <Steps>
                            Understand a Problem specification
                                these DP come in every field (common solution to recurringly occuring problems)
                                We are thinking how to map real life solutions to programming capabilities.
                            Adopt a OO Design most appropriate (it will work)
                            can the design withstand (cater to) changes (which clients loves to do)
                                then to add the flexibility- we use appropriate variation or combination of Design Pattern
                                    We use a combination of 23 Design patterns and may use their variants also.
                                    DP are simple but application takes experience/expertize (to map DP combinations to real life situ)
                                        Pure form
                                        Mutant form
                                        Combination of above forms
                            </Steps>
                            <Eg>
                            Eg- look at source code for JUnit and Eclipse IDE.
                            Java has many frameworks which present these patterns implemented fully and we inherit from them
                                Eg- Struts
                            </Eg>
                            <CreationalPatterns>
                                DP that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation.
                                    The basic form of object creation could result in design problems or added complexity to the design. 
                                    Creational design patterns solve this problem by somehow controlling this object creation.
                                This pattern can be further divided into 
                                    class-creation patterns use inheritance effectively in the instantiation process
                                    object-creation patterns use delegation effectively to get the job done.
                                META- Greater detail on relp betw patterns.
                                    https://sourcemaking.com/design_patterns/creational_patterns- THUMB RULES
                                <Singleton>
                                    What- A class of which only a single instance can exist
                                        public class A {}
                                        A a;
                                        I want client should make only 1 object of my class and not more- He CAN'T
                                    NEED
                                        Situations
                                        Eg- Printer Spool, Registry, Windows Manager, Controllers, JDBC connection
                                        Many thread start making multiple connections- we want 1 connection shared by all- so getConnection singleton.
                                    HOW
                                    ?Idea0- why not stop making objects- use class' static methods!!
                                        may want to use member variable- they can be static
                                        ?want the values to persist thru sessions
                                    Idea1- Make another class use composition OR control object creation of Singleton
                                        class B{
                                            public static A x = new A();
                                            private int p;
                                        }
                                        B b1 = new B();
                                        B b2 = new B();
                                        Strategy- Make A invocable thru class B.
                                            A gets space in global part of the process.
                                        OBJECTION- But nothing prevents me from invoking A directly.
                                            Created at application launch, if resource intensive and never used => wastage of resource! vs create when needed.
                                            usable if self contained and doesn’t depend on complex initialization
                                                Warning- multiple class' static var can create a mess and hard to find bugs.
                                    Idea2- Using a method as a handle for constructor call.
                                        Why- constructor call => object creation- we have control the call. Let's restrict its access and use a handle.
                                        Strategy
                                            1. Make constructor private
                                                constructor being public is invocable from anywhere (initialization => creation)
                                                Code
                                                    private Singleton(){}
                                            2. Let the class create the object of itself
                                                let this public method be used as handle for clients
                                                Code
                                                    public static Singleton getInstance(){
                                                        return new Singleton();
                                                    }
                                        Code
                                            public class Singleton{
                                                Singleton uniqueInstance;
                                                private Singleton(){}
                                                public static Singleton getInstance(){
                                                    if(uniqueInstance == null)          //Statement S
                                                        return new Singleton();
                                                }
                                            }
                                        OBJECTION (why not) 
                                            This is not thread safe.
                                                2 calls to getInstance- racing at statement S
                                                both may pass thru- making 2 objects of Singleton class.
                                            Programmer must remember that only 1 object is created- references can be many!                                    
                                        Can I make subclass of singleton
                                            No, the constructor being private is not invocable
                                            Can make it protected but be clear- why you want to do that.
                                            can make singleton class final if don't want to make inheritable.
                                    Idea3- Use synchronized keyword (modifier) with getInstance method- thus only 1 thread can access
                                        Internally it is implemented as semaphores.
                                        Problem- first time it is desirable but all later calls just suffer synchronization time lag while it serves no purpose.
                                            slows the performance- wastage of time.
                                    Idea4- make a new synchronized method to check and apply for only the first time (newInstance == null)
                                        OR use synchronizes(this) or synchronized(Singleton.class)
                                        Code
                                            getInstance(){
                                                if(uniqueInstance == null)                  //are you the first thread?
                                                    synchronized(Singleton.class){
                                                        if(uniqueInstance == null)          //Statement T
                                                            uniqueInstance = new Singleton();
                                                    }
                                                return uniqueInstance;
                                            }
                                            double check locking mechanism
                                                why? Imagine Statement T is not there
                                                    race condition for 1st time- 1 thread stops at synchronized waiting- other makes uniqueInstance and returns.
                                                    the waiting is now set free- it had already undergone the check of being 1st one- will make another instance.
                                    Idea5- 
                                        Compiler may want to optimize the above code by giving new Singleton(); instruction to another processor
                                        and continue executing the unrelated statments parallelly
                                        if synchronized section is surpassed by the parallel process then the waiting thread will enter
                                            and uniqueInstance being null (with other process)- another instance gets created.
                                        No problem if the section is not surpassed while the results are merged.
                                        volatile keyword is there to tell compiler to not optimize the code
                                            essentially says that the variable should be on RAM and not cache copy should be maintained.
                                            ?Claim- You won't need double check locking if you use volatile- true or false?
                                                I don't think so- if the section is surpassed and RAM content the variable of new Singleton is in RAM (that makes no difference)
                                                I don't even know how volatile (in its definition will serve that purpose)- recall, variables in read mode, write mode
                                </Singleton>
                                <Factory>
                                    creates objects without exposing the instantiation logic to the client.
                                    refers to the newly created object through a common interface
                                    How
                                        client needs a product, but instead of creating it directly using the new operator, 
                                            it asks the factory object for a new product, providing the information about the type of object it needs.
                                        factory instantiates a new concrete product and then returns to the client the newly created product(casted to abstract product class).
                                        client uses the products as abstract products without being aware about their concrete implementation
                                    Applications
                                        graphical application works with shapes
                                            client- drawing framework, shapes are products, Draw and move interface for IShape
                                            command create a new circle- shapeType as parameter to factory and factory creates and returns circle.
                                </Factory>
                                <FactoryMethod>
                                    Creates an instance of several derived classes
                                    aka Virtual Constructor.
                                    Eg- library uses abstract classes for defining and maintaining relations between objects.
                                        Library known when to create an object but not how- upto client
                                        Interface defined for creating objects- but choice subclasses deferred at runtime
                                    @Hotel
                                        RoomFactory- person who permits a room on check-in and money
                                        PhoneFactory- person who permits phone call from the room- controls access to calls.
                                    Eg- Desktop application
                                        Application abstract class- methods for createNew, openDoc, newDoc and abstract FactoryMethod 
                                        Document interface- open, save close
                                        Application does know when client asks for it, then to create document, open document but details of drawing application not known- only format it corroborates with
                                        So, client calls concreteDrawingApplication to create a drawing document- FactoryMethod can use factory services and make a document of concrete drawing type but returned as document interface in factory return type.

                                    Assume Product making layer separate from creation of product layer (management)
                                        Parallel Class Hierarchies- Hierarchies in stores and products and correspondence between those hierarchies.
                                    #The words are very carefully chosen by GOF authors- that's why recommend to read again.
                                        Go thru QA, Conversations, challenging lady- in Head First Java book.
                                    without factory, the facade will have high fan out.
                                    Dependency Inversion Principle
                                        implements layer of abstraction
                                            upper layer uses (thru calling) interface that sits on abstraction.
                                            lower layer implements the interface to give a service.
                                            change a layer as long as interfaces are honored.
                                        Separation of concern
                                            change in a layer is limited to that- limited testing.
                                            change in technologies are easy to adapt
                                                Eg- SDN (by cisco), all big companies.
                                    Dependency Injection Principle is just extension of the Dependency Inversion Principle (many such layers)
                                </FactoryMethod>
                                <AbstractFactory>
                                    Creates an instance of several families of classes
                                        application made platform independent- for windowing, operating systems or databases.
                                        creation of objects without specifying their concrete classes (inbuilt in factory)
                                        Factory concrete only to specify the algorithm or procedure to opt for.
                                        clients always ask factory to create an object.
                                    The Abstract Factory defines a Factory Method per product. 
                                        Each Factory Method creates the concrete, platform-specific, product classes.
                                        Each "platform" is then with a Factory derived class.
                                        Eg- Factory method for RDB, OODB, XML- all create ItemDAO, CustomerDAO (composition in interface)
                                    We should use the Abstract Factory design pattern when:
                                        the system needs to be independent from the way the products it works with are created.
                                    @Japan creation of multiple models of cars/auto thru a same robot/factory- configure with apt machine type
                                        decide the vehicle type thru concrete factory method and get the handle for wheel attachment, steering attachment, etc.
                                    Eg- Stereotypical ways of phone number assignment as per areas- assignmentPhoneNumber is interface of IndiaAssignPhoneNumber class.
                                    Eg- Used for making platforms- enter the country code during installation and according to those rules
                                    CS- DAO pattern- Data Access Object
                                        instead of pizza- we know eating more than making.
                                    Objective- System to be independent of Data Storage type.
                                        Eg- use RDB, DB2, Cloud, MongoDB, XML, Legac Systems, flat files.
                                    Open Close Principle- System should be closed for modification. Open for extension
                                        should require least maintenance and changes cuz testing reqd.
                                    Classes- domain specialists like Model Objects say Item will use ItemDAO interface to connect
                                        to storage specialists (specific DB implementation)
                                        Eg- ItemDAO can have RDB, OODB, etc implementations- for insertItem, FindItem, update, etc.
                                    Forces- sth to live with 
                                        vs constraint- can be removed/ changed or imposed by us.
                                        eg- heterogeneity of data storage mechanisms.
                                        eg- cost constraint- more money and removed.
                                    Intent- can replace 1 data storage mechanism with another anytime.
                                        Client asks abstract factory implementation (data storage say RDB)- to create/return a customerDAO implementation (likewise others)
                                        the customerDAO implementation will conform to RDB style cuz of factory implmentation.
                                </AbstractFactory>
                                <Builder>
                                    Separates object construction from its representation
                                </Builder>
                                <Prototype>
                                    A fully initialized instance to be copied or cloned
                                </Prototype>
                                <ObjectPool>
                                    Avoid expensive acquisition and release of resources by recycling objects that are no longer in use
                                </ObjectPool>
                            </CreationalPatterns>
                            <BehavioralPatterns>
                                DP that identify common communication patterns between objects and realize these patterns. 
                                    By doing so, these patterns increase flexibility in carrying out this communication.
                                those patterns that are most specifically concerned with communication between objects.
                                <Strategy>
                                        Encapsulates an algorithm inside a class
                                        so called?
                                            Strategy is an approach to get to the end result- there can be many approaches ppl may choose
                                                how to change an approach/ strategy of doing sth at run time- changing algorithm, changing wings of birds, etc.
                                        Why needed
                                            when classes differ only in their behavior- isolate their changing parts as interface (stereotypical)
                                            Application
                                                Robots- can 'act (walk, talk, move) following different responses- aggressive, defensive or normal.
                                                    define IBehavior- with methods walk, talk, move and subclasses aggressive, defensive and normal.
                                                    could have kept these interfaces as state member variable but that's not flexible!
                                        Eg- 
                                        Here we will use Composition of wings interface for Duck. (Duck is-a wings vs has-a)
                                            composition cuz in constructor of mallard duck- it gets its stereotypical wings.
                                            Make wing separate from duck (separate changing part from the non-changing)
                                            if flying depends on wings' length (do that in class that implements the flying behavior in stereotypical way)
                                                what we want duck to have is just behavior interface (programming to interface)
                                        Duck Simulation Pond
                                            various kinds of ducks
                                            Design
                                                Duck Superclass- 
                                                    Common behavior- Display() 
                                                    Differnt- Quack(), Swim(); 
                                                    (to be overridden- ideosyncratic ways of all)
                                                    OR don't create subclass instance but duck instance with wing type specified in constructor.
                                                subclass ducks- Redhead, woodstock, mallard, wooden, rubber- 
                                                    display() override
                                                    we can create default stereotypical wings for all of them which can be changed at runtime.
                                            Change- want ducks to fly- add fly method to duck
                                                Override in subclasses => Redundant code => chances for inconsistency on modification/ maintenance menace.
                                                    many of them don't fly (wooden also)- rubber duck starts to fly!
                                                        the invocation will say "sorry can't fly"- won't feel good
                                                            for whom fly is applicable for whom it's not
                                                            S/w principle that what user needs to know- only that should be shown.
                                                                @GUI- don't click on this button- then why it's there?
                                                                @Married yes/no, children- what?
                                                            ///consider this- there are say 7 idiosyncratic ways of sth and apply to all kinds of ducks- without strategy it's a mess.
                                                make interfaces out of capabilities (idiosyncrises) that differ
                                                    let subclasses inherit class (being) and implement the interfaces (capabilities)
                                                        problem- 
                                                            got rid of method visibility for no behavior but
                                                            redundancy of code- all ducks fly the same! All subclasses gotta write this fly/quack method.
                                                                1 change and gotta change everything everywhere!!
                                                        Solution- let's go out in world and see what's done (S/W maps to life)
                                                            @Fair- ducks- ppl come and keep demands ducks with combinations of capabilities
                                                                rather than making all the kinds separately, what's done is- "I want redhead duck that hops and flies."; "I want wooden that quacks but doesn't fly"
                                                                make separate parts- connectable as per the demand of the customer.
                                                                Connect them- patch them- fly should happen on command from duck's body.
                                                                Principle1 is being applied here- fixed + Variable Part.
                                                                Next, Define Interface for connection.
                                                                    Duck body- takes objects of flyable.
                                                                    method in duck's body- to accept wing object.
                                                                    Button in duck body to fly in its ideosyncratic way (in interface implementation)
                                                                    Principle- Program to implementation/ interface.
                                                            Class- Duck- Quackable q, FlyBehavior f, PerformFly(), SetFly(), PerformQuack()
                                                            Interface- Fly Behavior
                                                                classes implementing it- WithWings, WithoutWings, WithLegs
                                                            run time- interface f and q instances get attached to apt class of withwings, withoutwings, etc.
                                                            Even the final version will have button for fly for wooden duck
                                                                but I have flexibility to choose apt connection- to notFly or flyLikeMallard.
                                </Strategy>
                                <Observer>
                                    A way of notifying change to a number of classes
                                    This is publisher subscriber model.
                                        Eg- stock market changes- then inform observers of that- as per subscriptions.
                                        Eg- eNews- send me on political change. 7 goes- send on sports change.
                                            unique methods for each type of change (object creation)
                                    Observer observes something (subject, observed, observable thing)
                                        many observers observe 1 thing. and 1 thing is observed by many observers. (there may be many things there!)
                                            Eg- many students 1 white/smart board- do neTh with it.
                                            Eg- Rajnikant's Kabali movie screening- 1 person n audience ppl.    
                                            Eg- Newspaper ed- change in news at center intimated at frequency of 1 month
                                        Onus of how/ what to observe is with the observer (no compulsion by subject)- register/unregister for observation.
                                            observers can come and go- the subject remains 
                                                no need to change its code- hardcoding ppl to send info to 
                                                vs list- changing it affects others
                                                    another observer not affected by addition/ subtraction from list
                                                    doesn't know/ care- no performance degradation (not even guess)
                                            Observer wannabe has the control/ power to register or unregister with specific subject.
                                            Eg- student can come and leave the hall.
                                            Eg- Kabali movie may go on- you buy a ticket or leave is up to you.
                                            Eg- unsubscribe newspaper!
                                        Sth of subject changes- it is intimated to all those registered under the subject.
                                            Eg- movie changes informed every 1/24 sec.
                                            Eg- newspaper ed- loose coupling- eat alu chop in it or read it- newspaper doesn't care.
                                    Real Life may show variants
                                        observers want to be reported at a different frequency- irrespective of change- 10 sec, 5 mins, etc
                                            Idea- find LCM, find next quanta to send info.
                                        Or observers may say I would pull information on request basis- don't send me.
                                            Push model vs pull model- when customer wants vs when change is detected.
                                        Or Notify that feed has changed- users can open at their will.
                                    Real Life- 
                                        we don't talk to a person to subscribe but the interface (@I talk to postman not Mr Sudhir)
                                        implemented by any person agreeing to take registration.
                                        and subject programs to object's interface- any object of any type can be conveyed if only he agrees to implement the interface.
                                        thru interface the subject would say- x get it, y get it, so on.
                                        subject method would say- objectInterface.update()- update it in your style, buddy.
                                        object method invokes subjectInterface.register(me)
                                            at run time- right object is invoked (who knows how to do it in his style)
                                            passing 'me' as input to subject (of any type) means that my details can be accessed for your service.
                                            subject would update its list member variable typically.
                                        on change, subject would inform all types of observers thru iterating over list of interface references.
                                        subjectInterface has a notify method not for invocation from outside but for internal working (for sure, duh!)
                                            notify(){
                                                arrayList(objectInterfaceRef).update();
                                            }
                                            update(){
                                                //bar charts, histograms, pie charts, tables, etc- as in API, or so.
                                            }
                                    DP is loose coupling
                                        no1 on either side- cares about the other much!
                                        Eg- weather station class- Temperature, pressure, humidity- thru IOT- inform users on setTemperature(int temp) call.
                                            observers may show it in all data visualization styles.
                                    w/o this DP, the notify method would be hardcoded
                                        currentConditionsDisplay.update();
                                        statsThruHisto.update();
                                        statsThruPie.update();
                                        //all these objects have some similarities- in behavior- that they display- so generalize them thru interface and use that.
                                        //adding to this list of methods is a maintenance labor and not programming paradigm condusive.
                                    Bottleneck for update in for loop?
                                        Observer pattern focusses on flexibility and not performance but implementation has to give attention to these details.
                                        instead of hardcoded streak- we will have a loop so no penalty here
                                        can think of multithreading or asynchronous calling to better the performance.
                                    Why not merge display method of every observer in observer interface itself and not others
                                        like we did for notify method in subject- no1 is going to use that interface but in subject interface
                                        could have done notify method from separate interface or called it private to make sure observer class can't elicit from outside.
                                            but interface doesn't allow private methods
                                            by the way observer classes are also made by developers only (can be API also)- but map real life person to computation person.
                                            just that we know that all subjects will need to implement notify.
                                        display is not within the scope of observer pattern.
                                        display could have been invoked by observer then IMAP, pop3, etc later.
                                    #main method is just a demonstration of 'course of events' as in real life.
                                    Applications- Swings- listerners use nothing but observer pattern. Those listening to a port are observers.
                                    Built In class
                                        uses class protected notify method
                                        setChanged();   : to set/control the frequency.
                                        #find reason in 1 at hand (listen) than rejecting it in pursuit of better alternative.
                                            avoid too much questioning- ask where genuine need/necessity of a question;  there's hope of answer;
                                        update is from observer interface- overloaded update(observable o, object obj);     //obj can be used to pull from subject/ observable.
                                </Observer>
                                <TemplateMethod>
                                    What?- Defer the exact steps of an algorithm to a subclass
                                        So Called? 
                                            Template is a preset format, used as a starting point for a particular application so that the format does not have to be recreated each time it is used.
                                            defines an algorithm in a base class using abstract operations that subclasses override to provide concrete behavior.
                                            Template- many similar works- make template of common to save repetitive work.
                                            Method- Context is method/ operation of any class.
                                        Applications- 
                                            Used in building frameworks
                                                Frameworks
                                                    Tight Coupling with the application system. Framework is incomplete without user's part.
                                                    Hollywood Principle- You don't call us. We will call you.
                                                        Agents say this to the actors! (if any client for their acting comes, they will call the vendor)
                                                vs Libraries/ Toolkits
                                                    eg- for matrix operations.
                                                    Loose coupling with the application system- which calls it if needed.
                                    How?
                                        Framework- 
                                            make a class with incomplete program (90% complete- all algorithms, procedures written)
                                            Eg- Sorting algorithm is in place but onus of user to give the criteria (Compare(Object,Object)) to make complete.
                                                BubbleFramework{
                                                    sort(){
                                                        ....
                                                        Compare();
                                                        ....
                                                    }
                                                }
                                            I have made algorithm and give users flexibility to cater to their needs using compare method.
                                                all client classes will extend the Framework. 10% effort and a new system!
                                                Focus here- (when to use)- when a few steps in  big algo vary.
                                                Framework may call the user subpart when needed.
                                        User's part- 
                                            inherit the framework class (made complete by user's 10%)
                                            Eg-                                     
                                                UserCode extends BubbleFramework{
                                                    Compare(Obj o1,Obj o2){
                                                        return o1.height-o2.height;
                                                    }
                                                }
                                                //Now the clients for this class can invoke bubbleSort thru this subclass.      
                                                Q- vs Strategy Pattern- the whole method can be changed but here method is to be made complete.
                                                    Eg- Sorting algorithms- choose at run time.    
                                                Q- Could it be without inheritance
                                                    Framework doesn't know all about B's object.
                                            Eg- CaffeineBrewer
                                                First Solution
                                                    Caffeine class- Abstract PrepareRecipe(); BoilWater(); //common part is taken
                                                    Tea class- PrepareRecipe(); addLemon();
                                                    Coffee class- PrepareRecipe(); addMilk();
                                                Problem- the burden of implementing the PrepareRecipe is on clients. Caffeine being the framework.
                                                Solution- implement the PrepareRecipe(); as final in Caffeine Class with varying parts to be filled by subclass.
                                                    addLemons and addMilk are abstracted out in superclass as addCondiments()
                                </TemplateMethod>
                                <ChainOfResponsibility>
                                    A way of passing a request between a chain of objects
                                </ChainOfResponsibility>
                                <Command>
                                    What- Encapsulate a command request as an object
                                        execute- whenever you see it's command pattern
                                        used in unix commands?
                                    Why - choose a method of a class at run time
                                    Eg- Remote Button press- execute a method of some objects
                                        just effort not even which method on (not hardcoded in remove)- encapsulation of method itself.
                                    Make command interface with execute method
                                    vs facade- 0-fanning, client needs not know anything. facade for many systems.
                                    eg- OS controlling many programs.
                                    #What's right may not be fashionable- do it anyway.
                                    Eg- Command Pattern used by tool kit developers.
                                        associate button to command for devices (as per mode- TV, radio, car, etc)
                                        tool kit is reusable
                                            tool kit for any app is same, remote is same, the backend application it's for- can be changed.
                                    But application methods are not standardized to ON/OFF- they can be of different flavors
                                        Eg- Garage ON/OFF, car- ON/OFF
                                        Decouple the execute behavior of button with actions.
                                    @Customer presses button of waiter, waiter is command, tells to cook who really does the thing
                                        Waiter- Invoker (queues up command objects)- done by remote in other cases.
                                            Invoker vs waiter- Macrocommand held by waiter.
                                        Cook- Receiver
                                        Ordering- execute()
                                        customer- client
                                        take order- set command; order slip is command interface.
                                        Dosa, etc- command
                                        Eg- restaurant- thick slip for taking orders with table observers assigns orders to cooks with each order type
                                    Just change parameter of command and whole behavior [elicted] is changed
                                        the principle of strategy pattern is followed here
                                        Null Object Pattern
                                            What- nto start with set all buttons to noCommand => no need of repetitive null-check (avoid null pointer exception)
                                                used by developers but like simple factory doesn't officially come under DP.
                                            Why- if repetitive checks on null happening, consider using it.
                                        command patterns normally use state pattern.
                                            Undo is doing reverse of 2 states- in all methods configure undo command.
                                            If > 2 states, then use "remember" current state b4 execute()- if off button pressed twice then previous version 'pissed off'.
                                    Eg- DB transactions- do all or none, OS job queues- redo on crash- command pattern helps
                                        OS has less threads but many command requests from clients
                                            easy to manage
                                            addStore- load to commnd object for crash recovery
                                            logging useful for crash recovery.
                                </Command>
                                <Interpreter>
                                    A way to include language elements in a program
                                </Interpreter>
                                <Iterator>
                                    Sequentially access the elements of a collection
                                    Always we address what's changing and what's not
                                    Traverse thru a collection- array, arraylist, hashmap, etc
                                    all collections have their own incrementation style- bringing next elt
                                        eg- array- index, arraylist- next()
                                    client program doesn't care but iterator takes care of it.
                                        make client code indepd of traversal mechanism.
                                    Pancakes and Diner hotels
                                        both used different traversals for array and arraylist for breakfast and lunch.
                                        they merged- don't redo- effort, testing (2mro again change?)- change array to arraylist (nope!!)
                                    Why not adapter?
                                        client uses different mechansim to increment for sys1 and sys2- how to make client "not care"- what OS it is- abstracted out
                                        increment is not in sys1, sys2
                                    We want- new merger- no code adding; 1 loop traversal.
                                    Iterator Interface to abstract behavior of incrementation over collections
                                        next(), hasNext()
                                        write iterator class for pancake house and Diner house- as per their collection used.
                                        createIterator method to be added to pancake house menu class (similarly to Diner)
                                        client thus attains independence from traversal mechanisms.
                                    New collection?- add your own iterator in the market
                                        Separation of concerns- client doesn't care traversal way 
                                            huge competence reqd vs ask the class in charge to tel next() object
                                    Design Principle- There should be unique reason for code to change.
                                        It's a principle not law- can be violated but don't overrule w/o reason (trade off maintenance vs advantage)
                                            Eg- Singleton pattern.
                                    The famous for-in loop uses iterator implicitly (after JAVA5)
                                    2 types
                                        External- when the client handles traversal itself using iterators.
                                        Internal- when the traversal is delegated to collection holder.
                                            Eg- Print(A) = Print(B)+Print(C) = Print(D)+Print(E) + Print(C) (whole part relationship)
                                            Eg- file directory structure- tree like structure. abstract Component class extends file and directory- directory composition of abstract Component.
                                                printing all the files can be achieved thru recursion. 
                                                This is internal traversal cuz waitress (client) delegates printing to directory.                                        
                                </Iterator>
                                <Mediator>
                                    Defines simplified communication between classes
                                </Mediator>
                                <Memento>
                                    Capture and restore an object's internal state
                                </Memento>
                                <State>
                                    Alter an object's behavior when its state changes
                                    https://sourcemaking.com/design_patterns/state
                                    Derek- 
                                    Allows an object to alter its behavior when its internal state changes. The object will appear to change its class.
                                    Context (account)- Maintains an instance of a ConcreteState subclass that defines the current state.
                                    State- Defines an interface for encapsulating the behavior associated with a particular state of the context.
                                    Concrete State- Each subclass implements a behavior associated with a state of Context.
                                    Class- 
                                    A fixed no of different states that an object can be in.
                                    It's about FSM- FInite State Machine- No can inc
                                    10 lifts- 20 floors- 20^10 states, more constraints limit them.
                                    State- Fn of collection of values of different attribs of an object.
                                    Eg- Fan speed- 5 states by regulator
                                    ATM states, patient states in hospital, Network protocol states of hosts.
                                    Mighty Gumball machine- any FSM - ppl will do all monkey tricks- keep all scenarios while designing response behavior.
                                    Response of machine changes on trigger dependending on its state to observer it seems that there is a change of behavior/ class object.
                                    Methods are triggers- user available.
                                    States remain same with a little addition- use template method pattern/ composite method pattern.
                                    Winner state is sold state. State Pattern allows an object to change its behavior depending on its state (internal)
                                    It's twin of strategy pattern- client gives behavior vs state gives behavior (managed internals)
                                    Transition decision can be taken by gumball machine and states.
                                    But dependency on state class (can't add/ remove that easily)
                                    Clients has no interaction with states (unlike Strategy)
                                </State>
                                <Visitor>
                                    Defines a new operation to a class without change
                                </Visitor>
                                <NullObject>
                                    Designed to act as a default value of an object
                                </NullObject>
                            </BehavioralPatterns>
                            <StructuralPatterns>
                                DP that ease the design by identifying a simple way to realize relationships between entities.
                                These design patterns are all about Class and Object composition. 
                                    Structural class-creation patterns use inheritance to compose interfaces. 
                                    Structural object-patterns define ways to compose objects to obtain new functionality.
                                <Adapter>
                                    Match interfaces of different classes
                                    It was work of Christopher Alexander (building architect)
                                    @Adapter for plugs socket
                                        Different pin compatibility for sockets and plug's needs can be catered to.
                                        Different Systems
                                            Power Supply System- can't change the socket interface (indian standards)
                                                2 pin/3 pin/ square/ rectangle/ 220 V, 50 Hz or 100 V, 60 Hz
                                            Laptop System
                                                2 Pin circular for US needs, etc.
                                                I can't break the laptop to conform to Power supply.
                                            Use adaptor to map one's needs to another.
                                                thereby getting to reuse the best functionality.
                                    Interface mismatch is a common problem.
                                        If adapter keyword is used, that's sufficient.
                                    Adapters are wrappers
                                        The wrapper gives a property that wrapped object doesn't have.
                                            @McD gives a wrapper for their dish. Polar bear, etc
                                            @Flipkart puts their delicates inside the wrapper (air bags)
                                            @lapy fits in socket cuz of wrapper that gives the property of fitting in.
                                        It adapts the object (implementing that interface) and implements those methods.
                                            Certain things not in your control- Forces.
                                    Eg- 
                                        Shape Interface implemented by Line Shape, Circle Shape,etc
                                        Another class that draws a text is introduced.
                                        Put an adapter in the middle as an object implementing Shape interface and mapping methods to draw text.
                                        gets some behavior like moving the shape.
                                    Eg- using toolkits and merging tool kits- we need to adapt.
                                    Eg- Duck simulation pond- shortage of duck. Want to bring some turkeys.
                                        Turkeys fly in a hop and Turkeys don't quack but gobble.
                                        make an object for adapter implementing duck interface.
                                        map the calls to fly and quack to hop and gobble of turkey class (composition of turkey in adapter)
                                        so duck interface will elicit turkey behavior.
                                    Eg- Enumerator used by your project- make compatible with iterator (old java, new java)
                                        make a class for adaptor and call iterator from there.
                                    Client ---calls---> Target^Interface
                                                         |
                                                   Adapter Class --calls---> Adaptee Class.
                                </Adapter>
                                <Facade>
                                    A single class that represents an entire subsystem
                                    Client calls O1.m1(), O2.m2(), O3.m3() to finish its purpose
                                        O1,O2,O3 are objects in another subsystem.
                                        m1,m2 are corresponding methods.
                                        This is fan-out- when multiple calls to another subsystem for a purpose.
                                            if subsystem in over internet, 3 remote calls vs 1 remote call (saves time)
                                            Principle of least knowledge, Law of delimiter, Law of least friends.
                                    vs standardize the purpose in subsystem and client calls using the what (purpose bundled) and not how.
                                        Eg- for compile client may call token(),parser(),etc OR client may call compile() of a "facade class" (made by us)- bundled version in subsystem.
                                        I don't need to know low level details as a client.
                                    Eg- Building a home Theater
                                        lotta low-level steps involved to install the set up.
                                            dim light, put screen down, projector on, turn systems on, fetch popcorns, etc
                                            vs 1 button click sets up an environment of your choice
                                                that button will underneath call all the methods (low level)
                                    Facade is what user sees-
                                        Eg- a single window of bribe is better than n-ppl.
                                        1 interface for eth (under the surface)
                                            can be class- but flexible for more classes to be added.
                                        Standardize the standard things is the motto.
                                        abstraction, simplification but not encapsulation
                                            why cuz it is not closed box- but still open but better to call thru facade.
                                            can be used to implement the layering concept (subsystem giving services thru interface to other)
                                                eg- in Networking. Socket Programming, etc.
                                                giving a layer of abstraction thru interfaces.
                                        a system can have many facades.
                                            purpose is to simplify for clients.
                                    Eg- Think of 1 remote for all the devices at home!
                                        as per the context (ac, washing machine, TV, etc)- remote's signals.
                                        Tied differently at different times (run time)
                                        ~command pattern later.
                                    Eg- Java Pet Store Application- On oracle website- worth watching.
                                        Lots of learning for all Design Patterns.
                                </Facade>
                                <Bridge>
                                    Separates an object’s interface from its implementation
                                </Bridge>
                                <Composite>
                                    A tree structure of simple and composite objects
                                    This DP uses Iterator Pattern in it.
                                    Derek-
                                    Allows you to treat individual objects and compositions of objects uniformly.
                                    They allow you to represent part-whole hierarchies
                                        Components can be further divided into smaller components
                                    You can structure data or represent inner working of every part of a whole object individually.
                                    This pattern is internal version of Iterator Design pattern.
                                    Class- 
                                    Component Abstract Class is inherited by Leaf Class and Composite Class.
                                    It's ok to use another node of tree as root in waitress class.
                                    Use Case- In a restaurant party, u can order in category-wise or uncat type (thereby getting a tree)
                                    Add External iterator to composite pattern
                                        Now superclass will have a createIterator()
                                        In this it's important for client to know if it's menu or menuItem (operations differ accordingly)
                                        Remember state of traversal thru stack.
                                        Try- External- pre order traversal return the nodes 1 by 1 thru external iterator. Need to remember state of traversal thru stack.
                                            Can we do this with recursion? No. Pause (Remember state) and resume recursion from where you stopped.
                                            for a tree with > k nodes, better use graph DS.
                                        Traversal and Computing Functions are tied together.
                                        Even leaf can be considered as node with no children.
                                        Write Iterator for leaf (we use null iterator for leaf)
                                        Now, waitress can apply logic on every returned node- whether it's veg or not.
                                </Composite>
                                <Decorator>
                                    What- Add responsibilities to objects dynamically
                                        Eg- adding line number to text or making capital as we stream
                                        Decorator is eg of wrapper- 
                                            @wrapping a gift, putting it in a box, and wrapping the box.
                                            Client-specified embellishment of a core object by recursively wrapping it.
                                        Eg- Skins, Border, Scrollbar for text.
                                        Eg- Adding window with combination of vertical scrollbar, horizontal scrollbar, border.
                                    Why
                                        provide a flexible alternative to subclassing for extending functionality.
                                            Control blowup if subclasses contain combination/Permutation of features
                                            for k attribs, 2^k possible subclasses => class explosion and compile time addition.
                                            better keep additional attribs as additional part (added at run time)
                                            add behavior or state to individual objects at run-time.
                                                Inheritance is not feasible because it is static and applies to an entire class.
                                        division of labor- Enable ppl for devp their own decorators
                                        Open close principle- open for addition/ extension but close for modification.
                                            REL add rules vs change rules
                                            Eg- Java I/O function
                                                Input Sream Interface
                                                    Concrete classes
                                                        FileInputStream
                                                        StringBufferStream
                                                        BytedArrayInputStream
                                                    Decorations- FilterInput
                                                        PushbackInputStream
                                                        BufferInputStream
                                                        DataInputStream
                                                        LineNumberInputStream
                                                        ConvertCases- custom your decorator.
                                                    vs class explosion.
                                    How
                                        Make a basic class object
                                        Make it have an association with an object of decoratedClass (subclass of basic class) of same type.
                                            vs template pattern, functionality is already there and extensions are decorations (additions to core)
                                            Decorator classes take responsibility of adding and returning decorated (inputted core class)
                                        Keep adding decorations using the same principle of step 2.
                                        The final decoratedClass Object can retrieve all decorations by recursive reference to Member vaariable (association Relp)
                                            Eg- we can maintain the sequence of decorations in beverage by refering the member variable of beverage type.
                                    Eg- Coffee types- with icecream, with ilaichi, milk, mocha, caramel, etc.
                                        also 2 spoons of mocha, etc- can be handled by replacing boolean hasMocha with getMocha.
                                        we could have also conceived of it as a list of condiments contained within beverage- arraylist (like in observer)
                                    Eg- after mocha embellishment- don't know object type returned so can't use discount percentage.
                                        sequence can be obtained thru the containment of mocha-ed coffee type object.
                                        beverage = new Mocha(beverage);
                                        we are wrapping up objects (components)- pass the object and get back a dcorated "Mocha-ed beverage" as output
                                        1 core and many decorators
                                </Decorator>
                                <PrivateClassData>
                                    Restricts accessor/mutator access
                                    https://sourcemaking.com/design_patterns/private_class_data
                                </PrivateClassData>
                                <Flyweight>
                                    A fine-grained instance used for efficient sharing
                                </Flyweight>
                                <Proxy>
                                    What- An object representing another object
                                    Types
                                        Remote Proxy- Proxy can be surrogate (remote) 
                                            How to access object in different JVM- connected over Network.
                                            @Proxy in students- JVM2 is movie and JVM1 is class- act like object present in movie.
                                                Eg- Hari wants to be proxy for avinash.
                                                All objects have unique methods- all studs have unique arithmetic function for universally known values of a and b.
                                                From result I know whether student is present or not.
                                                JVM1 has interface for objects Attendance- int giveAns(a,b)
                                                How proxy will happen- whatsapp message giveAns(5,8)- and get result back from them
                                                vs adapter vs real life communication
                                            Helper classes- middleman to connect client object with server object- Network processes and JVM compatibility
                                                helper client is called stub and helper server is called skeleton (like twins- are related- produced by 1)
                                                marshalling- putting together parameters and header details by stub and demarshalling- recreate objects at other JVM reverse by skeleton. Clarify, it's done by unicast remote object in package RMI package.
                                                Persistence at JVM done by serialization.
                                            RMI- Remote Method Invocation. Param should be prepared to face run time error due to network- so exception handling.
                                                Mapping between interface method name and full scale skeletal information + real object details.
                                                    who and how creates stub at client- how does stub come to client.
                                                    Server uses RMIC (naming.bind()) to register its local method in naming directory (JAVA universal directory) which holds the stub.
                                                    Client invokes look up method to get the interface from naming directory- the interface is full qualified name- so no naming clashes- uses reverse of internet address.
                                                        Eg- in.ac.iiitb.dir.IAttendance.
                                                        This stub is sent to client and is the proxy object which implement interface which extends remote- throws remoteExceptions for error.
                                                        Serialization if sth different than primite data types are returned then need mechanism to format accordingly. Transient modifier.
                                                Eg- Gumball machine sales across world.
                                        <RMI>
                                            Who- https://www.youtube.com/watch?v=mdqR7oy8N-s&spfreload=10
                                            It's a distributed application in JAVA
                                                    RMI- object in 1 machine to be invoked from another machine
                                                    goes to server, executes method and return result to caller
                                            Architecture
                                                    Client -> Stub -> RRL -> Transport Layer
                                                    Server -> Skeleton -> RRL -> Transport Layer
                                                    TL maintains connection betw  client and server
                                                    stub is proxy for server object- its representation in client machine- like represent friend in class for attendance.
                                                    call comes to stub- which passes request to RRL- identifies type of server (unicast requests supported)
                                                    RRL layer- has object called remoteRef; stub invokes it to pass across the request to server RRL to skeleton, server object- result backtracked to client.
                                                    Clients' request takes parameters- primitive, objects (local, remote)
                                                            primitive- stub does marshalling- putting together parameters and header details, sent thru RRL.
                                                            object- it's created on client side- address can't be sent- so, serialize b4 sending across.
                                                            Remote Object- serialize the stub object and send it across (just as we are doing here)
                                                    When client makes a call to remote object- it opens a socket for particular remote object. Different socket for another client and so on.
                                                    Protocol used to talk to remote object- JRMP, RMI- Proprietory protocols. TCP/IP for network.
                                                    How does client get stub reference- how get remote object- object residing at server!!
                                                    for remote object we must define interface- business contract of what methods would be available for clients.
                                                    So, Server's remote object once created is placed at RMIRegistry- namingSpace on which objects are placed.
                                                    RMIRegistry is another JVM- so we have 3 JVM's now (4 if remote object is used)
                                                            these objects are placed there, with a unique name, called bind name.
                                                            client wants to get reference of a particular remote object- he gotta know for remote object- which bind name is being used.
                                                            client specifies bind name to look up into the registry, aginst which a reference/object is stored which is returned.
                                                            Server wanna bind object to Registry- server talks to it using bind/rebind method. 
                                                            At this point, server is a client wrt registy and we talking RMI- we are invoking method (on naming interface) on registry to pass across object with bindName
                                                                    stub is dynamically loaded at server. The object being remote object, stub object needs to be serialzed b4 sending across RMIRegistry.
                                        </RMI>
                                        Virtual Proxy- Proxy can be placeholder- spawn actual process retain control and give it when it's ready like loading picture, show wheel by proxy.
                                        Dynamic Proxy (aka Protection Proxy)- Protection proxy given to manager shows changeSalary Method but not to employee.
                                </Proxy>
                            </StructuralPatterns>
                        </StandardizedPatterns>
                        <PatternOfPatterns> aka Compound Pattern
                            Enterprise System = P+A+B+D- MVC
                                Presentation Layer- Controls GUI- Design build screens, Bootstrap, HTML.
                                    There is a composite pattern inside of view.
                                    View takes input from controller (wait mode- data indepeendent things) and model (thru observer pattern)
                                    View is like a client for controller which can choose different model OR View and Controller have strategy pattern.
                                Application Layer- Control Flow- Middlewares like CORBA, frameworks, self-made stuffs come under this.
                                    like office boy- orchestrates the flow of events to finish the use case- acts like controller but doesn't care implementation but sequencing part.
                                    Controller can change model (Business and Data Layer) any time => Strategy Pattern.
                                        chooses what to trigger in model in Model2 framework.
                                    Controller can disable the time userInput. So, talks to view also.
                                Business Layer- Controls Business Objects- Domain specialists (Hospital Mgmt, accounts, etc)
                                Data Layer- Data Storage Mechanism- Specialists for storage giving perspective.
                                Details- MVC has many variants- Model2 is used for web development.Bean behaves like model.
                            Separation of Concern 
                                Property
                                    Exhaustive- any module belongs to 1 of them. 
                                    MEX- only 1 of them
                                    Sequence is respected- GUI we write SQL => we expect GUI guy to know persistence- if change then nightmare to bring people together.
                                    We use interface for all the layer objects- so that exchanging a layer is easy.
                                        Eg- A.m1(IBusiness b)
                                        @Removing one slab and put another- it's possible with interfaces.
                                    System must satisfy additional properties- expressed/achieved through certain DP.
                            Eg- On Desktop, so many clocks for showing time- Digital view, Analog view with sec, without sec, calendar
                                underlying data is same- model is same. Changing model, should change/ reflect in all the views.
                                    which pattern- strategy, decorator, observer-  observer most logical cuz all views are notified.
                                    I can change time from view, thru controller. View has output part- which follows observer pattern and input part which is handled thru controller.
                                    Changing model from time to heartbeat, controller will deny view inputs.
                                        even interface for model changes. ITime to IHeartBeat- Adapter pattern to adapt ConcreteHeartBeat to conform to ITime.
                        </PatternOfPatterns>
                        <AntiPatterns>
                            https://sourcemaking.com/antipatterns
                        </AntiPatterns>
                    </How>
                    <Misc>
                        When to use what
                            FirstNotes
                                Creation
                                        Factory - too much selection blocks for objects not variables.
                                        Builder - decide on a recipe and configure with ingredients. Tell builder to make an object suited to your needs
                                        Prototype - make a clone (similar) of object.
                                Behavior
                                        Strategy - activities/behavior [of set of objects] stereotyped (flexible behavior of object) - fly but your way.
                                        Observer - on event, notify many [registered] objects.
                                        Template - Framework making - recipe is decided in HLL - specific details (methods) by children
                                        Command - choose a method of a class at run time - eg - select channel of tv based on button pressed.
                                                connecting an event with a device at run time (using command intermediate) - eg- on fire alarm event, the message should go to guard on-duty (not any other guard) - command of fire alarm is registered with one on duty.
                                        Iterator - Let a class abstract looping behavior - thru its elements.
                                        State - Class for FSM - changes state as per input [symbol]
                                Structure
                                        Adapter - Make class object behavior different class by mapping methods. Making turkey a duck by defining turkey adapter subclass for duck. It's like hiering a translator of your type.
                                        Facade - a class hiding a complex subsystem - Making a home theater - hides making changes to lights, ac, etc as per high level instruction to home theater. We care high level correctness.
                                            user planning method sequencing for a usecase and different usecase - better reveal a set of usecases as services by a facade!
                                        bridge - delegator class for method mapping - button object method mapped to device behavior.
                                                mapping classes (remote control buttons) to another class methods (device)
                                        Composite - Handling a tree behavior of 2 classes.
                                        Decorator Pattern - Substitute of 2^n combination classes (like pizza or dosa variety)
                                        Proxy - Provide a surrogate or placeholder for another object to control access to it. (vs adapter)
                            Another Personal Notes (Exploration thru code) - deep dive - next step to make it trigger driven than name driven.
                                Strategy - m classes and n stereotypical behaviors (m >> n) - advantage avoid reimplementation of behaviors
                                Template Method - create exits for revised implementation - Develop Frameworks (create execution trace for all with exits or specifics only different)
                                State - a class can exhibit n behaviors for a trigger, each depending on the state it is in
                                        Eg - SAM - given a state of PO, a UI trigger can means different state changes and different types of modifications to take place.
                                Singleton - permit only 1 instance of a class - eg DB Connection
                                Simple Factory - Criteria - IF ELSE block creating similar class objects (sub classes)
                                        Create object 1 of types of subclasses. Eg - Create Pizza - 1 place where creation of all class types takes place.
                                        Easy to add support for new - else go to n places and change it on addition or removal.
                                        new type introduction just means a new class definition for all methods that's all and an entry in factory.
                                        all the times you gotta create 1 of the types if you use IF ELSE blocks for creation, then any change (addition, subtraction => find all those places IF-ELSE blocks)
                                Observer - update on 1, should flood and update n different classes - 1 trigger that effects on n classes then use this.
                                        make a class outta trigger and others subscribe for the trigger - when trigger hits, let all classes be updated in the way they want themselves to be updated on the trigger.
                                MVC - V and M in sync guaranteed
                                        V change trigger C for something
                                        C creates M and registers V with it. (V is registered with M and is a listener on M)
                                        C makes changes on M - M implicitly updates the registered V with the changes rather than telling C and making C update V.
                                Iterator - 1 behavior across n classes - create "abstract" class for it - let every class register its style of behavior - standardized Abstract behavior that user needs to know.
                                        eg - iterating over arrays, arraylist, linked list, trees is different - but if abstract all of them to a conception that all of them have conception of enumeration from start to end. Then make all classes comply with that behavior and user will just need to know hasNext and next methods of iterator.
                                Factory Method - Creation classes with m X n combinations - {NY,Chicago} X {Cheese, Veggie, Pepperoni} - Pizza
                                        given an order ask chosen store to create pizza of a type - the store will create that variety of pizza
                                Facade - make a class become service class with only specifications required 
                                        eg - watch this movie - home theater configurations apt will be chosen which means a lot of things to do
                                                but you just tell me movie genre and I will do all the home settings to intensify your gratification.
                                        Criteria - if there are countable objects' stereotypical handlings you are doing yourself for different possible situations
                                                you better delegate that responsibility to a facade class. More often than not you will do this without even thinking. 
                                                But if case when is only a part of program you gotta change.
                                        Essence - ability to make a good DFD levels of your class methods. 
                                                Having choices to exercise - like type of movie to decide on lighting pattern is not core of facade.
                                                focus is logical separate and separation of concern - keeping things clean.
                                Decorator Pattern - Avoiding exponential explosion of classes by adding decoration classes store reference of decorated original class.
                                        any request on the decorated class - must be translated in layers of decorations - eg add money contribution by each decoration on pizza or coffee.
                                Composite Pattern - ability to deal with composition classes and traversing common behavior across them.		
                                        Polymorphic behaviors of different types of objects sharing a relationship like composition (hierarchical or graphical, etc) 
                                        trigger behavior on one and let it traverse across.
                                        Eg - iteration over folders and files - folders are also files. Conception of iteration exists only on folders
                                Command Pattern - Similar to factory but for execution - specify command code for command to run (configured so)
                                        1 class object managing state controls for you (facade is union of actions, command is choosing one of the actions)
                                Adapter - bridging consumer requirements with available services. Filling the gap - make turkey behave like a duck thru an adapter. No direct call to turkey.
                                Abstract Factory - 2 levels of factory objects with behavior divided across the 2 levels	
                                        eg - cheese pizza of NY - NY preparation is unique in making dough and saucage and cheese creation
                                        create cheese pizza object with factory reference of place - place uses stereotypical ways of creating their things.
                    </Misc>
                </DesignPatterns>
                <UIDesignPatterns>
                        UI Design Patterns
                                https://www.interaction-design.org/literature/article/10-great-sites-for-ui-design-patterns
                                https://www.interaction-design.org/literature/topics/ui-design-patterns
                                http://ui-patterns.com/patterns
                                        User Interface Design Patterns - unexplored
                                                Getting input
                                                Navigation
                                                Dealing with data
                                                Social
                                                Miscellaneous
                                                Onboarding
                                        Persuasive Design Patterns - unexplored
                                                Cognition
                                                Game mechanics
                                                Perception and memory
                                                Feedback
                                                Social
                        UI Design Patterns
                                Getting input
                                        Forms
                                                WYSIWYG - Editors without html knowledge for final looks
                                                        aka What You See Is What You Get.
                                                Password Strength Meter - feedback on levels with color coding
                                                Input Feedback - immediate feedback on input - color coded.
                                                        aka Confirmation notice, Error notice, Alert, Inline Form Validation.
                                                Calendar Picker - to select nearby date immediately
                                                        Date picker, Date selector
                                                Input Prompt - gray text in the input field and no label (avoids over explaing things)
                                                Structured Format - gray text for adherence to format of data input (ddmmyyyy). Also sizing as per adherence - zip code characters, credit card number in 3 input boxes.
                                                Fill in the blanks - Show _______ conversations per page. let user fill up for config.
                                                        aka Natural language form.
                                                expandable input - expand the input textbox only when it is selected (eg - quora reply or comment). don't distract user.
                                                        aka 
                                                Undo - enable users to move to previous state or next state by offering undo button on some set of actions done. Pop up - undo vs looks good.
                                                        aka Multiple Undo, History, Global Undo.
                                                Keyboard shortcuts - to make tasks or commands faster - eg - youtube shortcuts, dropbox.
                                                        aka command shortcuts.
                                                autosave - excel as a service. Don't depend on user for save when anyways you should.
                                                captcha - authenticate users.
                                                Forgiving Format - user needs to quickly enter data into the system, which then in turn interprets the user's input. Eg - enter location which system can spell correct, etc.
                                                Drag and Drop - ?same operation on one or more objects by moving them from one place to another. Eg - UI Designer, stamps site.
                                                Morphing Controls - presented with controls available to the current mode. Eg - Twitter button "Follow" vs "Following".
                                                Preview  - shows changes in form fields affect an end result as quickly as possible. Eg - PO Preview.
                                                        aka Live Preview.
                                                Rule Builder - Every triger has + to add more conditions to rule and then what action should be taken. Eg - outlook rules move to folder, CSS NG Query on incidents.
                                                        aka Query Builder, Smart Filter, Segment Builder.
                                                Inplace Editor - quickly and easily edit a value on a page. change the title like on world doc. aka Direct Manipulation.
                                                Good Defaults - already suggest some input. Eg - flights search inputs on dates and passengers.
                                                settings - a page dedicated for configuration on system behavior user expects.
                                                        aka options, preferences, etc.
                                        Explaining the process
                                                Wizard - single goal which can be broken down into dependable sub-tasks.
                                                Steps Left - Pop up for input. Eg - facebook. process of filling in data over several steps and is in need of guidance.
                                                        aka Workflow.
                                                Completeness meter - wants to complete a goal but needs guidance in when it is reached and how to reach it. Eg - Coursera - your current week %age done and link to next video.
                                                        aka Progress Bar, Percentage Done Meter, Progress Indicator.
                                                Inline Help Box - assistive information located close to the interaction they are about to perform. ?some colored section above input form guiding what should be entered. ? specific to selected field or in general.
                                        Community driven
                                                Vote To Promote - upvote to democratically help decide what content is more popular.
                                                Pay To Promote - wants to pay to prioritize own content above the regular content feed in order to gain increased reach and traction.
                                                        pop up saying - advertising value add, radio buttons for 10 boosts for $1.70.
                                                Rate Content - democratically help decide what content is of higher quality. Eg - eCommerce product ratings or movie ratings.
                                                        not count or sum but average over how valuable e1 considers the content to be.
                                                Flagging and Reporting - mark inappropriate content for moderation. Cuz page contents are created dynamically by users and not in creators control.
                                                        Eg - youtube mark inappropriate, report abuse, etc.
                                                Wiki - repository for your website or application where users can produce and manage information while collaborating on public content.
                                Navigation
                                        Tabs
                                                Module Tabs - Content needs to be separated into sections and accessed via a single content area using a flat navigation structure that does not refresh the page when selected. ?Separation of inputing under titles. Eg - OIF screen.
                                                Navigation Tabs - Content needs to be separated into sections and accessed using a flat navigation structure that gives a clear indication of current location. Eg - ?ICICI navigation links on top to decide your story along the website.
                                        Jumping in hierarchy
                                                Notifications - important updates information and messages to act on.
                                                Breadcrumbs - know their location in the website's hierarchical structure in order to possibly browse back to a higher level in the hierarchy.
                                                        eg - linux.com - shows your current context on the website.
                                                Modal - user needs to take an action or cancel the overlay until he can continue interacting with the original page.
                                                        aka Modal Window.
                                                        eg - subscibe to our email list.
                                                Fat Footer - aka Sitemap Footers.
                                                        quickly access specific sections of a site or application bypassing the navigational structure.
                                                        Eg - ui designer footers, any blog share by fb, twitter, etc icons.
                                                Shortcut dropdown - access a specific section or functionality of a website in a quick way regardless of hierarchy.
                                                        Eg - OWL Tabs, the screen refreshes on dropdown input.
                                                Home Link - navigate to home page especially when you randomly land on a page - eg bbc news.
                                                        aka Go Back to a Safe Place.
                                        Menus
                                                Vertical Dropdown menu - navigate among sections of a website, but space to show such navigation is limited. Eg - Silverlight of ByD.
                                                        eg - adobe website - communities - by user, by resources - select any 1 option.
                                                Accordion - User needs to navigate among a website's main sections while still being able to quickly browse to the subsection of another.
                                                        context expand, shrink and navigate on the vertical side bar. Eg - News sites.
                                                Horizontal Dropdown menu - Eg - UI5 of ByD.
                                                        navigate among sections of a website, but space to show such navigation is limited. Eg - College websites.
                                        Content 
                                                Carousel - aka Slideshow.
                                                        browse through a set of items and possibly select one of them.
                                                        Eg - netflix, amazon, products, etc.
                                                Cards - browse content of varying types and length.
                                                        Eg - Pinterest.
                                                Adaptable View - site's presentation of content fit the specific needs of the user
                                                        Eg - CSS Memo formatting (#this doesn't fall under navigation thru content)
                                                        Eg - Word Font selection.
                                                Event Calendar - Upcoming Events, Schedule, Itiniary
                                                        find events of interest happening in a certain period of time. Events need to be presented to users in a visually concise model that abstracts date and time.
                                                        Eg - Meetup - today, tomorrow, next week, next month, etc. ?Call register on smartphone, ?Calendar.
                                                Progressive Disclosure - aka Revealing Interfaces.
                                                        focus on the task at hand with as few distractions as possible while still being able to dig deeper in details if necessary
                                                        reduce feelings of being overwhelmed.
                                                Pagination - view a subset of sorted data in a comprehensible form
                                                        Eg - kindle page you read, CSS NG Memo paged.
                                                Article List - guidance in finding editorial content of interest, which hierarchical navigation alone does not accomplish.
                                                        ?contextual navigational, suggestions recommendations, related articles, etc.
                                                Tagging - Items need to be labelled, categorized, and organized using keywords that describe them.
                                                        Eg - FB tagging people on photo.
                                                Continuous Scrolling - Infinite Scrolling, Endless Page, Endless Scroll
                                                        view a subset of data that is not easily displayed on a single page Content. Eg - ?chapterize a book.
                                                        Eg - ?more posts are being loaded - FB.
                                                Archive - All the items in a collection need to be organized in a chronological order. October section, November section posts.
                                                Categorization - aka section
                                                        user wants to make sense of content by browsing and grouping them into categories
                                                        Eg - ?eCommerce sections to search product by. News websites front page to lure into by different categories.
                                                Tag Cloud
                                                        browse content by popularity in a visually appealing way - use word cloud to navigate.
                                                Thumbnail - get an overview of multiple pictures without having to download each of the full size images.
                                                        eg - windows folder content thumbnail.
                                                Favorites - Bookmarks, Starred, Wish List.
                                                        pick out items for later consumption
                                                        eg - pinterest. quora bookmarks.
                                        Gestures
                                                Pull to refresh - retrieve more data or refresh already available contents on the screen
                                                        eg - Android youtube videos suggested on home page, widgets on chrome
                                Dealing with data
                                        Tables
                                                Table Filter - categorical filter the data displayed in tables by the columns (present less granular categories on a column)
                                                Alternating Row Colors - Striped tables, Zebra striping.
                                                        visually separate similar looking rows in a table apart, in order to match the values of each row.
                                                Sort By Column - sort the data in a table according to the values of a column
                                        Formatting data
                                                Dashboard - digest data from mulitple sources at a glance
                                                        Eg - CNN Money.
                                                        aka Cockpit.
                                                Copy Box - Users need to easily view and copy preformatted text.
                                                        Eg - Derek Banas or Tutorialspoint - copy the code.
                                                Frequently Asked Questions (FAQ) - aka Service Center, Help Center.
                                                        user has questions concerning a site and its related services
                                                        Eg - Dropbox help center - How can we help you sub-title with folder to choose your category from.
                                        Images
                                                Slideshow - collection of media needs to be displayed in a presentation as a sequence of still images
                                                        ?Carousel with only 1 image and buttons to move - fmovies.
                                                Gallery - browse a collection of high quality images
                                                        enforce a sense of beginning and end. Eg - eCommerce images of a product.
                                                        Windows 7 image files - slideshow viewer
                                                Image Zoom - Magnify image
                                                        user wants to zoom in on an image to view the details in a higher image resolution
                                                        Eg - eCommerce Flipkart - product images.
                                        Search
                                                Autocomplete - aka Auto Suggest
                                                        recognition aided search when performing search tasks that are difficult to remember or easily mistyped.
                                                        eg - google search
                                                Search Filters - Live Filters, Refining Search.
                                                        conduct a search using contextual filters that narrow the search results
                                                        Eg - eCommerce websites for filtering products by specifications.
                                Social
                                        Reputation
                                                Collectible Achievements - Badges, Trophies, Achievements, Accomplishments
                                                        Some users respond to opportunities of winning and collecting awards that in turn can be displayed to other community members in order to increase engagement
                                                        Eg - My Awards, Successfactors, You are in top 34% of racers - shown visually as a white thumb racer in a row of black thumb racers.
                                                        average workout.
                                                Leaderboard - Highscore
                                                        to know who are the very best performers in a category or overall
                                                        Eg - 10fastfingers
                                                Testimonials - What people are saying (in their reviews) - quote above people face, info.
                                                        Eg - SAP, AnalyticsVidhya
                                        Social interactions
                                                Friend list - Contacts
                                                        keep track of and engage a subset of their friends on the site in a meaningful way
                                                        eg - facebook - to find, interact and share info with.
                                                Activity Stream - Activity Feed, News Feed
                                                        overview of recent actions in a system that are interesting from his or her perspective.
                                                        eg - ran 5Km, average speed, etc; change log.
                                                Auto-sharing - Auto share
                                                        easily share their activity with their social networks
                                                        eg - quora - we are finding best persons to answer this question.
                                                Chat - Inbox, Direct Messaging, Private Messaging, Group Chat
                                                        interact privately with other individuals or groups from within the system
                                                        Eg - facebook chat.
                                                Friend - form a mutually agreed connection with another person
                                                        Eg - Social Networking FB add a friend, request accepted, Matrimony apps.
                                                Reaction - Like, Heart
                                                        express their emotions in a simple way
                                                        eg - SN facebook news feed post - emoticons for like, happy, sad, angry, etc.
                                                Invite friends - Find Friends
                                                        experience the application with their friends
                                                        eg - airbnb - invite friends from gmail contacts, linkedin - contacts from your contact list android device.
                                                Follow - Subscribe
                                                        track and keep up to date with activity on topics or themes, not just people
                                                        eg - quora topics, twitter follow, etc.
                                Miscellaneous
                                        Shopping
                                                Product page - details about a product in order to make a purchase decision or satisfy a need for support.
                                                        eg - looks, select size and color.
                                                Pricing table - overview of what pricing plans are offered and how they differ
                                                        Eg - choose your pack from given options and what features you get with each pack.
                                                        eg - SAP SME Solution, Matrimony sites your current plan, tinder, etc.
                                                Coupon - attract users to purchase products using an incentive
                                                        eg - Food Delivery, PayTM, etc.
                                                Shopping Cart - Cart
                                                        online shopping experience needs to be realized through a real world analogy.
                                                        Eg - Retail Providers Big Basket, Milk Basket - this cart qualifies for free shipping.
                                        Increasing frequency
                                                Tip A Friend - Tell a friend
                                                        share something of interest with a peer
                                                        eg - ?quora share an answer.
                                Onboarding
                                        Guidance
                                                Walkthrough - Intro Tour, Joyride, Guided Tour
                                                        learn the products and services you offer in order to make a decision to join a service or buy a product.
                                                        eg - slack, ?eclipse overview, etc. Kinda label screen with 1, 2, 3 and mark KM docs for them.
                                                        eg - fb - screen specific pop up telling what it is about, page dedicated to telling the features your product supports.
                                                Blank Slate - Empty State
                                                        guidance in the form of an example of how the application will look, feel and behave when in full function and filled with data
                                                        eg - show some control flow diagrams with the action buttons like post something - Eg - SME 1 page quick link to any screen in business scenario, GIT experience thru the lynda course.
                                                Playthrough - Interactive Tutorial, Warm-Up Exercise.
                                                        to know how to use the different features of the application
                                                        Android app first launch or ?eclipse on first launch - not sure.
                                                Coachmarks - Instructional Overlay
                                                        help to understand a complex user interface
                                                        gray-out the screen and white arrow to what each sections are.
                                                Guided Tour - User Guided Tutorial, Just-in-time Tooltips
                                                        learn about new or unfamiliar interface features
                                                        pop up informing about the new feature while on that page - say for create email.
                                                Inline Hints - Inline Cues
                                                        learn about new or unfamiliar interface features in an unobtrusive way
                                                        div section of information on top of form - button to "Learn More"
                                        Registration
                                                Lazy Registration - Immediate Immersion, Gradual Engagement
                                                        immediately use or try your website without conducting a formal registration beforehand
                                                        Eg - StarUML or UML Online permit 1 UML diagram creation without registration but can't save. Save will need it.
                                                        Eg - many internet services.
                                                Account Registration - Sign up wall, Sign-In Wall, User Sign-Up
                                                        find active user is in order to provide personalized content or opportunities to conduct a purchase.
                                                Paywall - Permission Wall, Sign-Up Wall
                                                        money and facilities with link to walk in to sign up.
                        Persuasive Design Patterns
                                Cognition
                                        Loss Aversion
                                                Loss Aversion
                                                        motivate the user to start or continue; decision can be framed as either a gain or loss
                                                        Eg - renew your matrimony profile else restricted usage mode will apply from that time onwards. Also get people use some part of your services for free.
                                                Status-Quo Bias
                                                        tend to accept the default option instead of comparing the actual benefit to the actual cost
                                                        Eg - you want the user to choose the default option you want them to - eg ubuntu installation default payment.
                                                                when you want your users to continue to be your customers on changed offering - eg - BYD to SME transition.
                                                Optimism Bias - consistently overstate expected success and downplay expected failure
                                                        Make negative effects of critical actions clear to the user and offer a straightforward and safer alternative.
                                                Negativity bias - pay more attention and give more weight to negative than positive experiences or information
                                                        great attention to what negative feedback is presented to the user. Does it bring the users closer to their goal(s)?
                                                        political smear campaigns outpull positive ones. Nastiness just makes a bigger impact on our brains.
                                                        work much harder to avoid losing $100 than we will work to gain the same amount
                                                        painful experiences (loss) are much more memorable than pleasurable ones (gain)
                                                        loss aversion refers to negative values, the negativity bias refers to negative information
                                                        brain has greater sensitivity to unpleasant news
                                                Framing - We tend to avoid risk when a positive frame is presented but seek risks when a negative frame is presented
                                                Endowment Effect - We place greater value on objects we own over objects we do not, especially if sentimental value has been placed in them
                                                        linkedin - before your cancel, you will lose all (active jobs posted) this but retain these things. No refund but you will continue to have access until end of year.
                                                        retain regular users and be better off than competitor.
                                        Other cognitive biases
                                                Illusion of control - Illusion of control
                                                        We have a tendency to believe that outcomes can be controlled, or at least influenced, when they clearly cannot.
                                                        motivate user to strive for a goal.
                                                        Provide your users with a sense of control in order to let them feel confident and assured that they their actions have a positive influence on their goals.
                                                Need for closure - desire for definite cognitive closure as opposed to enduring ambiguity.
                                                        providing subtle cues to completion. motivate users to act. 
                                                Peak-end rule
                                                Set Completion Mini
                                                Curiosity Mini
                                                Value attribution Mini
                                        Scarcity
                                Game Mechanics
                                Perception and memory
                                Feedback
                                Social
                </UIDesignPatterns>
            </HLD>
            <LLD>
                <Algorithms>
                    <About>
                        art can't be taught but some design techniques
                        like cloth design, civil, cars, computers.
                        Prereq- Prog,DS, DM.
                            Approach- 
                    </About>
                    <MathModelOfPC>
                        Terms definition- to be precise (unambiguous) about reference (unlike real world)
                            Problem-Problem Instance 
                                specification of what are valid inputs and what are acceptable output corresponding to valid input.
                                    (input independent specific input)
                                Input instance- a value x is input instance if meets input specification of problem P.
                                    Formal- Problem size or Size of input instance- number of bits needed to represent the input instance.
                                    Informal- any parameter that grows with formal notion of size.
                                        Eg- sum of numbers for gcd.
                                Eg- 
                                    GCD of 2 numbers. (36,48)
                                    find shortest path on map. (mumbai to pune)
                                        how to represent a map- as graph (as matrix)
                                        input size- number of roads/stations- algo that can find among 1000 statiosn may be more useful than 10.
                                    find a word in dictionary. (evolution)
                                        input size- no of words (a good indication)
                                    given an x-ray, is there a disease (pic)
                            Algorithm- An abstract computations procedure that takes some values as input and produces a value as output.
                                idea behind the program (in terms of PL of course- knowing our capabilities)
                                so describe in such a detail that we can analyse.
                        RAM model of PC
                            Has processor and Memory 
                                memory- (a collection of locations- with address and data)
                                    addressed by variables for simplicity.
                                    Arrays, Structures- Primitive DT, simple var; trees, lists;
                                    program and data don't mess with each other.
                                Instruction set of Processor- assume- all instructions execute in 1 step
                                    eg- Arithmetic and logical- A = B+C (1 step)
                                    Goto- Jumps- 1 step (structured is desired but for PC)
                                    Pointers- B= *C (1 step)
                                    Array Operation- 1-D- A[i]=1; (1 step)
                                    Function calls- values for var, ref for arrays/structures.
                                    Complex=
                                        A = B+c*D-f (3 steps)
                                        A[I] = B[j] + C[k]  (4 steps- fetch array B, add, store)
                                        c = A[i,j]  
                                            assume 2-d built on top of 1-d.
                                            simulated using 1-d (any element of 2-d maps to some element of 1-d)
                                                a[i,j] = A[i.m+j]   (4 steps)
                                    Eg-
                                        for(i=1;i< n;i++)
                                            c[i] = a[i]+b[i];
                                        1/ i=1
                                        2. if i > n, go to 9
                                        3. x = A[i]
                                        4. Y = B[i]
                                        5. z = x+y
                                        6. c[i] = z
                                        7. i= i+1
                                        8. goto 2
                                        9. ...
                                        1. executed once
                                        2. executed (n+1) times.
                                        3 thru 8 (b)- executed n times.
                                        Total = 2+n(b+3)
                        Relation to reality
                            complicated memory- main, cache, registers
                            Pipeline- several instructions together.
                                superscalar- 1-4 instructions simultaneously executed.
                            Instruction set- Memory to register copy
                                A = B+C is not 1 step- load B to reg1, C to reg2 and add 2 regs- to reg3 and store reg3 to A.
                                Compiler intelligence- if (x[i] = 1) then ...; if(x[i]=2) then..;
                                    simple translator- temp = x[i] and temp = x[i]- should be merged.
                            So we have idealized our model.
                        Algo analysis general strategy
                            General analysis- T(n) - maximum time taken by algo A solve any Problem instance.
                                T(1), T(2), etc.- down to the eart defn.
                                Conservative definition- it's worst time taken.
                                Difference not made by precise value of T(n) but functional form of T(n) that matters.
                                    compilers change, PC capabilities change.
                                important for large n (we use PC for only large probs- small are hand solvable)
                            Eg- matrix multiplication
                                for(i=0;i< n;i++)
                                    for(j=0;j< n;j++){
                                        c[i][j] = 0;
                                        for(k=0;k< n;k++)
                                            c[i][j] += a[i][k]*b[k][j];
                                    }
                                Loop took- 2+n(b+3)
                                    painful but precise- once but later why ignoring these details is ok.
                                    Accessing of 2-d array took- 4 steps.
                                T(n) 
                                    5TH STATEMENT took 18 steps (4*4 + 2)
                                    inner loop takes- 2+n(18+3) = 21n+2.
                                    1 more statement for outer loop, so 21n+7
                                    time by outer loop, 2+n(21n+7+3)=21n^2+10n+2
                                    time by third loop, 2+n(21n^2+10n+2+3)
                                        = 21n^3+10n^2+5n+2
                                    Another computer, with different compilers, 
                                        number of differnt basic instructions.
                                        intelligent compiler reducing some steps (don't recalculate c[i][j] for eg)
                                        but the fact that loops are executing will never change
                                        so no matter which computer you execute the n^3 term will definitely remain.
                                        T(n) is cubic in n (this can be claimed for all computers)- we don't want to talk architecture in this course at all.
                                        So we put algorithms into a class- cubic, quadratic, etc.
                            Eg- Median Finding
                                Median(X){
                                    n=length(X);
                                    for(i=0;i< n;i++)
                                    {
                                        smaller = 0;
                                        larger = 0;
                                        for(j=0;j< n;j++){
                                            if(x[i]>x[j])
                                                smaller++;
                                            if(x[i]< x[j])
                                                larger++;
                                        }                                    
                                        if(smaller< n/2 && larger< n/2)
                                            exit;
                                    }
                                }
                                T(n)
                                    upper bound- not too clever in finding exact figure
                                        assume it never exits
                                        at most quadratic in n.
                                        is there a lower bound? in worst case, it will take quadratic (minimum)- if last element is median.
                        Asymptotic functions
                            formal way or notation to speak about functions and classify them.
                            Eg- 10n^3+5n^2+17 and 2n^3+2n+6- belong to same class
                                ignore constant multipliers and lower order terms of n.
                                more importance to behavior as n -> INFINITY.
                            THETA notation- any func- take pessimistic values for all terms.
                                even n^3+nlogn- is also cubic- cuz n^3> nlogn.
                                f BELONGS THETA(g1) and h BELONGS THETA(g2) then f+h BELONGS THETA(g1+g2)
                                Should say belongs but we write f = THETA(g)- this is abuse. but clear what we mean.
                                    REL Rose is red- actually it should be rose BLEONGS to a set of things that are red and not equality.
                                f(n) = 2+1/n = THETA(1).
                                f is nearly same as g.
                            Big-O
                                T(n)<=2n^3+34 = O(n^3)
                                T(n) is no larger than g.
                                S(n) = SIGMA(i) over 1 to n <= SIGMA(n) = O(n^2)
                            OMEGA
                                T(n)>=2n^3+35 = OMEGA(n^3)
                                f is smaller than g (ignoring constants)
                                S(n) = SIGMA(i) over 1 to n >= SIGMA(i) over n/2+1 to n >= SIGMA(n/2)
                                    = n^2/4 = OMEGA(n^2)
                                Allow us to express our knowledge or lack of it in a compact manner.
                            If Big-O and OMEGA is same then THETA
                                so S(n) = THETA(n^2)
                            Homework
                                F(n) = F(n-1)+F(n-2) and F(1)=F(2)=1
                                    then F(n)>=2^(n/2) then F(N) = OMEGA(2^n/2)
                                    Actual result- F(n) = THETA(((1+sqrt(5))/2)^n)
                        Examples
                        what's relevant to our calc.
                            Useful in space and time calculation- 
                            mentally execute the program on that model and tell its time.
                            assign time for operations- how much?
                            what's input data.
                            how much related to real computers- else useless analysis.
                        Design goal- fast algorithms
                            fast meaning?
                            come up with clever ideas.
                            analysis strategy, with eg.
                        Limitations- 
                    </MathModelOfPC>
                    <DesigningAlgo>
                        <Principle>
                            study the properties of whatever we compute and this helps in designing faster algorithms.
                                <Eg>
                                Prob- Find GCD of 2 numbers.
                                Algo- 
                                1. school level.
                                        factorize m- in terms of prime numbers that divide it.
                                        factorize n.
                                        find common factors- multiply and return results.


                                2. Euclid Algo.
                                        Euclid(m,n){	//swaps n and m if m > n.
                                                while(m does not divide n)
                                                {
                                                        rem = n % m;
                                                        n = m;
                                                        m = r;
                                                }
                                                return m;
                                        }
                                        Instances-
                                                eg- euclid(48,36)- 12 was answer.
                                                This doesn't prove it right but we can relate.
                                                eg- 3 iterations we get gcd of 434, 966 vs school level.
                                                school level divisions and then comparing takes non-trivial time.
                                        Proof-
                                                Fact- if m divides n then m is gcd
                                                if not, gcd(m,n) = gcd(n%m,m)
                                                Hint- if m = ag and n = bg where a and b are relatively prime.
                                </Eg>
                                <ProofOfFastness>
                                termination- 
                                    Proof of fastness- Counting iterations, will be useful in the rest of the course.
                                            yes, 1st argument definitely reduces at least by 1 until it gets 0.
                                            every iteration of euclid the sum decreases by factor of 1.5
                                            from m,n (p,q) to m,n (p',q')- find (p+q)/(p'+q')
                                                    q' = p (by function)
                                                    p' = q mod p < p
                                                    p'+q' = remainder + divisor (also, divisor p < divident q)
                                                    <= divident = q.
                                                    so, p'+q'+2(p'+q')= p+p+2q = 2(p+q)
                                                    3(p'+q') = 2(p+q)
                                            so number of iterations = log(p+q) base 1.5
                                </ProofOfFastness>
                        </Principle>
                        <Techniques>
                        we use 1 or more of following:- keep them in back of mind
                            <Induction>
                            Induction- if I know answer till n, I can tell for n+1
                                smaller solutions can build for larger solutions
                                this is mother of all algo design techniques.
                                Solvable thru recursion and iteration.
                                Eg- FindMin using linear search.
                                Analysis
                                Eg- FindMin- Input array A, minimum element in A.
                                    if A[i]< temp
                                        then temp = A[i]    //Programming details ignored.
                                    here n-1 comparisons- also, values stored but small operations are of same order as comparisons.
                                    THETA(n)
                                    Can I do it better?
                                        every elt is compared at least once.
                                            n/2 comparisons ensure this- every alternate elts paired up.
                                                every comparison gets rid of 1 elt from being minimum.
                                                after 1 iteration I get rid of n/2 elements- now, prob size reduced to n/2
                                                so on still n-1 comparisons.
                                            with every comparison I draw an edge between the nodes
                                                program ends then you have done all comparions.
                                                each connected component, if >1, can't tell minimum for sure.
                                                Data structure course tells u minimum n-1 edges reqd.
                                MaxMin Problem
                                    Naive- finding min and then maximum- 2n-2 comparisons.
                                        think about it many comparisons are repeated.
                                    Previous argument of connected components can be used.
                                        observe repetition here.
                                        get rid of unnecessary comparisons.
                                        n/2 comparisons- partition our elements into candidates for max and min.
                                    Recursively (divide and conquer)
                                        array of size n
                                            recursively find max and min of left side
                                            tht of right side
                                            compare the min of 2 sides and max of 2 sides.
                                        T(n)?
                                            T(n) = 2T(n/2)+2 and T(2) = 2.
                                            T(n) = (3n/2)-2
                                        Can we do better- no its OMEGA.
                                        Used by britisher prev century but we will put it to good use.
                                        Steps
                                            1. divide the probs into 2 parts (often of equal size)
                                            2. recurse on each part.
                                            3. Put thse solutions together to get solution of original problem.
                                            Many solutions applied blindly give amazing results
                                SecondMin
                                    DAC
                                        2 half arrays will bring 2 elements- min and secondMin.
                                        compare to update min and secondMin
                                        secondMin = min (prevMinCandidate, minOfOtherArray)
                                        T(n) = 2T(n/2)+2 and T(2) = 1 so T(n) = (3n/2)-2
                                    Can we do better? Yes.
                                        draw the recursion tree of the array (complete binary tree)
                                        use the recursion to only find the minimum from leaf to root.
                                        second min- would have been compared with min somewhere along the line from leaf to root.
                                        so, traverse your way back from root to leaf where min was and compare only those candidates
                                        T(n) = n-1 + lgn-1 comparison. Needs n + logn.
                                            understnd problem a bit more and come up with new ideas.
                                <Sorting>
                                    Using induction of 1 more element
                                        Insertion Sort- Why Again? This is to show how ppl come with these algorithms so that you can also come up likewise.
                                            you will put a principle to practice.
                                        suppose n-1 are already sorted- gotta add nth element.
                                            do binary search to find location (log i for every element)
                                                nlogn comparisons.
                                            gotta shift all to its right by 1 step 
                                                (expensive and killer step)
                                                every ith element may have to more i steps at worst.
                                            insert in there.
                                    DAC
                                        called merge sort.
                                        divide into 2 pieces.
                                        sort each piece 
                                        put them together.
                                            merging 2 sorted arrays into 1 sorted array
                                                1st position will be- can be figured out-
                                                which elements are candidates for second position.
                                                2 indicators to find element of every position of final array.                                            
                                                we can think of it in recursion also- I can merge 2 lists
                                                    1st elements of 2 lists compared, smaller moves
                                                    can problem size has reduced.
                                            T(n)
                                                for each comparison- 1 element gets filled to output.
                                                number of comparisons bounded by number of elements so n.
                                                T(n) = T(n-1)+1 and T(2)=1, so T(n) = n-1
                                        T(n) = 2T(n/2)+O(n)
                                            = O(nlgn)
                                    DAC- another approach
                                        aka Quick sort- you knew names b4- this is how they come up with programs.
                                        Divide- using arrangement using pivot- using criteria (on left < on right)
                                        sort them recursively
                                        merging is trivial.
                                        T(n)
                                            depends on which element is picked as pivot
                                                rank of an elt- its position in sorted order of the array.(?index+1)
                                                if pivot has rank i, then
                                                T(n) = T(i-1)+T(n-i)+n.
                                                    n is partition time.
                                                    if i=1 or n-1, then T(n) = T(n-1)+n = O(n^2)
                                                    if i=n/2, then T(n) = O(nlgn)
                                                        if i can find median in linear time then O(nlgn) still.
                                                        find element of rank FLOOR(n/2)
                                                        If I sort and then tell O(nlgn)- by the way what are we solving it for.
                                                        first non-trivial algo you will see- refer to medianFinding tag.
                                </Sorting>
                                <MedianFinding>
                                    assume all elements are distinct- just to make it simple.
                                        But works for non-distinct also
                                    If we had to use DAC, how could we possibly divide.
                                    Approximate median = {x| n/4 < rank(x) < 3n/4}
                                        we can partition on x (approx median) => tell its rank
                                        1 side will be gotten rid of. so array is shrunk by constant factor.
                                        T(n) = n + T(3n/4)  then still T(n) = O(n)
                                        Producedure
                                            Approx median- no clue how come up with- think about problem so much at certain point it clicks.
                                                divide array into a group of 5- median of medians of all these groups- that's approx median.
                                                Proof- 
                                                    draw the array with each group horizontally.
                                                    arrange vertically (for conceiving- not programmatically)- all smaller medians on 1 side and other.
                                                    the middle element is greater than and less than n/4- so approx median.
                                                what is this? 
                                                    finding median to find median? smaller size to n/5- recursion.
                                            approxMedian = FindElt(n/2,A)
                                    suppose wlog, left side Array < n/2.
                                        then rank in right array, gotta be s.t, |Al|+1+r = n/2
                                            r = n/2 - |Al| - 1
                                        partition A into Al and Ar on approxMedian.
                                        3 cases
                                            if |Al| = r - 1, then return x.
                                            if |Al| > r - 1, FindElt(r,Al)
                                            if |Al| < r - 1, FindElt(r-|Al|-1,Ar)
                                        So procedure to find any rank, more generic problem 
                                            (median is specific- rank proves to be easier to solve)
                                            this is also 1 design principle- solve generic version of the problem.
                                            Input Array A and r, output element of rank r.
                                                find approx median x, partition the array on x.
                                                    update the value of r if needed.
                                                    so gotta find approximate median of an array.
                                        FindElt(r,A){
                                            partition A into n/5 groups
                                            find median of each group, put them in array B
                                            FindElt(n/10,B);
                                        }
                                    T(n)
                                        Bubble sort- for n/5 groups- c1.n
                                        Subproblem- T(n/5)
                                        Partition- n
                                        update rank- 1 or 3n/4 (upper bound cuz other side >= n/4)
                                        = (c1+1).n + T(n/5) + T(3n/4)
                                        = sum of n/5 and 3n/4 is less linear- so it ends up with linear behavior
                                        Assume T(n) <= cn (find right c)
                                            c >= 20(c1+1)
                                            Induction used to solve.
                                </MedianFinding>
                            </Induction>
                            <OrderingTheInput>
                                Right choice of Data Structure
                                increasing order of array.
                                Condusive atmosphere for problem.
                            </OrderingTheInput>
                            <StoreNecessaryValues>
                                Store necessary values already computed.
                                    Make most out of your every bit of effort
                                    here temp variable is necessary value.
                            </StoreNecessaryValues>
                            <Reduction>
                                Reduce solution of a problem to a pre-existing problem whose solution is known.
                            </Reduction>
                            <Optimization>
                                Combinatorials
                                    Generate all possible solutions (candidates)- from scratch (reject some branches, favor some branches, etc)
                                        Partition into subspace- recurse on each part.
                                    Backtracking
                                        Branch And Bound / Pruning
                                            Associate a cost function to determine when to prune.
                                        Dynamic Programming
                                            = Recursion + Compute Every value only once.
                                            Can be thought of as DAC on Search Space
                                            Characterize the recursive calls (in terms of parameters or state of system)- make all possibilities by taking cross product of them- table.

                                            Top Down- keep storing as you recurse.
                                            Bottom Up- start with filling table
                                        Greedy Approach
                                            Scheduling Priority Based
                                            MIS Finding
                                            Job Scheduling
                                            Dijkstra
                            </Optimization>
                            <GraphTheory>

                            </GraphTheory>
                            <Geometry>

                            </Geometry>
                        </Techniques>
                        <Examples>
                            Arrays
                                Find subarray with given sum - Backtracking and DP - do not use another branch if already traversed somewhere or some part of it.
                                    with negative numbers - DP - Already have all necessary information on 1 branch - Cumulate the sum and subtract with missing sum.
                                Find sum triplets - right DS - HashMap on elements and then PnC concepts for every number 1 to max.
                                Largest sum contiguous subarray - BnB - reset to 0 when contiguous sum becomes negative. Single iteration of array. remember best found yet.
                                Find the missing number - Ingenuity - S(n) - sum of array elements, XOR.
                                merge without extra space - Ingenuity - Merge 2 sorted arrays - proceed from right of both sides and swap in quicksort kinda fashion.
                                ...
                            String - 
                            Linked List
                            Stack and Queue
                            Tree and BST
                            Heap
                            Recursion
                            Hashing
                            Graph
                            Greedy
                            Dynamic Programming
                            Divide and Conquer
                            Backtracking
                            Bit Magic
                        </Examples>
                    </DesigningAlgo>
                    <NPCompleteness> aka Approximation Algorithms
                        refer to study material
                    </NPCompleteness>
                </Algorithms>
                <DSA> By richard buckland
                    <AssumptionsAndCourseFocus>
                            Assumption that everyone knows how to program
                                    Loops,nested loops,1D array,2D,functions,recursion,Pointers,memory allocations- static and dynamic, traversing a tree- checking for a ring.
                                    You know the tools in your hands well, you know how to implement or express the ideas in form of program s.t. they are accepted by PC.
                                    Capabilities of Programming- how to best harness them (structuring data and manipulating the data)
                            This course is a function from  students to students- from knowing how to program to computer scientists.
                                    Precondition- input struct student is a precondition- conditions that we have to satisfy
                                            Eg- dividing 2 numbers- precondition- overhead of checking- divisor is not 0- no contribution to functionality
                                            Assert false/true. We know some malicious data can enter in spite of care and wreak havoc.
                                    Postcondition- expected outcome of function that others can count on.
                            1 small step for man- giant leap for mankind.
                                    May have colonies later on. Act is trivial but meaning is huge.
                                    Previous course was looking at small steps- mechanics of program. This course is about the meaning- what this course does to you.
                                    What impact one small change somewhere in the system can have on the whole world. Like solving 1 NP problem
                            And the way we do things have their implications on time,psychology,social impact,etc.
                        <Ref>
                            Books- Art of computer programming- 1,2,3 are good books. Very clever guy- very analytical presentations.
                            algo in general- why need to classify algos.
                            Dealing with numeric properties.
                            3rd books- sorting and searching totally.
                        </Ref>
                    </AssumptionsAndCourseFocus>
                    <ComputationProcess>
                        Follows PAPP
                        <Problem>
                            Problem- We have a real life problem which we express in computational terms or mathematically.
                                    Transition- solve the problem using some algorithm- some way of doing things- permutation of simple and basic understandable step that solve the problem.
                                    We formally define the problem (in mathematical terms) the solution procedure to which will solve all instances of the problem.
                                    Eg- Sorting is a problem- Sort(A,5) for {1,3,5,2,9} is an instance.
                                    Our function code behaves sth like a function- s.t.for n numbers as inputs maps to a number.
                            Solve a problem means given any input instance(infinitely such) satisfying the specification, your algo will deliver the outcome.
                                Every Problem demands a Procedure which will solve all input instances conforming specification.
                                Eg- Input given a streak of numbers, Output- a sorted non-decreasing sequence of natural numbers.
                            <Types>
                                Decision Problems
                                Computation Problems
                                Optimization Problems
                            </Types>
                        </Problem>
                        <Algorithm>
                            <Defn>
                                Procedure is a proposed solution (in computational (PL capable) terms) which solves the problem (but may not halt on all inputs)
                                Algorithm- Outline (essence) of a computational procedure in terms of step by step instructions.
                                    Infinitely many algos possible for a problem.
                            </Defn>
                            <Puzzle>
                                Algorithms are some Puzzles- Lightly.
                                Algorithm is how we approach a problem in life.
                                <Eg> This is just for entertainment purposes- our algos will be somewhat different.
                                Situ- TT,Liars amongs {Mars,venus}X{man,woman} s.t {MM-T,MW-F,VM-F,VW-T}
                                Assume- 
                                    can't tell man and woman from seeing. 
                                    they don't say english? They say USA english.
                                Problem- Tell their planets by asking them 1 Question                            
                                Thought Process- Make list of possible questions and how they will respond- what the answer reveals about the person (MM,MW common reply and others different)
                                Solution/ Algorithm- 
                                    would your partner say you come from venus?
                                        4 combinations so we can brute force it.
                                        what would each one of them say- Marsian would say Yes. Venus would definitely say No.

                                Problem- what question to ask them to work out if male or female- 
                                Solution- 
                                    does your partner lie- everybody will say yes.
                                    do you come from mars? Males will say yes. women will say No.

                                Problem- 1 question to ascertain gender and planet?
                                Answer- You can't.
                                Proof- 
                                    you have 2 answers and 4 states so can't get enough information.
                                    when we talk information- we represent i/f in bits.
                                    theory of information- 1 bit of i/f ascertains 1 of 2 states. 2 ascertain n states we need log n base 2 bits.
                                        eg- 10 states- 4 bits of information- why not 3- that ascertains 8 states.
                                </Eg>
                            </Puzzle>
                            #Algo are everywhere- what's the best way for me to do this job- save TME.
                            Transition- Implement the algorithm in PL of our choice and get next stage a program.
                            Our Focus here- Given a problem how do we come up with best algorithm (and Data structuring included) for it
                                the best one AND the difference that it makes- the meaning!! 
                                    Eg- step for a man vs for man, giant leap for mankind.
                                more of a mental Displine in coming up with the best methodology to solve any Problem instance.
                                    Take a break- for focus; don't freak- switch to sth else.
                                    being systematic (complete)
                                    <ChoosingTheBest>
                                        <Variety>
                                            Many ways to solve a problem- we want to choose the best
                                            We learn that we think we know all ways- sth new comes up.
                                            REL Non intuitive Bubble Sort was learnt showed to brother and told how beautiful and brag in front.
                                                He came up with newer better way. Of course, he had done selection sort- it is more natural
                                                As scientist I should have generalized and proven that nth better can come up.
                                            Eg- Computing Averages of array till i- adding up all numbers till i for all i and dividing by i.
                                                vs compute result of an i- add next number and average it out- O(n) vs O(n^2)- which one will take more time.
                                            <Types>
                                                Iterative- using loops
                                                Recursive- fn calls smaller version of itself and smallest version has a known solution
                                                Observations
                                                    Problem solved by Iteration can be solved using Recursion- so none more powerful than other.
                                                    If none of these in a program, it means program is independent of input size (constant)
                                            </Types>
                                        </Variety>
                                        <Classification>
                                            <Advantages>
                                                Abstraction- 
                                                    Replace a code with better performing code for same problem situ- inter-change them that's called abstraction.
                                                    Which code fits better in which situ.
                                                Reductions
                                                    NP Algo (NPC)
                                                        If 1 element of a set of similar probs solved- means we may have solution for all of them.
                                                        Other set of problems that were waiting for the solution from this set- sort of dependent on this set of algorithms now may enjoy better time.
                                                            @1 small step for a man, a giant leap for a mankind- Amstrong's words and not- Chicken Shit! Look at the dust.
                                                    P Algo
                                                        We can reduce problems to standard solutions and get the best of all worlds advantage.
                                            </Advantages>
                                            <Criteria>
                                                <Ease4Programmer>
                                                    Neat,well-commented,helpful to user in maintenance sense.
                                                    Brute Force- easy construction but bad performance!
                                                    We are talking algo here not programming
                                                </Ease4Programmer>
                                                <Ease4User>
                                                    Make it convenient for the User.
                                                    <Factors>
                                                        Incorrect result- then it is not even an algorithm!
                                                            crashes due to a programming error! Robust/Resilient Code
                                                        Efficient
                                                        <Time>
                                                            Time the program takes to respond to an event/request.
                                                            Speed
                                                                Eg- Bubble sort- the time it took can be told in generic terms- no platform specific. Amount of work/comparisons
                                                                        In this case,9+8+7+...+1 = 45 comparisons
                                                                    vs selection- we can tell this will take lesser time.
                                                        </Time>
                                                        <Memory>
                                                            Program crashes due to stack overflow. The memory that a program takes.
                                                                Measured as extra space as fn of prob size.
                                                        </Memory>
                                                    </Factors>
                                                    <Measure>
                                                        <Subjective>
                                                            Execute In Environment and see which performs better over the inputs data sets(variety) of varying size (and compositions)
                                                                Measure actual running time (use methods like System.currentTimeMillis() in java)
                                                            Why don't we standardize some PC and use that as judge- We can't generalize that for all computers!
                                                                but prob here, may be 1 user's pc is best configuration vs IBM 76 and that's difference!
                                                                vs Measure as total amount of operations involved.
                                                            The 2 code that we tested on 2 computers
                                                                1 Prob, 2 Algo, 2 Programs (in same PL,OS)
                                                            Make different processes on different machines.
                                                                Other Factors Affecting Execution Time:
                                                                    memory management and indexing service and housecleaning in the background may be more for my mac
                                                                        doesn't matter or make significant differnce let's see how- slight hair difference- not gonna be relevant.
                                                                        Saving time over minor things and saving ms- be clever to think of those things
                                                                        Let's get 1000s cores, purchase supercomputer, use C it's 3 times faster than JAVA- nice but irrelevant in front of other factors.
                                                                    but most important thing is algorithm kills everything.                                            
                                                                        Huge Difference made by Algo 
                                                                        where does 3 times speed stand in front of 10x increase with every increment on problem size.
                                                                        List down the factors for speed up but keep algorithm on the top of the list. paging time and other things to get 1% inc etc.
                                                                        Fiddle around at A in PAPP because most important things.
                                                                        Best way to fiddle around is change the problem statement itself to address the real-life issue.
                                                                    REL IBM vs Apple
                                                                        Demonstration using IBM PC of older days using telnet to connect to it.
                                                                        Apple was way fast for smaller input and then for 12- Apple started fast but became slower and IBM became faster- time for the number to work on.
                                                                        Then IBM bet Apple for larger number- starting good though.
                                                                        Good Algo outperforms hardware. Rules, all that counts, eclipses.
                                                                    Limitations
                                                                        Need to implement to determine its run time.
                                                                        Limited set of inputs- not indicative of running time on other inputs not included.
                                                                        Using Same hardware and Software environment is necessary.
                                                                    @person may be very fast but he will have to do a lot of work with dumb procedure.
                                                                    Let's change the approach of sorting to sth else, dear sir!! sth like that.
                                                        </Subjective>
                                                        <Objective>
                                                            Objective Measure to prove sth better than other- things that won't change over machines.
                                                                Use a high level description of algorithms (program/implementation not necessary)
                                                                Overcomes shortcomings of subjective (first 3 limitations mentioned in subjective)
                                                                Amount of Effort (or number of fundamental operations) needed on part of any generic machine.
                                                                    in terms of primitive operations (written in pseudo-code)
                                                                Depends On
                                                                    As a function of input size
                                                                        factors like time and space grow with input size (other things not relevant to algos)
                                                                        how programs' behavior (efficiency in time) changes with changes in input size.
                                                                        input size: No of bits in an input number OR number of data elements (numbers, points)
                                                                    How (partially) sorted they are- nature of input
                                                                        done thru best,avg,worst case.
                                                                Eg- n(n-1)/2 number of comparisons required by the algo- figured out.
                                                            <RELBooks>
                                                            Sorting books how much work he has to do for n books.
                                                                minimum- n books has to touch each book once so at least n or more movements.
                                                                eg- for bubble sort- as the n gets bigger n^2 fades n or makes it irrelevant.
                                                                    Ignore constants in effort evaluation
                                                                        pulling a book is 1 bit of work or 2 bits.
                                                                        swapping is several bits of work- take multiple. so divided 2 doesn't make difference. 
                                                                        constants are any way ignored for bits of work may some 1.sth.
                                                                    Ignore low order terms- retain the highest order term.                                            
                                                                        We are using algo for high values of input size. For small input, choice of algo doesn't matter!
                                                                        what happens if I double the input size, the time quadruples.
                                                                        k(2n-1)(2n)/2 = 4kn^2/2 - kn	//1st terms sworns the 2nd for bigger values. k cancels each other. quadruples.                                            
                                                            </RELBooks>
                                                            <HerePC>
                                                            Now, Here In a pc, work is done by microcode or machine code is executed- every thing else is notation.
                                                                Intel most disgusting- million instruction- they get stuck- kitchen sink instruction- microsoft uses extensively-joking.                            
                                                                Different times by different machine instructions
                                                                    all microchips do different kind of work.
                                                                    multiply takes more time than adding. 4 cycles takes more.
                                                                        fetch x,fetch y and multiply -1+1+4 cycles. corpus chip in intel lets multiply do in constant time.
                                                                    floating points are slow one.
                                                                Eg- on mythical machine- let's call it 1009. eth inst takes 1 cycle.
                                                                    how long my program will take.
                                                                    store data in memory after parsing.
                                                                    set up stuff- sets up stacks, housekeeping, preamble sort of work- 20 instruction- 20 cycles to set stuff up.
                                                                    1.loaded in memory- n numbers how many cycles. set index to 0 1 bit of work
                                                                            loop checking if index = max number of array. read it in and write it out and update index and check if it complete
                                                                                    say 2+4n work to bring n numbers.
                                                                    2.k=n-2;
                                                                            load n, load k, load 2 in reg, subtraction,get value and write- 5 steps.
                                                                    3. 0 to k, compare the item with next item in following place
                                                                            set an index i, set to 0, compare with k,if greater than k then jump, find item k and load into memory,add 1 to it,get item there,compare,swap if necessary(6steps)- all sort of naive steps. so register not used.
                                                                            and cycle repeating.
                                                                    4 and 5 2 steps.
                                                                    total in all steps- 4+12(n-1).
                                                            </HerePC>
                                                            <TimeComplexity>
                                                                Defn- Categorizing algorithm in terms of their growth in computational effort with change in input size.
                                                                    Denoted by T(n)
                                                                Input Size
                                                                    How complex problem instance is- 1000 books or 2000 books- how much information goes into the system.
                                                                        to describe the problem.
                                                                        3 no easier than 10 inputs.
                                                                        information going into the system and work it does for it.
                                                                Assumptions
                                                                    Ignore Constants
                                                                        Hardware Dependent
                                                                        Graph starts from positive y-axis at n = 0. Why? Still some computation exists.
                                                                        Assume in machine cycles evaluation- 
                                                                            if to pick 1 out of the house?- 19 who care- does absolutely nothing.
                                                                            if constant term is ridiculously big we might not have removed it. 1 million let's say.
                                                                            imagine 1 million n and 19 is so small.
                                                                                    for reasonably big numbers even n also fades only 6000 in front of 6 quadrillion for n^2.
                                                                            coming back to our code whose machine code we worked on we figure out the machine thinking is really not necessary because the constants anyways die.
                                                                                So assume all instructions take unit time.
                                                                                looping and nesting is what works- its' cool.
                                                                        Not key in studying growth of factors with input size.
                                                                    For Bigger Input
                                                                        after a certain point, the growth follows this pattern.
                                                                    Ignore Lower order terms
                                                                        REL a code that does all good but makes a call to exponential function- it kills everything.
                                                                        Highest order term is the bottleneck
                                                                Cases/ Scenarios
                                                                    Input instance matters- algorithm may perform differently for different inputs.
                                                                    Best Case- When input is such that it takes the shortest time.
                                                                        Get my test cases right doesn't prove you right but vv.
                                                                            Already Sorted- reduced swaps or maybe early exit.
                                                                    Worst Case- When input is such that it takes the longest possible time.
                                                                        assumed that we swap everytime for bubble sort. swapping took 6 cycles.
                                                                        worst case for bubble sort- swapped everytime and best case- still n^2.
                                                                        in real life we look for average case. tend to look worst case- like space shuttle if eth goes at worst.
                                                                            It is an upper bound, and in certain application domains (eg- air traffic control, surgery),it is of critical importance.
                                                                                your prgm looks for all cases- worst case is what you have to defend against.
                                                                            For some algos, worst case occurs fairly offten
                                                                                not all inputs are equally likely- some are more likely than others.
                                                                                we joke but worst case happens far more often than avg. avg is diff to calc but we are CS.
                                                                                Finding average case can be very difficult.
                                                                                    Average case is often as bad as worst case.
                                                                    Average Case- On an average, a given input instance would take this much time.
                                                                Asymptotic Notations
                                                                    Asymptote- a straight line that approaches a curve but doesn't meet (finitely)
                                                                    Terms- Logarithmic, linear, quadratic, polynomial, exponential.
                                                                        These curves are a lot different in terms of their speed of growth.
                                                                            Largest solvable problem size for functions/hr- if 400n- 10^7; 2n^2- 5*10^4; n^4- 244; 2^n- 31.
                                                                            With increase in time, the solvable problem size stop growing as fast as we move from logarithmic to exponential.
                                                                    Big-O
                                                                        Big-O performs grows slower to which function- O(n) may be right but a poor analysis.
                                                                        lines intersect- which trend does my algorithm follows- after this threshold input size- the algo follows this function of growth.
                                                                        T(n) = O(g(n)) if T(n) <= c.g(n) for c BELONGS N and n > n0
                                                                            f(n) and g(n) are both non-decreasing functions of n.
                                                                        of course, we can give huge g(n) like n^n and it is true but poor analysis- we want tightest bound.
                                                                        You will not exceed this! Used for worst case analysis. Is it Worst case??                                                                        
                                                                        Eg- 2n+6 is O(n)- c=4, beyond a point of 3 = n0.
                                                                        !Eg- n^2 <=cn for n>n0. Never true. No matter how large a c is chosen, there is an n big enough that n^2>cn.
                                                                            So n^2 != O(n)
                                                                        !Eg- 50nlogn is O(n^5) but bad approximation (not analysis)
                                                                        Simple Rule- Drop lower order terms and constant factors.                                                                        
                                                                        Misused with Theta Notation.
                                                                    Omega
                                                                        Function grows faster than this function.
                                                                        T(n) = OMEGA(g(n)) if T(n) >= c.g(n) for c BELONGS N and n >= n0
                                                                        f(n) = 3n + 2 =? OMEGA(n^2) but can't find such c for n0; OMEGA(log(n))
                                                                    Theta (aka asymptotically equal)
                                                                        The growth function is bounded within function (different constants)
                                                                        It shows that you have made a good estimate of time complexity.
                                                                        THETA(g(n)) means BigO(g(n)) and OMEGA(g(n))
                                                                        If T(n) = 3n+2 = THETA(n)
                                                                    Little-O or Little Omega- Strictly less or greater.
                                                                        for every c, f(n)<=c.g(n) after n0.
                                                                    what would we rather have- linear algo or quadratic algo- because you are collector! 
                                                                    taking inspirations from each and better 1 from inspiration from other.
                                                                <Analysis>
                                                                    <Iterative>
                                                                        for(i=0;i < n;i++) for(j=0;j < n;j++) printf("Krishna");
                                                                            1st statement runs n times and for every iteration, 2nd statement runs n times (total of n^2 times), for every iteration of 2nd statement, 3rd statement executed once.
                                                                        i = 1,s = 1; while(s<=n){ i++; s += i;}
                                                                            s grows in steps of incremental steps of i- 1,1+2,1+2+3,... until it crosses n, let say it takes k iterations, k(k+1)/2 > n => k = O(sqrt(n))
                                                                        for(i=1;i^2 <= n;i++) printf("Krishna");
                                                                            O(sqrt(n))- 2nd clause is same as i < sqrt(n)
                                                                        for(i=1;i<=n;i++) for(j=1;j<=i;j++) for(k=1;k<=100;k++) printf("Krishna");
                                                                            if i = 1, j 1 times and k 100 times; if i = 2, j 2 times, k 200 times; if i = 3, j 3 times, k 300 times,...
                                                                            for i = n, j n times and k n*100 times so number of times Krishna is printed = 100*n(n+1)/2 = O(n^2)
                                                                        for(i=1;i<=n;i++) for(j=1;j<=i^2;j++) for(k=1;k<=n/2;k++) printf("Krishna");
                                                                            if i = 1, j = 1, k = 1*n/2; i = 2, j = 4, k= 4*n/2; i=3,j=9,k=9*n/2;
                                                                            n/2(1+4+9+...) = (n/2)*n(n+1)(2n+1)/6 = O(n^4)
                                                                        for(i=1;i< n;i*=2) printf("Krishna");
                                                                            i = 1,4,9,...till it reaches n. To find No of times, 2^k = n so log(n)base2
                                                                        for(i=n/2;i<=n;i++) for(j=1;j<=n/2;j++) for(k=1;k<=n;k*=2) printf("Krishna");
                                                                            i loop n/2 times, j n/2 times for every i iteration, k log(n)base2 times for every j iteration
                                                                            O(n^2.lg(n))
                                                                        for(i=n/2;i<=n;i++) for(j=1;j<=n;j++) for(k=1;k<=n;k*=2) printf("Krishna");
                                                                            ?O(n*log(n)^2)
                                                                        while(n>1) n /= 2;
                                                                            O(log(n))
                                                                        for(i=1;i<=n;i++) for(j=1;j<=n;j+=i) printf("Krishna");
                                                                            i n times, j values n,n/2,n/3,... so T(n) = n+n/2+n/3+..=O(nlogn)
                                                                        for(i=1;i<=n;i++){j=2;while(j<=n)j=j^2;}
                                                                            if iteration, k=1,n=4,j=2,4 so 2times; if k=2,n=16,j=2,4,16, so 3 times; if k=3,n=2^2^3=2^8, j=2,2^2,2^4,2^8, so 4times
                                                                            j loop runs for k+1 times for every n so n(k+1) = O(nlog(log(n))) = O(k.2^2^k)

                                                                    </Iterative>
                                                                    <Recursive>
                                                                        A function's time can't be calculated- cuz it's time depends on time taken by its smaller version
                                                                        So, T(n) = 2T(n/2)+c
                                                                        <Methods>
                                                                            <BackSubstitution>
                                                                                Traverse Backward and sustitute the vals. It stops for smalls known n say T(1) (base/ anchor/ stopping condition)
                                                                                A(n){if(n>1)return(A(n-1));}
                                                                                    Recursive Equation is T(n) = T(n-1)+1 so T(n-1)=T(n-2)+1 means T(n)=2+T(n-2); Generalizing, T(n)=k+T(n-k); choosing apt k, T(n)=n-1+T(1)=n-1+1=n so O(n)
                                                                                T(n)=n+T(n-1)for n>1,1 for n=1
                                                                                    so T(n-1)=n-1+T(n-2) means T(n)=n+n-1+T(n-2)
                                                                                    Generalizing, T(n)=n+n-1+n-2+...+n-k+1+T(n-k)
                                                                                    Choosing apt k (s.t n-k=1), T(n)=n+n-1+..+1+T(1)=n(n+1)/2
                                                                                    O(n^2)
                                                                                T(n)=2T(n-1)+1 so T(n-1)=2T(n-2)+1 and T(n-2)=2T(n-2)+1
                                                                                    T(n)=2^2.T(n-2)+2+1=2^3.T(n-3)+4+2+1=...=2^k.T(n-k)+2^(k-1)+...4+2+1=2^n+2^(n-1)+..4+2+1=O(2^(n+1))=O(2^n)

                                                                            </BackSubstitution>
                                                                            <RecursionTree>
                                                                                Follow Euler's tour of execution.
                                                                                T(n)=2T(n/2)+1 and c at n=1
                                                                                    T(n) work can be broken (on doing c amount of work) into 2 T(n/2)works.
                                                                                    further, the tree grows. when will the tree stop (leaves),
                                                                                    count number of elements in the tree or height of the tree and count work done at every level.
                                                                                    c,2c,4c,8c work in every levels upto T(n/n)so nc. So, it's a GP, c(1(2^(k+1)-1)/(2-1))=c(2^(k+1)-1)=2cn-c=O(n)
                                                                                T(n)=2(T(n/2)+n) and 1 at n=1
                                                                                    draw the tree. n work done at every level upto leaves. 
                                                                                    n/2^0,n/2^1,n/2^2,...,n/2^k for k+1 being the height, n=2^k at leaves so k = log n
                                                                                    Log n being the height- so nlogn
                                                                            </RecursionTree>
                                                                            <ComparingFunctions>
                                                                                Comparing Functions
                                                                                    which is bigger n^2 or n^3- strike off common factors and then compare.
                                                                                    go for larger values of n to compare them OR apply logs on b/s
                                                                                    or find growth rate- if n increases by 1 or doubles, what happens.
                                                                                    Find out its derivative to figure out its growth rate.
                                                                                    if 2 functions differ by constants then they asymptotically same.
                                                                                    (logn)^2 is different from (log^2)n is different from log(n^2)
                                                                                    Eg- n^2 vs 2^n- apply logs- 2logn vs n- substitute 2^100 and check which wins
                                                                                        3^n vs 2^n- apply logs- nlog3 vs nlog2- n stikes off, log3 wins.
                                                                                        n^2 vs nlogn- strike off n vs logn- substitute and n is larger.
                                                                                        n vs (logn)^100- apply logs- logn vs 100log(logn)- take 2^128- 128 vs 700.
                                                                                            but take 2^1024, 1024 vs 1000- n is growing more!!
                                                                                        n^(logn) vs nlogn- can't stike off, exponents, so logs, logn.logn vs logn+log(logn)- for 2^1024- 1024^2 vs 1034.
                                                                                            or 2^2^20
                                                                                        sqrt(logn) vs log(logn)- apply logs to strike off exponents, 1/2*log(log(n)) vs logloglogn, take 2^2^10, 5 vs 3.5
                                                                                        n^sqrt(n) vs n^logn- sqrt(n).logn vs logn.logn- strike through, sqrt(n) vs logn- logs again, 1/2logn vs loglogn- for 2^128,64 vs 7.
                                                                                        {n^2 upto10000,n^3 henceforth} vs {n upto 100 vs n^3 henceforth} comparing growth functions, we check for infinity.
                                                                                            both using the same function after 10000. make a table of what they used over a range.
                                                                                        2^n vs n^(3/2) vs nlogn vs n^(logn)- 2^n is likely to win, compare using logs,
                                                                            </ComparingFunctions>
                                                                            <MasterTheorem>
                                                                                Good for exams- cook book- no thinking- just do it.
                                                                                    refer to Roughgarten's lecture
                                                                                T(n)=aT(n/b)+THETA(n^k.(logn)^p) for a>=1 and b>1 meaning many subproblems (of smaller input), k>=0 means never do reciprocal work! and p is real number
                                                                                    if(a>b^k),then T(n)=THETA(n^(log(a)base(b)))
                                                                                    if(a=b^k),then T(n)=
                                                                                        if p>-1,then T(n)=THETA(n^(log(a)base(b)).(logn)^(p+1))
                                                                                        if p=-1,then T(n)=THETA(n^(log(a)base(b)).(loglogn))
                                                                                        if p<-1,then T(n)=THETA(n^(log(a)base(b)))
                                                                                    if(a < b^k),then T(n)=
                                                                                        if p>=0, then T(n)=THETA(n^k.logn^p)
                                                                                        if p<0,  then T(n)=THETA(n^k)
                                                                                Eg-
                                                                                    T(n)=3.T(n/2)+n^2
                                                                                        a< b^k
                                                                                        T(n)=THETA(n^2.logn^0)=THETA(n^2)
                                                                                    T(n)=4T(n/2)+n^2
                                                                                        a=b^k (cuz a=4,b=2,k=2,p=0)
                                                                                        T(n)=THETA(n^2.logn)
                                                                                    T(n)=T(n/2)+n^2
                                                                                        a=1,b=2,k=2,p=0
                                                                                        T(n)=THETA(n^2.logn^0)=THETA(n^2)
                                                                                    T(n)=2^n.T(n/2)+n^n
                                                                                        a=2^n,b=2,k=n,p=0; Master Theorem applies to constants not polynomials. So Not Applicable.
                                                                                    T(n)=16.T(n/4)+n
                                                                                        a=16,b=4,k=1,p=0
                                                                                        a>b^k, So, T(n)=THETA(nlogba)=THETA(n^2)
                                                                                    T(n)=2T(n/2)+nlogn
                                                                                        a= b^k and p>-1
                                                                                        T(n)=THETA(nlogba.log.p+1n)=THETA(nlog^2n)
                                                                                    T(n)=2T(n/2)+n/logn
                                                                                        a=2,b=2,k=1,p=-1, a=b^k and p=-1
                                                                                        T(n)= THETA(nlogba.loglogn)=THETA(nloglogn)
                                                                                    T(n)=2T(n/4)+n^0.51
                                                                                        a< b^k and p = 0
                                                                                        T(n)=THETA(n^k.logn^p)=THETA(n^0.51)
                                                                                    T(n)=0.5T(n/2)+1/n here a !BELONGS N so NA
                                                                                    T(n)=6.T(n/3)+n^2.logn
                                                                                        T(n)=THETA(n^k.logn^p)=THETA(n^2.logn)
                                                                                    T(n)=64.T(n/8)-n^2.logn //meaning if we don't do work problem is getting divided into subprobs
                                                                                        NA- this is not valid
                                                                                    T(n)=7T(n/3)+n^2
                                                                                        a< b^k, p>=0
                                                                                        T(n)=THETA(n^2.logn^0)=THETA(n^2)
                                                                                    T(n)=4T(n/2)+logn
                                                                                        a>b^k
                                                                                        T(n)=THETA(n^log4base2)=THETA(n^2)
                                                                                    T(n)=sqrt(2).T(n/2)+logn
                                                                                        ?NA
                                                                                        a>b^k so T(n)=THETA(n^log(sqrt2)base2)=THETA(sqrt(n))
                                                                                    T(n)=2T(n/2)+sqrt(n)
                                                                                        a>b^k
                                                                                        T(n)=THETA(n)
                                                                                    T(n)=3T(n/2)+n
                                                                                        THETA(n^log3base2)
                                                                                    T(n)=3T(n/3)+sqrt(n)
                                                                                        THETA(n^log3base3)=THETA(n)
                                                                                    T(n)=4T(n/2)+cn
                                                                                        a=4,b=2,k=1,p=0
                                                                                        THETA(n^2)
                                                                                    T(n)=3T(n/4)+nlogn
                                                                                        THETA(n^1.logn^1)=THETA(nlogn)
                                                                                    T(n)=T(n-1)+1
                                                                                        NA
                                                                            </MasterTheorem>
                                                                        </Methods>
                                                                    </Recursive>
                                                                </Analysis>
                                                            </TimeComplexity>
                                                            <SpaceComplexity>
                                                                Similar to Time Complexity
                                                                How many memory cells are reqd to finish the program.
                                                                    Inplace Algorithm- 10 extra cells- then O(1)
                                                                        no auxiliary DS reqd (only replace,swaps,etc)
                                                                        Eg- in sorting- bubble, selection, heapsort, Quicksort.
                                                                            !mergesort (merging reqd), !Radix Sort (buckets is indpendent of n, but nodes we make. can we make it independent?)
                                                                    If n extra cells- then O(n) and so on.
                                                                    Y? We try to decrease the extra space a program is taking.
                                                                st there are trade off between time and space complexity.
                                                                <Iterative>
                                                                    Algo(A,1,n)
                                                                    {for(int i=1;i< n;i++) A[i]=0;}
                                                                        Space reqd = n + 1 but won't count n as it is given input- so O(1)
                                                                    {int i; create B[n]; for(i=1 to n) B[i]=A[i];}
                                                                        Extra Space Reqd = n + 1 so O(n)
                                                                    {Create B[n,n]; for(i=1 to n) for(j=1 to n) B[i,j]=A[i,j];}
                                                                        S(n)=O(n^2)
                                                                </Iterative>
                                                                <Recursive>
                                                                    <TreeMethod>
                                                                        for small programs
                                                                        A(n){if(n>=1){A(n-1);printf("%d",n);}}    //Head-Recursion,tail,body
                                                                        A(3) calls A(2) and prints and A(2) calls A(1) and prints- total no of recursive calls=n+1
                                                                            Traverse the tree- top to down, left to right- A(3) on stack, then A(2) on stack, thru A(0) on stack- popped out- print 1, then print 2 so forth
                                                                        Every stack record will occupy a constant space (of return address), k cells by 1 recursive call * no of recursive calls
                                                                            Total space = O(kn)=O(n)
                                                                            T(n)=T(n-1)+1   //Use backward substitution.
                                                                        A(n){if(n>=1){A(n-1);print(n);A(n-1);}} //Very few lines so tree method
                                                                            A(3) calls A(2),print and A(2) and A(2) again calls A(1),prints and A(1).
                                                                                15 times A is called- had it been for 2- 7, for 1- 2= what's the pattern.
                                                                                for A(n), it takes 2^(n+1)-1 recursive calls in total but not in 1 go- but stack doesn't require all at once- it grows and contracts thru process.
                                                                                Analyse thru stack that it grows till A(0) (leaf) and then pops,push as needed- analyse that stack never wants more than 4 cells for A(3)!
                                                                                    Generalizing the stack always needs height or n+1 cells at max and each occupying constant space k.
                                                                                    kinda every A(i) has its place on the stack of calls.
                                                                                    So, S(n)=O(k(n+1))=O(n)
                                                                                what is printed? 1213121. It is interesting that A(2) prints 121 on both sides- why call it twice (compute once and use anytime!- called dynamic programming!)
                                                                                    1st branch has to be taken- A(3) calling 2,1,0 then in a table- A(0) is remembered and then A(1) is remembered- other branch will tell the answer straight away.
                                                                                    In dynamic programming, I will have to add the table to remember the outcomes!
                                                                                        it will save time of computing but not space!!
                                                                    </TreeMethod>
                                                                    <StackMethod>
                                                                        calculate the height of stack as in Tree method- tree method doesn't check height but pattern!!
                                                                    </StackMethod>
                                                                </Recursive>
                                                            </SpaceComplexity>
                                                        </Objective>
                                                    </Measure>
                                                    <CleverestIdeas>
                                                        so much natural and beautiful- seems so obvious and no credit- but thought process was so beautiful
                                                        Even for music before they are natural.
                                                        But very easy to implement for programmer.
                                                        Go Home and figure out for yourself. We all do it just be conscious or think of craziest ways.
                                                    </CleverestIdeas>
                                                </Ease4User>
                                            </Criteria>
                                        </Classification>
                                        <ComputerScienceIsScience>
                                            <ScientificMethodologyApproach>
                                                <Observe></Observe>
                                                <Hypothesis>
                                                        (model to generalize for predictions)
                                                        what could be happening under the surface in terms of what I know or imagine
                                                        Can I generalize this phenomena and claim that this was just an instance of that law!!
                                                </Hypothesis>
                                                <Experiment>
                                                        experiments are repeatable- universal and not specific
                                                </Experiment>
                                                <Observe>
                                                observe (gather info case by case- categorically,possibilites- abstraction)
                                                        !Eg- there is a person in cupboard who is not visible as soon as I look at it and I turn and it's there.
                                                        we can't call that science since not measurable.
                                                    <Classification>
                                                                Or Grouping.
                                                                Eg- Darwin finches- didn't take home and eat them. Found out that new species! How do we know all of the species to compare with!!
                                                                        classify them and it becomes easy to do. Putting things in groups.
                                                                        Eg- trees. how to classify
                                                                                leaves- general shape of leaf.
                                                                                reproductive system of trees.
                                                                                obserable things only. Extrinsic characteristics.
                                                                                        Genetics was not possible on those days.
                                                                                                Gene sequencing- so easy to tell different species.
                                                                                        Such micro-things increase our observable scope.
                                                                                eg- flora guide to tell-
                                                                Eg- Minerals- Nice! all over the world but exhibit some properties which can be harnessed- how to keep track of all of them. May look similar but are different and vv.
                                                                        how classified minerals
                                                                                hardness
                                                                                chemical properties
                                                                                physical appearance and smell etc.
                                                                                shape- no! these can be changed.
                                                    </Classification>
                                                    <Abstraction>
                                                        Abstraction- This is the purpose of all classifications we did. So, that we can easily do maths on the set and the properties that hold for the subset.
                                                                What to do and not how- this is just eg.
                                                                we can classify function looking at their source code but intrinsic behavior- for minor differences- I won't like putting them in different category.
                                                                        over a comment added they are different and can't replace them- we want something else measurable.
                                                                        It's like saying chinese elm is not that if it has 1 leaf less. We don't care about 1 leaf different color or different. Things we don't care about. Whether you move this or that. whichever algo? If same output is same.
                                                                We can't do science without throwing some stuff away.
                                                                        Eg- comparing 2 balls before using in an experiment- what features do I care about. And I abstract all other properties- asphalt is that no matter where you pick it from so while doing experiment I really don't care where it came from!
                                                                        Like the way we learn number system- we use 3 as 3 balls, birds and then throw all these stuffs away and what remains is 3. Number of things- it can be anything.
                                                                        Triangle no matter where- which shape,size,tilt- if 90degrees will hold pythagorus theorem. we abstract away all the details and work out only simple generic geometry at that time.
                                                        Elements- on number of protons and electrons- neutrons make isotopes. Which sulphur don't care- use it- abstract it on properties.
                                                    </Abstraction>
                                                </Observe>
                                                <ProvePropositionWrong>
                                                try hard to prove the proposition wrong
                                                        Generalizing a phenomena or a model is quite a task.
                                                                we don't prove hypothesis but we disprove hypothesis
                                                                        we work really hard to somehow prove it wrong
                                                                        if true "everywhere"(?)- we take it as acceptable theory
                                                                        make presumption.
                                                                Experiments can't prove sth right- they just prove it either not wrong over the conditions or wrong in universal sense.	
                                                                        1 experimentation and declaring based on that is wishful thinking
                                                </ProvePropositionWrong>
                                                <Predictions>
                                                        Accept and generalize and make predictions in all realms based on that.
                                                        We take advantage of predictions and make applications,technology which implement in social realm for e1's good.
                                                </Predictions>
                                                <Update>
                                                        Any Exception to a prediction based on the thesis demands an update on the theory and the theory can't be taken as universally true but specific to a domain at most.
                                                        This prediction is a great asset.
                                                </Update>
                                            </ScientificMethodologyApproach>								
                                            <CompareMathsScienceEnggTech>
                                                VS maths,science,Engg,tech- They follow layered architecture in the sequence.
                                                        engg- 
                                                                Engineering is both a discipline/field of [specialized/(case specifics of science but generic to situations)] study
                                                                application of the knowledge (scientific) to create or produce something such as products and something structural.
                                                                that imparts scientific knowledge of designing and building structures, machines, materials, systems and processes as well as application of this knowledge for production of all such categories
                                                        Technology- application of knowledge gained through science and engineering fields to make or produce complex structures
                                                                first used for ability of human beings to convert natural resources into tools for use.
                                                                indispensable for growth of infrastructure and economic development
                                                                        advancement and betterment of human life by avoiding tensions (under categories).
                                                        CS Systematic study of computing- Computer Science and Engineering
                                                                Computer Science
                                                                        a lot of principles involved makes it science
                                                                                eg- bottom up approach of coming up with models in TOC ( what machine we can never build),can't get an algorithm better than that in time,digital logic-COA. When OS creeps in and why!
                                                                        Eg- All Data Models and Relation Algebra/Calculus is Computer Science.
                                                                Computer Engineering
                                                                        driven approach to harness the capabilities and algorithmic designs makes it engineering.
                                                                        We take "services" from Computer science.
                                                                        Eg- Study of DBMS is engineering.
                                                                Information Technology									
                                                                        Making use of the engineering principles learnt and solving real world problems- developing or using such tools.
                                                                        Eg- Oracle, Mysql are technologies.
                                                                Computer science uses mathematics
                                                                        maths is when you abstract away from situations (they don't affect this scenario or I just remember the essence of those who interact) and take a problem at hand and use logics to derive a conclusion.
                                                                        Science used the application of science.
                                            </CompareMathsScienceEnggTech>
                                            <CompareSuperstitions>
                                                vs Superstitions which people may just believe without questioning.
                                            </CompareSuperstitions>
                                        </ComputerScienceIsScience>
                                        <DataStructures>
                                            #Data structures are everywhere- many mails- random synthesized things we go thru in life.
                                                important is to take content and put the information data in some DS (like calendar) and apply some strategy on DS- I will see this list in morning everyday.
                                                Our room decoration for easy access is a data structure. How I arrange my books- Why I do them? to save time, effort, from unwise decisions (buy sth that I had already)
                                                Smartphone- calendar- remind me at that time that I should do; todo- reminders at market,google,etc; notebook- any good reflection or point heard. Inventory of household (when &lt; half, note in ToDo)
                                                Structuring of clothes- Number of pants,shirts,jeans,Tshirts be co-prime. Using hangers to your advantage (save thinking same probs over and again)
                                            Organization of Data needed to solve the problem.
                                                All variables scattered
                                                Arrays
                                                Struct
                                                And ordering, extra Informations, etc.
                                            In attempt to solve a problem in best possible way- some data structures get developed (advantageous for certain situations)
                                            ADT gives requirement specification for algo solutions.
                                                <Stack>
                                                    Stack- is a container of objects which does CRUD following LIFO (Last-In-First-Out) Principle.
                                                    Array Based Stack
                                                        An array-  to store elements 
                                                        an integer variable- to remember the index of topmost element (for push/pop)
                                                        Implementation- 
                                                            public class ArrayStack implements Stack{
                                                                public static final int CAPACITY = 1024;    //default capacity
                                                                private int N;  //max capacity
                                                                private Object S[];     //array of dynamic size
                                                                private int t=-1;   //top of stack
                                                                public ArrayStack(){this(CAPACITY);}
                                                                public ArrayStack(int cap){
                                                                    N=cap;
                                                                    S=new Object[N];
                                                                }
                                                                public int size(){
                                                                    return(t+1);
                                                                }
                                                                public boolean isEmpty(){
                                                                    return(t<0);
                                                                }
                                                                public void push(Object obj) throws StackFullException{
                                                                    if(size()==N)
                                                                        throw new StackFullException("Stack Overflow");
                                                                    S[++t] = obj;
                                                                }
                                                                public void top() throws StackEmptyException{
                                                                    if(isEmpty())
                                                                        throw new StackEmptyException("Stack is empty");
                                                                    return S[t];
                                                                }
                                                                public Object pop() throws StackEmptyException{
                                                                    Object element;
                                                                    if(isEmpty())
                                                                        throw new StackEmptyException("Stack is Empty");
                                                                    element = S[t];
                                                                    S[t--]=null;
                                                                    return element;
                                                                }
                                                            }
                                                        Analysis- 
                                                            Push- O(1)
                                                            Pop- O(1)
                                                            Top- O(1)
                                                            Limitation- limited by size of array.
                                                        Applications-
                                                            Span (Si) of Stock Price for a day- Maximum number of consecutive days (upto current day i), the price of the stock has been less or equal to its price on day i.
                                                                Find Span!
                                                                    Inefficient Algo- for every day i (from 0 to n-1), trace backwards until find a biggie or the list ends.
                                                                        O(n^2) in time.
                                                                    Better Algo- 
                                                                        for any day 7, the previous biggie could be - 8,10,7,5,9,3,6- 10,9 or 3 (at i=2,5 or 6)- work it out thru and tell where is extra work.
                                                                            use histogram.
                                                                        7 cmp 10, 10 is biggie, stop. for 6, 3 is smaller, why compare in sequence, just remember the biggie for 3 and compare with that (i have already found index which is greater than 3 on right traversal)
                                                                        Maintain a stack of biggies (candidates for span calc) and latest.
                                                                            for every number, pop last element on stack, if number < stack element, push back stack element and then the number; it's span is to itself.
                                                                            else keep popping until a bigger stack element is found, insert back bigger stack element, and then current element (only candidates for span)- span is from current to biggie.
                                                                                if stack ends, push the only element on stack and its span is till 0.
                                                        Growable Stack- 
                                                            in push operation, if size()=N, then make a new array of double size and copy older elements to it and then add new element.
                                                            Here push operation would take O(N) time after N push ops.
                                                            Total Push ops if f(N) is array size gonnabe, f(N)+floor(f(N)/N)*N- ?Think Again
                                                            Convenience sake call f(N) as n (no of cells)
                                                            Tight Strategy- grow linearly- 4+8(=4+1+1+1+1)+12(=8+1+1+1+1)+16(=12+4)+...+f(N)=4n(n+1)/2
                                                            Growth Strategy- double everytime- 1+2(=1+1)+4(=2+1+1)+8(=4+1+1+1+1)+16(=8+1+1+1+1+1+1+1+1)+..+f(N)= 2n- WINS.
                                                            T(n) lesser for growth strategy.
                                                    LL based Stack- add in front of Linked List and remove from the front. For size, maintain a separate count.
                                                </Stack>
                                                <Queues>
                                                    Queue- is a container of objects which does CRUD following FIFO (First-In-First-Out) Principle.
                                                    Operations- 
                                                        New():ADT- creates an empty queue.
                                                        Enqueue(S:ADT,o:element):ADT- insert at the real end
                                                        Dequeue(s:ADT):ADT- Remove from the front.
                                                        FRONT(S:ADT):element
                                                        Also,
                                                        Size(S:ADT):integer
                                                        IsEmpty(S:ADT):boolean
                                                    Axioms- Front(Enqueue(New(),v))=v, and more (refer to notes, IITD)
                                                    Implementation-
                                                        Array Based
                                                            Array
                                                            2 integers- indices for front and rear- first element is on front and rear is the next to be enqueued (no element there at present)
                                                            Circular- "wrapped around" configuation- we aren't going to (shift all elements or have unlimited array)
                                                                Emptiness- f=r means? empty list.
                                                                size- f>r?((N-1)-f+1)+(r-0):r-f; or (N-f+r)mod N
                                                                Enqueue- if size()!=N-1, Q[r] = o; r=(r+1) mod n
                                                                Dequeue- if !IsEmpty, f = (f+1)mod n; return Q[f-1];
                                                        LL Based
                                                            2 pointers- head be front node of Q (front) and tail be last node of LL (rear) (why not opposite? Removing from tail is impossible- cuz tail pointer can't go back the LL as we remove elements)
                                                        Variant- Double Ended queue (Deque) suppors CRUD from either ends- 
                                                            InsertFirst,InsertLast,RemoveFirst,RemoveLast,First,Last.
                                                            Need Doubly Linked List for that- to make tail move backwards.
                                                                Null in the extremes. May keep sentinel nodes at extreme ends.
                                                            All O(1) time.
                                                            Adaptor Class/Pattern- Implement 1 class by using/adapting methods of other.
                                                                Stacks Implementation thru Deque- Use 1's methods for others. Push-pop thru insertLast, removeLast.
                                                                Queue thru Deque- Enqueue- InsertLast and Dequeue- removeFirst.
                                                                Can be done by specializing a general class- eg- IntegerArrayStack adapts ArrayStack.
                                                            Can use Circular Doubly LL with only 1 pointer as entry point- can make any DS discussed above with slight changes.
                                                </Queues>
                                                <Sequences>
                                                    <Vector>
                                                        supports following methods:
                                                            ElemAtRank(r),replaceAtRank(r,e),InsertAtRank(r,e),removeAtRank(r)
                                                            Array Implementation
                                                                InsertAtRank(r,e)- shift all element from r to n by 1 (O(n)time),write e at r.
                                                                removeAtRank(r)- shift left all elements from r+1 to n-1 (O(n)time)
                                                                Other O(1)
                                                            Doubly LL based
                                                                Use getNext if rank is less than size()/2 else use getPrev.
                                                                Full advantage with nodes given as input parameters(removeAtNode(Node v) in O(1)) but this violates ADT generality.
                                                    </Vector>
                                                    <Position>
                                                        Only 1 method:
                                                            element()- Returns the element at this position- defined relative to other positions.
                                                                not tied to element or rank.
                                                    </Position>
                                                    <List>
                                                        Support all position based methods.
                                                            generic methods- size(), isEmpty
                                                            Query based- isFirst,isLast(p)
                                                            accessor- first(),last(),before(p),after(p)
                                                            Update- insertFirst(e),insertLast(e),insertBefore(p,e),insertAfter(p,e),remove(p),swapElements(p,q),replaceElements(p,e)
                                                        Implementation by Doubly LL- all take O(1) time.
                                                    </List>
                                                    <GeneralSequences>
                                                        Combines Vector and List ADT (multiple Inheritance)
                                                            Bridge Between ranks and positions.
                                                    </GeneralSequences>
                                                </Sequences>
                                                <Dictionaries>
                                                    Store elements so that they can be quickly located using Keys (key-value)
                                                    Eg- may hold bank accounts, identified by an account number (key) and wealth of info like name, balance(value)
                                                    is abstract model of a Database- search by key is main operation.
                                                    Methods-
                                                        searchByKey
                                                        size(),isEmpty(),elements()
                                                        Query- findElem(k),findAllElem(k)
                                                        Update- insertItem(k,e),removeElem(k),removeAllElem(k)
                                                        NIL returned by unsuccessful search.
                                                        supporting order (min,max,successor,predecessor) not reqd; keys be comparable.
                                                    In Java, java.util.Dictionary- abstract class and java.util.Map- Interface.
                                                    Eg- Finding Caller's name from phone number (T&T wants), phone numbers range (0 to 10^8-1) but n<< r
                                                    <Implementations>
                                                        <Arrays>
                                                            <Unordered>
                                                                Insertion,Deletion- O(1)
                                                                Search- O(n)
                                                                Useful in writing Logs.
                                                            </Unordered>
                                                            <Ordered>
                                                                Insertion,Deletion- O(n)- for shifting
                                                                Search- O(logn)- Prob size halves every iteration until 1.
                                                                Useful for look up tables.
                                                                Iterative
                                                                Recursive
                                                            </Ordered>
                                                            <Hashing>
                                                                <DirectAddressing>
                                                                    The values should be taken as indices.
                                                                    A huge array with 10^8 entries (for all phone numbers) and write their names in there.
                                                                        T(n)=O(1) but O(range) space besides lotta wastage.
                                                                </DirectAddressing>
                                                                <HashTable>
                                                                Hash Tables- Categorize those few n entries (outta r) and map it to 0 to a finite number.
                                                                    T(n) = O(n+m)- where m is size of table. how?
                                                                        Load Factor= n/m (input size/hash table slots).
                                                                    <HashFunctions>
                                                                        Mapping the keys to indices of a hash table.
                                                                        h:U -> {0,1,...m-1}
                                                                            Quick to Compute- There is time taken to compute hash, h(k)- assume it's O(1)
                                                                                Choose good hash function which distributes keys evenly amongst slots.
                                                                                @Birthday Paradox- rare!
                                                                        <Steps>
                                                                            <HashCodeMap>
                                                                                Non-Integer Data-formats to Integer.
                                                                                Find some way to Convert keys to integers.
                                                                                    Numeric Types with 32 bits or less- reinterpret as an int.
                                                                                    Partially Int- remove hyphens from phone numbers.
                                                                                    Strings- use their ascii and polynomial accumulation
                                                                                        a0+a1.x+a2.x^2+..
                                                                                        Computed using Horner's Rule- a0+x(a1+a(a2+....))
                                                                                        choice of x=33,37,39,41 give at most 6 collisions on vacab of 50k english words.
                                                                                    Fractional
                                                                                        floor(m(kA mod 1))- key * Constant- take fractional part- map it (0 to m-1)
                                                                                            m here can be a power of 2.
                                                                                            Knuth says use A = Golden Ratio ((sqrt(3)-1)/2)
                                                                            </HashCodeMap>
                                                                            <CompressionMap>
                                                                                Maps integer to hash table indices.
                                                                                Use the remainder, h(k) = k mod m. Choose m.
                                                                                    m = b^n (bad)
                                                                                        if 2^e- e least significant bits of k for h(k) used to categorize.
                                                                                    m prime (good)
                                                                                        should not be too close to powers of 2.
                                                                                        gives good uniform distribution.
                                                                                        For character strings, find m near n/LoadFactor
                                                                                MAD (multiply,add,divide)
                                                                                    h(k)=|ak+b|mod N    //eliminates patterns provided a is not multiple of N.
                                                                                Universal Hashing- Random Hash function, h from a set of hash functions H.
                                                                            </CompressionMap>
                                                                        </Steps>
                                                                        Eg- mod 5- all phones numbers get categorized into 0 thru 4.                                                                        
                                                                    </HashFunctions>
                                                                    <CollisionResolution>
                                                                        There will be keys mapping to same number.
                                                                        <Chaining>
                                                                            Set up an array of Links, indexed by keys.
                                                                            Desirable that elements evenly distribute.
                                                                            For CRUD, loop up hash entry and CRUD on LL (or whatever)
                                                                            Analysis-
                                                                                Bad distribution- O(n) search time- all in 1 LL.
                                                                                Ideal Distribution- O(1+LoadFactor)
                                                                                For small Load Factor, T(n) = O(1) for all CRUD (delete using doubly LL)
                                                                        </Chaining>
                                                                        <OpenAddressing>
                                                                            Hash table big enough to store eth in hash table (n<< m)
                                                                                each table entry contains an element or null.
                                                                                search slots systematically
                                                                                Modify Hash Function to take probe number i as second parameter- h:U X {0,1,2,..,m-1} -> {0,1,..,m-1}
                                                                            <LinearProbing>
                                                                                If current location is used, try the next available table location.
                                                                                    Lesser memory than chaining (no links)
                                                                                    Slower than chaining- walk along the table for long.
                                                                                Search- To search key k, go to k mod m and continue successively looking for k, until a space is encountered.
                                                                                Deletion- If we search key and set it to null (or space), all keys that passed thru this space would become inaccessible.
                                                                                    so mark it with tombstone (we would ignore tombstones in our searches) which degrade performance- rehash if too many of these.
                                                                            </LinearProbing>
                                                                            <DoubleHashing>
                                                                                using 2 hash functions, h1 and h2
                                                                                h1- to find position to check for key k.
                                                                                h2- offset to use when searching for k; for linear probing it's 1.
                                                                                    jump by this offset to find the key.
                                                                                    if m is prime, eventually all table positions will be examined.
                                                                                Analysis
                                                                                    many of same (disadvantages) as linear probing.
                                                                            </DoubleHashing>
                                                                        </OpenAddressing>
                                                                    </CollisionResolution>
                                                                </HashTable>
                                                            </Hashing>
                                                        </Arrays>
                                                        <LL>
                                                            <Linear>Singly,double,circular,double-circular</Linear>
                                                            <Tree>
                                                                Tree Represents a hierarchy.
                                                                    Eg- Organization of a corporation
                                                                    Eg- Table of Contents of a book.
                                                                    Eg- Unix/DOS/Windows File System.
                                                                Ordered Tree- children of each node are ordered.
                                                                Binary Tree- ordered tree with all nodes having <=2 nodes.
                                                                    Node Jargon
                                                                        Root- Starting node.
                                                                        Parent
                                                                        Ancestor
                                                                        Descendants
                                                                        Siblings
                                                                        Children
                                                                        Leaves
                                                                        Internal Nodes
                                                                        Properties- Depth (level) of a node. distance from root.
                                                                    Recursive Defn- it is either a leaf or an internal node (root) with 1/2 binary trees as its children (left & right subtree)
                                                                    Eg- Arithmetic Expressions (operation internal nodes operate on 2 operands)
                                                                    Eg- Yes/No based decision trees- GATE selection Procedure. A case follow a path thru it.
                                                                    Complete Binary Tree- in which a level i (root take as level 0) has 2^i nodes.
                                                                        No of leaves (at level h)= 2^h 
                                                                            So, Height = log(leaves) base 2
                                                                        Internal Nodes = 1+2^1+2^2+2^3+..+2^(h-1) = 2^(h)-1 = No of leaves - 1
                                                                            So, leaves = internal + 1.
                                                                        Total No of nodes- 2^(h+1) - 1 = 2(No of leaves) - 1 
                                                                            So, leaves = (n + 1) / 2
                                                                    Properties- A Binary Tree is "pruned" Complete binary tree.
                                                                        @Grapes pruned to match the weight.
                                                                        nodes at level i <=2^i.
                                                                        Total Nodes <= 2^(h+1)-1
                                                                            So, h >= log((n+1)/2) base 2
                                                                            Maximum height- n - 1 (every node except leaf has 1 child)
                                                                        Leaves <= 1 + internal.
                                                                            Proof by Induction.
                                                                            Minimum no of leaves = 1.
                                                                        Leaves + Internal = n (total)
                                                                ADT for Trees- Trees can be a situational demand (tree is problem view-ADT) or a dictionary implementation.
                                                                    Generic- size(),isEmpty(),elements()
                                                                    positional- positions(),swapElements(p,q),replaceElement(p,e)
                                                                    Query- isRoot(p),isInternal(p),isExternal(p)
                                                                    Accessor- root(),parent(p),children(p)
                                                                    SubType- BinaryTrees-
                                                                        Accessor- leftChild(p),rightChild(p),sibling(p)
                                                                        Update- 
                                                                    Implementation- 
                                                                        We need- key of current, left pointer, right pointer for children; parent pointer for parent.
                                                                        Tree ADT can also be implemented by arrays but not tree DS. 
                                                                        Here, we will focus Tree DS- implemented by Branching linked list.
                                                                Implementation- Branching Linked List.
                                                                <Traversals>
                                                                    aka Tree Walks
                                                                    A way of visited all nodes in a tree (in specified order)
                                                                        In following code, do null check before traversal.
                                                                        Euler Tour Traversal helps in this.
                                                                            Preorder- write on left pass of any node
                                                                            inorder- write on bottom pass of any node
                                                                            postorder- write on right pass of any node.
                                                                    Eg- left child goes down and right to the right.
                                                                        a-e
                                                                        |-b-d-g
                                                                          | |-f
                                                                          |-c
                                                                    Preorder- node then all children.
                                                                        preOrder(v){
                                                                            "visit" node
                                                                            preorder(v.leftChild());
                                                                            preorder(v.rightChild());
                                                                                                //for each child w of v preOrder(w)
                                                                        }
                                                                        REL- Reading a document from beginning to end. We see the heading- get into the topic, then next heading, next topic.
                                                                        Eg-abcdfge for following tree
                                                                            left child goes down and right to the right.
                                                                            a-e
                                                                            |-b-d-g
                                                                              | |-f
                                                                              |-c
                                                                    Postorder- all children then node.
                                                                        postOrder(v){
                                                                            postorder(v.leftChild());                        
                                                                            postorder(v.rightChild());                            
                                                                                                    //for each child w of v postOrder(w)
                                                                            "visit" node
                                                                        }
                                                                        REL- du (disk usage) command in unix- memory stats flow upwards.
                                                                        Application- Arithmetic expression evaluation.
                                                                            eval(v){
                                                                                if(v is leaf)
                                                                                    return value/var;
                                                                                Operation op = get value of v;
                                                                                x = eval(v.leftChild());
                                                                                y = eval(v.rightChild());
                                                                                return x op y;
                                                                            }
                                                                        Eg- cfgdbea for the following tree
                                                                            left child goes down and right to the right.
                                                                            a-e
                                                                            |-b-d-g
                                                                              | |-f
                                                                              |-c
                                                                    Inorder- Left child, self, right child.
                                                                        inorder(v){             
                                                                            inorder(v.leftChild());                            //for left child w of v inorder(w);
                                                                            "visit" node;
                                                                            inorder(v.rightChild());                          //for right child w of v inorder(w);
                                                                        }   //do null check before traversal.
                                                                        It is ground projection of the tree!
                                                                    Level Order
                                                                    Thru Iteration
                                                                        ?Use stack- keep stuffing stack with right pointers as we take left turn.
                                                                            when done, pop from stack and repeat the process.
                                                                            do this until stack gets empty.
                                                                        ?Using Regular expression- ((l*.r)*.p*.r)*    
                                                                            1st and 2nd dot says when it's done. 
                                                                            3nd dot says until you see a right child.
                                                                            Ends when root is reached again.
                                                                            essentially euler's tour in regex.
                                                                    Prob- print the arithmetic expression from a tree- put brackets on left path and close brackets on right ending.
                                                                        Use preorder for ground projection. Print Left bracket before starting the left and closing bracket after the right subtree is over (in recursion)
                                                                        can extend the BinaryTreeTraversal class and add methods for brackets.
                                                                    Prob- Given Pre- and in- order, build a tree.
                                                                        1:abcdfge,2:cbfdgae.
                                                                            from 1: a is root and b is its left child.
                                                                                add left child of a.
                                                                            from 2: if a is root then cbfdg are left subtree and e is right subtree.
                                                                                add e as right child of a.
                                                                            from 2: since b is left child, 
                                                                                c has to be its left subtree (or left child)
                                                                                fdg is its right subtree.
                                                                                add c as left child of b.
                                                                            from 1: c is followed by d which is in fdg (right subtree) meaning that c is leaf.
                                                                                also, d has to be node on right subtree.
                                                                                add d as right child of b.
                                                                            from 2: d has f to its left and g to its right (left and right subtrees)
                                                                                b is followed by f not d, meaning that f has to be left child of d.
                                                                                add f as left child of d. and g can only be its right child.
                                                                    Prob- Given Post and in order- similar procedure.
                                                                    Prob- Given Pre and post order- there can be 2 trees with same pre and postorder
                                                                        eg- abc,cba-
                                                                            a           OR      a-b
                                                                            |-b-c                 |-c    
                                                                        Special Case- if each internal node has at least 2 children, then tree can be determined.
                                                                            Refer notes- Hint: find common haphazard string characters.
                                                                    Prob- given Post Order sequence of BST- construct it.
                                                                        refer to CS Life notes in Downloads.
                                                                        {1, 7, 5, 50, 40, 10}
                                                                        10 is definitely root
                                                                                    10
                                                                                  /    \
                                                                                 /      \
                                                                         {1, 7, 5}       {50, 40}

                                                                </Traversals>
                                                                <BinaryTree></BinaryTree>
                                                                <RedBlackTree></RedBlackTree>
                                                                <AVLTree></AVLTree>
                                                                <BTree></BTree>
                                                                <DrawingATree>
                                                                    Use Preorder traversal- on finding an element- attach to its parent.
                                                                        go to the next line- space it depending on the level we are at (count that in recursion)
                                                                        vertical lines also depend on whether the node has any right child.
                                                                            remember existence of right child (using an array)- update index on finding that a right child exists.
                                                                            keep marking vertical lines on apt positions for all levels starting 1st.
                                                                            update index value on reaching rightchild- to a sentinel value- so as to not put a vertical line unnecessarily.
                                                                        Variation- recursion may choose to take reverse of euler's tour 
                                                                            (first visit right child then left child)
                                                                            this will look exactly like a tree seeing diagonally.
                                                                            Eg- 
                                                                                a-b-c
                                                                                | |-d
                                                                                |-e
                                                                    Use Levelled Traversal- (Using BFS of graph algo)
                                                                            Eg-
                                                                                a
                                                                               / \
                                                                              b   c
                                                                             / \ / \
                                                                            d  e f  g
                                                                </DrawingATree>
                                                            </Tree>
                                                        </LL>
                                                    </Implementations>                                                    
                                                </Dictionaries>
                                                <OrderedDictionaries>
                                                    Additional to Dictionary- we have
                                                        Min()
                                                        Max()
                                                        Predecessor(S,k)
                                                        Successor(S,k)
                                                        for this there has to a total order on keys.
                                                    <Implementation>
                                                        <UnorderedList>
                                                            Searching- O(n)
                                                            Insertion- O(1)
                                                        </UnorderedList>
                                                        <OrderedList>
                                                            Search- O(n)
                                                                scan to find out the node (linear) and then constant time to find pred,succ,max,min.
                                                            Insertion- O(n)
                                                                find its location and then insert.
                                                            Array would definitely improve search time- binary search- but not CRUD\R- finding is log but shifting takes O(n).
                                                        </OrderedList>
                                                        <Trees>
                                                            <HeightProperty>
                                                                Height of node = longest distance (number of edges) from leaf to the node.
                                                                    height at 1 level may be different.
                                                                    height of tree = height of root.
                                                                    Max no of nodes in complete binary tree = 1+2^1+2^2+..+2^h=2^(h+1)-1; 
                                                                        so, for h = log(n+1)-1 = lg(n)
                                                                        Heap being an almost complete binary tree will always have height THETA(logn)
                                                                    It can be skewed and O(n).
                                                                    for ternary? n = 3^(h+1)-1
                                                            </HeightProperty>
                                                            <BinarySearchTree>
                                                                Kinda innovation of binary search on Linked Lists.
                                                                Binary Tree with left subtree with every internal node having 
                                                                    keys on left subtree <= itself 
                                                                    keys on right subtree >= itself (generally keys are unique, choose either on equality)
                                                                1 sequence can have many BST for it.
                                                                    #Think of it as skewing array at different points to make a tree.
                                                                <Searching>
                                                                    travel along on a path (on inequality) from root until find a key or end of path.
                                                                    Search(T,k){
                                                                        x=root(T);
                                                                        if(x==NULL) return NULL;
                                                                        if(k==key(x)) return x;
                                                                        if(k< key(x)) return Search(left(x),k);
                                                                        else return Search(right(x),k);
                                                                    }
                                                                    IterativeSearch(T,k){
                                                                        x=root(T);
                                                                        while(x!=NULL && k!=key(x))
                                                                            if(k< key(x)) x = left(x);
                                                                            else x= right(x);
                                                                    }
                                                                    T(n)?
                                                                        coming 1 level below everytime. At worst it will take longest path- O(height)
                                                                            So, if BST is damn skewed- height can be n so O(n).
                                                                            If BST is uniformly distributed- it will be O(logn)
                                                                </Searching>
                                                                <Minimum>
                                                                Minimum- Where can we find it?
                                                                    Leftmost node or leftmost leaf?
                                                                    If the leftmost node of the tree has no left child, then the node itself is minimum (not its right child(leftmost leaf)!)
                                                                    Keep going left until the the left child is null- Proof by contradiction.
                                                                    TreeMin(x){
                                                                        while(left(x) != null)
                                                                            x=left(x);
                                                                        return x;
                                                                    }
                                                                    T(n)=O(h)- can go at most the height of tree.
                                                                    Similarly for maximum.
                                                                </Minimum>
                                                                <Successor>
                                                                Successor- smallest key greater than key(k).
                                                                    if has right subtree, go find minimum element there. 
                                                                        if node is left child of its parent, parent can't be successor, it will be even bigger than the right side nodes
                                                                        else if node is right child of its parent, parent will be smaller than current node. 
                                                                            But somewhere, some ancestor will be bigger than all considered till then, so even bigger than its right side.
                                                                    else
                                                                        2 cases: In summary, go until find this node becomes left subtree of that node!
                                                                            OR go for 1st right turn.
                                                                            If this node is left child of its parent, its parent is larger than this 
                                                                                (and its parents' parents or right children are bigger than its parents)
                                                                            If this node is right child of its parent, its parent is smaller than itself and left side even smaller but somewhere in parents some parent maybe larger.
                                                                                cases: 
                                                                                    the parent is left child of its parent- its parent is greater than itself and in fact all we started searching from and we stop.
                                                                                        that node's right children will be bigger than that, its parents
                                                                                            2 cases- 
                                                                                                left parent (that being right child)- smaller than itself and if getting bigger on ancestors (will be bigger than found); 
                                                                                                right parent- even bigger.
                                                                                    if parent is right child, it's parent is once again smaller. 
                                                                                Going ahead until, the parent is left child of its parent.
                                                                    TreeSuccessor(x){
                                                                        if(right(x)!=null) return TreeMin(right(x));
                                                                        y = parent(x);
                                                                        while(y!=null && x=right(y)){
                                                                            x=y;
                                                                            y=parent(x);
                                                                        }           
                                                                        return y;                                                             
                                                                    }
                                                                    T(n)?
                                                                        we can either go below the tree or above the tree, so O(h) in worst case.
                                                                </Successor>
                                                                <Insertion>
                                                                Insertion (How to construct/maintain the BST)- idea is same as searching to look where it fits.
                                                                    fit it in there at leaf (always)
                                                                    TreeInsert(T,k){
                                                                        y=null;
                                                                        x=root(T);
                                                                                                    //Modify searchKey(T,k) aptly.
                                                                        while(x!=null){
                                                                            y=x;    //to remember prev reference of a node.
                                                                            if(key(x)>key(k))
                                                                                x=left(x);
                                                                            else x = right(y);
                                                                        }
                                                                        parent(k)=y;
                                                                        if(y=null)  //tree doesn't exist
                                                                            root(T)=k;
                                                                        else {
                                                                            if(key(k)< key(y))
                                                                                left(y)=k;
                                                                            else right(y)=k;
                                                                        }
                                                                    }
                                                                    T(n)- O(height)- at that time
                                                                    Texture of BST
                                                                        Important because performance of all operations depend on height.
                                                                        Imagine if an ordered list is sent- BST will bend towards one side- height will be n-1.
                                                                        But if it is balanced, i.e send data in sequence of n/2,n/4,3n/4,..(basically, along a path from root to a leaves, lower height node never coming before upper height)
                                                                    Range of height from lg n to n-1.
                                                                </Insertion>
                                                                <Deletion>
                                                                Deletion
                                                                    Search the node- O(h) then
                                                                    Delete it
                                                                        case 1: no children- a leaf- delete without second thought. Just remove pointers (left/right child to null)
                                                                        case 2: if 1 child- right child/left child- attach node's child to its parent (cuz it will have same property less/greater as its parent)
                                                                            as simple as deleting a node from linear linked list.
                                                                        case 3: if 2 children, (to maintain the BST) replace the node with its predecessor or successor.
                                                                            1 of them will definitely be a descendant cuz it's not a node without children (rejected case 1 and 2)
                                                                                successor/ predecessor will not be ancestor for sure.
                                                                            eth on left subtree will continue to be lesser and vv.
                                                                            the successor/predecessor may have 1 or 0 children (even a subtree), reduces to case 2- attach the subtree to its parent as same-side child.
                                                                        TreeDelete(T,z){
                                                                            if(left(z)==null || right(z) == null)   ///identifying node to be deleted.
                                                                                y = z;
                                                                            else y = TreeSuccessor(z);

                                                                            if(left(y) != null)     ///Redundant code here; x:find where to append victim's parents to (if 1 child of victim node)
                                                                                x=left(y);
                                                                            else x=right(y);

                                                                            if(x!=null)             //if victim node has a child (not leaf)
                                                                                parent(x)=parent(y);        //bypass y.
                                                                            if(parent(y)==null)  //the victim node is the root of tree.
                                                                                root(T) = x;
                                                                            else if(y=left(parent(y)))
                                                                                left(parent(y))=x;
                                                                            else right(parent(y))=x;
                                                                            if(y!=z)
                                                                                key[z]=key[y];  //copy all fields of y.
                                                                            return y;
                                                                        }
                                                                    T(n)?
                                                                        If case 1 and 2- O(1) if I have reference to node to be deleted.
                                                                        If case 3, predecessor takes O(h).
                                                                        In total, O(h)
                                                                </Deletion>
                                                                <Sorting>
                                                                    Inorder Traversal (Ground Projection) will do it. Array A is given.
                                                                    TreeSort(A){
                                                                        root(T) = NULL;
                                                                        for(i=1;i< n;i++)
                                                                            TreeInsert(T,A[i]);
                                                                        Inorder(root(T));
                                                                    }
                                                                    T(n)? looks- O(n). It's not! Foxed?
                                                                        Insertion is not O(1) so we lied- Depends on levels it has to come.
                                                                        Worst Case- 
                                                                            If sorted order, effort reqd- 1+2+3+..+n-1 = O(n^2)
                                                                        Average Case- 
                                                                            If random order, inserting.
                                                                            Suppose we take a random permutation of the keys and inserted them in this order.
                                                                            The total time required (by each permutation (try it out)) for insertion is a random variable.
                                                                            We want Expected value of this random variable-
                                                                                Average it takes over a large number of trails.
                                                                                    Expectations = SIGMA(Probability(RandomVariable)*ValueOfRandomVariable)/no of random variables.
                                                                                    Each permutation is equally likely.                                                                   
                                                                                    Since we have n! such permutations,avg = (Total Time / n!) 
                                                                                    T(n)? say T(3)- Write all 6 permutations of input size 3. Make BST for them. Add their time taken up (=number of levels traversed)=16; Avg = 16/6=2.65
                                                                                    Of n! permutations, (n-1)! permutations in which the first element is i.
                                                                                        i will be the root (1-(i-1) will be left subtree and (i+1)-n will right subtree)
                                                                                        Consider ordering 1-(i-1) keys in (n-1)!permutations. All (i-1)! permutations appear and each occurs (n-1)!/(i-1)! times (all being equally likely)- fixing 1 of those (i-1)! and letting others change.
                                                                                        Recall that if we only had keys 1..(i-1) then average time taken to insert them is T(i-1).
                                                                                        Total Time to insert all (i-1)! permutations is (i-1)!T(i-1)   //all (i-1)! combinations will take their average time each- T(i-1)
                                                                                            Add, time spent comparing to the root element for all those (i-1) elements so,
                                                                                            Total Time to insert all (i-1)! permutations is (i-1)!(T(i+1)+(i-1))
                                                                                            Over bigger picture, there are (n-1)!/(i-1)! times that these insertions happen, so Total Time to insert keys 1..(i-1) for all possible permutations, is (n-1)!(T(i-1)+(i-1))   //that too this is total time to insert (0..i-1) for case where 1st element is i.
                                                                                                Similarly, insertion of (i+1)..n is (n-1)!(T(n-i)+(n-i))
                                                                                            So, total time to insert all n keys in permutations where first key is i is
                                                                                                    (n-1)!(T(i-1)+T(n-i)+(i-1+n-i)) = (n-1)!(T(i-1)+T(n-i)+(n-1))
                                                                                                Total Time to insert all n key in all (n-1)! permutations is SIGMA(Time reqd by i as first key) over all i from 1 to n.
                                                                                                    (n-1)! SIGMA(T(i-1)+T(n-i)+(i-1+n-i))
                                                                                                Average Time to insert n keys = Total Time / n! = (1/n)*SIGMA(T(i-1)+T(n-i)+(n-1))
                                                                                                    =(2/n)*SIGMA(T(i))+(n-1) over i=0 to n-1 (just opening up and matching)
                                                                                                    T(0)=0; then T(1)= substitute, 0. T(2) = 2/2 (T(0)+T(1)+2-1)=1.
                                                                                                    T(3)=2/3(T(2)+T(1)+T(0)+3-1)=2/3+2=2.67
                                                                                                    This is called a recurrence relation- T(n) dpends on all values 0 to n-1.
                                                                                                How to solve this recurrence relation also.
                                                                                                    T(n-1) = (2/(n-1))*SIGMA(T(i)) + (n-2)    from 0 to n-2 //replacing.
                                                                                                    so, (2/n)*SIGMA(T(i)) from 0 to n-2 = ((n-1)/n)*(T(n-1))-n+2
                                                                                                    Substitute into T(n) expression-
                                                                                                        T(n) = ((n-1)/n)*(T(n-1)-n+2)+(2/n)*T(n-1)+(n-1)    //adding extra T(n-1) because SIGMA covers T(i) from 0 to n-2 and n-1 is left out.
                                                                                                        = ((n+1)/n)*T(n-1)+2((n-1)/n)   //by rearrangement.
                                                                                                        <= (1+1/n)*T(n-1) + 2   //simplification for reduction
                                                                                                        = ((n+1)/n)*(((n/(n-1))*T(n-2))+2)+2
                                                                                                        = (((n+1)/(n-1))*T(n-2)) + 2(n+1)/n + 2 = .... = 2(n+1)((1/n)+(1/(n-1))+...+(1/2))+2
                                                                                                        This is Harmonic series (what is sum of Harmonic series) 
                                                                                                            = INTEGRATION(1/x) over 1 to n (draw it)= log(n)
                                                                                                        T(n) <= 2(n+1)(log n) + 2 = O(nlogn)
                                                                        Best time is also O(n log n)
                                                                            This tells us that most of BST are fairly shallow (randomizing the numbers will help us)
                                                                            when resulting height is smallest possible, i.e lg(n)
                                                                            to insert n/2 nodes at level lg n we require at least n/2 lg n time,
                                                                                So, OMEGA(n lg n)
                                                                </Sorting>
                                                                <Variants>
                                                                    All operations depend on height which can be O(n) in worst cases.
                                                                    <AVLTree>
                                                                        so named after its inventors' initials.
                                                                        aka height balanced trees
                                                                        Defn- is a BST s.t every internal node v of Tree has difference of heights amongst at most 1.
                                                                            Height- counting starts from below.
                                                                            Eg- Linear tree is not AVL at height 3.
                                                                        <HeightOfAVL>
                                                                            Important to get a flavor of how they look.
                                                                            <OLogn>
                                                                                Say n(h) be minimum numbers of nodes in AVL tree of height h.
                                                                                    we want large number like 2^h for our benefit.
                                                                                    n(1)=1,n(2)=2,
                                                                                    for height >=3, root node has height its children- with height h-1 and (h-1 or h-2), we will take h-2 to make n(h) minimum
                                                                                    n(h) = 1+n(h-1)+n(h-2)  //recurrence relation to solve.
                                                                                        we know that n(h-1)>=n(h-2)
                                                                                        n(h)=n(h-1)+n(h-2)+1 
                                                                                        >= 2.n(h-2) >=4.n(h-4) >= 8.n(h-6) >=...
                                                                                        >= 2^i.n(h-2i)
                                                                                        Let's take i = h/2 - 1, we get- n(h) > 2^(h/2-1).n(2)
                                                                                        = 2^(h/2)
                                                                                    So a Tree of height h will have at least 2^(h/2) nodes. Maximum- 2^h (complete Binary tree)
                                                                                        Taking logs, h< 2log(n(h)) = O(logn) where n is minimum nodes in h.
                                                                                        Any AVL with m nodes and height h, m> n(h) and h< 2log(n(h))< 2log(m)
                                                                            </OLogn>
                                                                            <SharperBound>
                                                                                n(h) >= c^h where c is some number >1 (previously c was sqrt(2))
                                                                                Base case- h=1, n(h)>=c>1   (correction use c^(h-1) here,ew)
                                                                                Induction- let true for all h < k.
                                                                                    show that n(k) >=c^k
                                                                                    n(k)=n(k-1)+n(k-2)+1
                                                                                    >=c^(k-1)+c^(k-2)
                                                                                    To prove- n(k) >=c^k if c^(k-1)+c^(k-2)>=c^k
                                                                                        => c^2-c-1<=0 (cancelling by c(k-2) division) = (1 +/- sqrt(5))/2 (golden ratio repeats et)
                                                                                            even n(k)=n(k-1)+n(k-2)+1 can be reduced to fibonacci reln by adding 1 on both sides- fib(n)=fib(n-1)+fib(n-2) where fib(n)=n(k)+1
                                                                                    c=1.63 
                                                                                        n > n(h) >= (1.63)^(h-1)
                                                                                        then h = log (n) base 1.63
                                                                            </SharperBound>
                                                                            <ThetaN>
                                                                                Take a leaf closest to root at level k.
                                                                                    Height = 2k-1.
                                                                                    Proof- height of parent of that leaf = 2 (largest), their parents has height 3, sibling can have at most 4, thru the way to root to get 2k-1.
                                                                                        for k=1, h=1; k=2, h=3; k=3, h=5;so on.
                                                                                        Not true for any binary tree.
                                                                                        All leaves in levels after k.
                                                                                        Any AVL of height h, will have closest leaf at least farther by h/2 levels.
                                                                                If closest leaf at level k, All the levels 1 thru k-1 have 2 children.
                                                                                    Proof by contradiction
                                                                                        say there is only 1 child v of node u at level k-2 (or sth), the child v is at level k-1 and so can't be a leaf, at least 1 child of v. then height of u > 2, on 1 side (AVL property violated)
                                                                                    But level k-1 can have 1 child- cuz it can be a leaf.
                                                                                    Dense till (h-1)/2 AND then starts thinning out.
                                                                                So, all levels 1 thru k-1 are full (2 children each) so at least 2^(k-1) nodes
                                                                                Also, height of tree is at most 2k-1, so nodes in tree <= 2^(2k-1)
                                                                                    Then, 2^(k-1)<=n<=2^(2k-1)
                                                                                    Use h = 2k-1, then 2^((h-1)/2)<=n<=2^h
                                                                            </ThetaN>
                                                                        </HeightOfAVL>
                                                                        <Insertion>
                                                                            Same as BST.
                                                                            Will it continue to remain AVL?
                                                                                Inserting a node can change property of some of the nodes.
                                                                                Height will change only along the path (from the leaf to root)- other nodes will keep the same height.
                                                                            If T becomes unbalanced, find out- go up the tree from the newly created node until find first node x with its grandparent z is unbalanced.                                                                        
                                                                                Keep going parent,parent,..until see root or unbalanced. Along the path- mark the unbalanced node and its child and grandchild as zyx respectively.
                                                                                Rotation- Reorganize the skewed BST, s.t the heavy side moves to lighter one.
                                                                                    Remember many BST can be made from a given sequence.
                                                                                    T2 moved from child v to parent u.
                                                                                    If Insertion happens at T1.
                                                                                    Eg- 
                                                                                        z-T4
                                                                                        |-y-T3
                                                                                          |-x-T2
                                                                                            |-T1.
                                                                                    height of T1 becomes from h to h+1.
                                                                                    And it has increased thru to z (that's why imbalance)
                                                                                        What can we say about T2- at T1 h, x was stable, and also is stable at T1 h+1, 
                                                                                            Possible values of T2 could be 
                                                                                                h-1 (unstable after insertion)
                                                                                                h (only option)
                                                                                                h+1 (then height of x would have be h+2, unchanged by insertion and no fault after insertion)
                                                                                                h+2 (unstable b4)
                                                                                            So, height(x) = h+2 from h+1, it becomes after insertion (still stable)
                                                                                        What about height of T3- same argument- same as x b4 = h+1
                                                                                            So, height(y)= h+3 from h+2.
                                                                                        What about T4?
                                                                                            since imbalance happens at z. The gap has to exist.
                                                                                            z has its height of child y increased causing imbalance.
                                                                                            But was balanced before- meaning gap was of 1, now grew to 2.
                                                                                            So, height(T4)=h+1. height(z) was originally h+3.
                                                                                        Rotate- x subtree remains as is. y moves up and z becomes its child
                                                                                            z reduces its height- and T3 reconnects from y's right child to z's left child.
                                                                                            constant number of reference changes.
                                                                                            height of y remains same and that of tree remains same- so don't have to go further- any ancestor will not have changed.
                                                                                                Done with it.
                                                                                    height change in T2 works similar (symmetric)
                                                                                    Case 2- RR.
                                                                                Double Rotation
                                                                                    Case 3- LR.
                                                                                        Eg-
                                                                                            z-T4
                                                                                            |-y-x-T3
                                                                                              | |-T2
                                                                                              |-T1
                                                                                        Say, height of T1 increased from h to h+1,
                                                                                        Height of T2 must have been h (refer case 1)
                                                                                        Height of x = h+2 from h+1
                                                                                        Height of T1 = h+1 (same logic)
                                                                                        height of y = h+3 from h+2
                                                                                        Height of T4 = h+1 (for imbalance to happen at z)
                                                                                        Height of z was h+3 earlier- somehow reduce weight on z by moving some node to its right side.
                                                                                        way1
                                                                                            Rotation (x,y)- x becomes parent of y. T2 changes from left child of x to right child of y.
                                                                                                causing imbalance at x and z.
                                                                                            Rotation (x,z)- as in case 1.
                                                                                        way2
                                                                                            a little thought to do it.
                                                                                    Case 4- RL (symmetry of case 3)
                                                                            T(n)?
                                                                                O(h) to insertion as usual = O(logn) and maintaining AVL property- we moved back above the tree up to some point < O(h)
                                                                                So, T(n) = O(logn)
                                                                        </Insertion>
                                                                        <Deletion>
                                                                            BST had 3 cases- 3rd case when 2 children- find successor/predecessor which will have at max 1 child.
                                                                                so always we delete either a leaf or a node with only 1 child.
                                                                                    In AVL, the node with 1 child, can't have a right a grandchild (AVL property lost on the node)
                                                                                        So, In AVL trees, If a node has only 1 child, then that child is a leaf.
                                                                                    Also deleting node with 1 child is as simple as copying the contents and deleting a leaf.
                                                                            When deleting a node, its ancestors heights may reduce (up to a certain point) along the root.
                                                                                here, we may have to go till root.
                                                                                here our xyz have to be on different path (cuz weight increase on other side and elements need to shift to the other)
                                                                                    y must have been larger in height to have the unbalance on z.
                                                                                    Height(y) = h+1
                                                                            case 1-
                                                                                Eg- 
                                                                                    z-T4
                                                                                    |-y-T3
                                                                                      |-x-T2
                                                                                        |-T1.
                                                                                    Say, height of left child of y is larger- call that as x.
                                                                                        Height(x) = h.
                                                                                        Height(T3) = h or h-1 (y is still balanced)
                                                                                    Height(T1/T2) = h-1 or h-2 (both can't have h-2)
                                                                                Rotation (y,z)- y moves up and z moves down.
                                                                                    Reducing height of the tree from h+2 to h+1 or no change.
                                                                                        if no change, then stop.
                                                                                        if it becomes h+1, then we have to propagate beyond until unbalance and apply same rule or root.
                                                                            Case 2- when right child of y has greater height that becomes x.
                                                                                Eg-
                                                                                    z-T4
                                                                                    |-y-x-T3
                                                                                      | |-T2
                                                                                      |-T1
                                                                                ht(T4) changes from h to h-1.
                                                                                If ht(T1) was also h I would have picked root of T1 as x for case 1 (single rotation)
                                                                                Rotation(x,y) then rotation (x,z)
                                                                                Here the height of root,x will be strictly less than earlier,z so have to propagate to ancestors.
                                                                            Why 2 cases arise- a lots of effort will still make the tree unbalanced.
                                                                                gotta pick element from left to right (or vv) where it is heavy (not arbitrarily)
                                                                            T(n)?
                                                                                find the node, delete it (O(logn)) and then checking AVL property- move up the tree, at most up to root (O(h))
                                                                                So, O(logn)
                                                                        </Deletion>
                                                                        <Search>
                                                                            Same as BST- O(logn)
                                                                        </Search>
                                                                    </AVLTree>
                                                                    <RedBlackTree>
                                                                        Based on idea of 2,4 Trees- refer to it
                                                                        is a BST (with nodes colored with red or black) and hold following properties.
                                                                        <Properties>
                                                                            1. Root is black.
                                                                            2. Double Red Problem- Red node has only black children. (Red can't have red children but black can)
                                                                            null references replaced by uncolored external nodes.
                                                                            Black depth (external node)- no of black ancestors it has.
                                                                                3. every external node has same black depth.
                                                                            Height-
                                                                                Let h be black height of RBTree.
                                                                                For a given h, n will be minimum when all nodes are black (reds add to the height of BST)
                                                                                    n = 2^h-1
                                                                                For a given h, It will be maximum if we add as many reds as possible.
                                                                                    but since reds have black children- so alternate layers reqd.
                                                                                    n = 2^2h - 1 (blackred streaks n times)
                                                                                So, log n base 4 < h < 1+log n base 2   (we said same thing about 24 Trees)
                                                                                    searching will still take logn time.
                                                                        </Properties>
                                                                        <CorrespondenceTo24Trees>
                                                                            1 to 1 correspondence- Converting RB to 24 and vice versa
                                                                            <RB2Tree24>
                                                                                Think of every black be forming a node along with its red children (if there)
                                                                                    each node will have at least 1 item (when no red children) and at most 3 (when 2 red children).
                                                                                    Black height is height of 24 trees and its same- so all leaves at same level which is a property of 24 tree.
                                                                                    eg- 4 links for black emerging from the root are 4 links of 3 items (keys) in 24 trees' node.
                                                                            </RB2Tree24>
                                                                            <Tree24ToRB>
                                                                                Keys decide number of red nodes.
                                                                                every next level starts with a black node (no possibility of double red)
                                                                                Root is set black- if extra nodes make them red children.
                                                                                Set central item of a node as black child and left side to left child and right side to right child.
                                                                                    if 1 node, set that to black. 2 nodes- take central to black.                                                                
                                                                            </Tree24ToRB>
                                                                        </CorrespondenceTo24Trees>
                                                                        <Operations>
                                                                            <Deletion>
                                                                                Like BST- the leaf or parent of a leaf gets deleted.
                                                                                    Finding successor or predecessor and copying and again.
                                                                                    All probs here arise due to black height changing.
                                                                                3 cases- Deletable is- 
                                                                                    Case A: Red leaf- straight away delete it.
                                                                                        corresponds to deleting extra keys of a node (more than 1)
                                                                                    Case B: Black leaf- This is thoughtful case
                                                                                        corresponds to 24 tree- removing the key makes the node empty.
                                                                                        deleting it causes the black depth reduced by 1.
                                                                                        reorganizing the tree to take care of it.
                                                                                        Many cases- what all parents and siblings of the deletable black could be.
                                                                                            Case 1: Parent a is Red
                                                                                            case 1.1: b is black but one of its children is red.
                                                                                                    Ra-T1
                                                                                                     |-Bb-Rc-T2
                                                                                                        |  |-T3
                                                                                                        |-T4
                                                                                                T1 reduces black height from h to h-1,
                                                                                                    take T1 to be a black node only initially.
                                                                                                ht(T2) = h-1; ht(T3)=h-1; ht(T4)=h-1
                                                                                                Idea is somehow reduce the black weight of left wing or increase black weight of right wing.
                                                                                                    Do LR rotation and marks relative level 1 as black.
                                                                                                    What if making root as red produces double red- then it was already there b4 (not possible)
                                                                                                This is precisely the rotation case of 24 when sibling has a more than 1.
                                                                                                Variation- c is left child of b- same response.
                                                                                            case 1.2: 
                                                                                                b is black.
                                                                                                b has no red child- b's children are all black.
                                                                                                swap colors of b and a- let a get black color- thereby balancing both sides' black heights.
                                                                                                Equivalent to case when adjacent sibling has 1 item.
                                                                                                can there be double red problem due to b getting red- no! had it been red, we would have chosen case 1.1
                                                                                            Case 2: Parent a is black.
                                                                                            case 2.1.1- b, child of a is red. Then c child of b, has to be black. and c's child d is red.
                                                                                                do LR rotation.
                                                                                                do color changes aptly.
                                                                                                Equivalent to case when sibling has extra items to give and parent also has more than 1 item.
                                                                                                    case of rotation.
                                                                                            case 2.1.2- b is red, c is black (has to be) and c has no red children, d is black.
                                                                                                confirm new configuration with black heights and double red probs.
                                                                                                maps to case when parent has more items but sibling has only 1.
                                                                                                simply move a to healthy node side.
                                                                                            case 2.2.1- b is black.
                                                                                                and its child c is red.
                                                                                                Do LR shift.
                                                                                                maps to case when parent is alono, sibling has extra items- borrow case.
                                                                                            case 2.2.2- b is black and its children also are black
                                                                                                make c as red.
                                                                                                Here, 1st time the height of subtree reduces- repeat the same for parent of a.
                                                                                                corresponds to parent and sibling both have 1 key
                                                                                            recoloring is very fast.
                                                                                            But if 2.4 appears we have to go up until 2.2.2 doesn't show up and we do away with recoloring.    
                                                                                    Case C: Black node with right child as external node (while finding successor)
                                                                                        Why not others?
                                                                                            And its left child has to be red leaf.
                                                                                                if black, its external node descendent will have at least 1 extra black compared to original black (to be deleted)'s external node.
                                                                                                if red, can't have any red children and if black children, then again same problem.
                                                                                            if red deletable and red child- double red problem
                                                                                            if red deletable and black child- black height changes.
                                                                                        Copy the red child's key to black deletable key- delete the red node.
                                                                                            corresponds to node with 2 keys in the node.
                                                                            </Deletion>
                                                                            <Insertion>
                                                                                Being BST, search the key, if exists do nth, if doesn't find a location- color the node.
                                                                                Begin by coloring the node red.
                                                                                    so as to try not to disturb any black height.
                                                                                    with black no problem
                                                                                    But what if its parent was red? = double red problem (unlike deletion- here we deal with double red problem and not black height.)
                                                                                case 1- parent of inserted node (a) is red. Parent of a, b gotta be black.
                                                                                    assume other child of b is black c.
                                                                                    Do RR rotation- the node continues to remain (b,a,k) but not malformed like b4.
                                                                                    maps to rearrange the parent node (shifting of keys) for accomodating an extra node.
                                                                                case 2- parent of inserted node (a) is red and its sibling is also red. Parent of a gotta be black (else double red prob)
                                                                                    this corresponds to a split in 24 tree.
                                                                                    color the level2 relative into black and b gets red but what if its parent was red?
                                                                                        the problem is moved one level up towards the root.
                                                                                        and prob reduces to the case with subtrees modified.
                                                                                        up to the root- set the color of root to black (black height still same for all)
                                                                                    only recoloring the nodes- recoloring is very fast.
                                                                                        Both RB and AVL took O(logn) but constants of AVL are quite high.  
                                                                            </Insertion>
                                                                        </Operations>
                                                                    </RedBlackTree>
                                                                </Variants>
                                                            </BinarySearchTree>
                                                            <Tree234>
                                                                type of multiway trees.
                                                                <MultiwayTrees>
                                                                    For ordered dictionary ADT.
                                                                    Same performance guarrantees as AVL.
                                                                    They are search trees but not Binary (not BST) rather multi-way Search Trees.
                                                                        can have at least 2 children. 
                                                                        every node stores a collection of items of form (key, element)
                                                                        for d children, it can have (d-1) such items- key, element pairs.
                                                                            vs in BST, only 1 key,element per node (and a set of references for next nodes)
                                                                            These keys help us in decision making (go right or left)
                                                                                every pair of items in a node inform that the sandwitched reference takes us to a Tree (2-4 Tree) with items between the keys of the 2 items.
                                                                                    in other words, all children are between items.
                                                                                Extreme sides- say only less than and greater than.
                                                                    Search is similar to binary
                                                                        If s< k1 search the left most child, if s>kSub(d-1), search the right most child.
                                                                            ?BST is only a special case of these trees.
                                                                    Inorder Traversal- print all on nodes then back to parent touch upon a key, go to subtree, again back to parent's next key, again next subtree so on for all nodes.
                                                                        so yes, sorting order.

                                                                </MultiwayTrees>
                                                                <Property>
                                                                    At most 4 children
                                                                    All leaf nodes at same level.
                                                                    Height- at logn base 4 at least and at most logn base 2.
                                                                        worst case- binary tree (height is maximum), minimum when 4 children for all.
                                                                </Property>
                                                                    Time reqd for search- traverse height of node- every node has 3 comparisons to choose a branch.
                                                                        so O(3 logn) so O(logn)
                                                                    Insertion
                                                                        No problem if the node has empty space- fit in there.
                                                                            search for deserving position as in BST.
                                                                            within a node we keep them in sorted order- so do necessary shifting
                                                                        If no space available in the leaf nodes
                                                                            split the node into 2. (or create 2 nodes)
                                                                            Push elements 1/2 in first and 1/2 in second.
                                                                            Gotta link these 2 nodes to the parent.
                                                                                But 1 more child means extra branch meaning 1 more item in parent for branching purpose.
                                                                                    maybe larger of 1st or smaller of 2nd will serve well for it.
                                                                                    promote the chosen item to parent.
                                                                                    establish the necessary links.
                                                                            If parent doesn't have space, repeat the process 
                                                                                (split it) and create the necessary links with children-
                                                                                taking care that we are going to move larger above so no branching there.
                                                                                    2 children of 1st and 3 of 2nd.                                                                                            
                                                                                this manner splits can cascade.
                                                                                    may have to create a new root eventually.
                                                                        T(n)?
                                                                            O(logn)- node split takes O(1) time- only change of references.
                                                                            O(logn) to search and upward traversal may worst take O(logn) and O(1) for splitting nodes, changing references.
                                                                    Deletion
                                                                        search a node
                                                                        on leaf node
                                                                            If node doesn't become empty after removal, remove.
                                                                            if node becomes empty after removal- that's not permitted.
                                                                                Can I borrow from sibling adjacent
                                                                                    Spoils the Tree property- do some rotation.
                                                                                    The sandwiched key in parent node is used for rotation.
                                                                                Can not borrow from sibling's element
                                                                                    merge with sibling (on either side but adjacent)
                                                                                        Reduces the children of parent node so parent keys should decrease (branching decreased)
                                                                                            gotta bring 1 key from parent node down to the merged node;
                                                                                                the sandwiched key in parent node- moves downwards.
                                                                                                Do necessary changes of references.                            
                                                                                                What if only 1 key with the parent node?

                                                                                    can lead to cascade, borrow from parent until root or so.
                                                                        if internal node
                                                                            find largest using reference of smaller than key
                                                                                here unlike BST, it is bound to be the leaf node- why? 
                                                                                    take left and then all rightmost turns- until no right child (null)
                                                                                    proof by contradiction- if internal node- its right reference- will point to a node with elements greater than (but still lesser than element) that.
                                                                                swap these 2 and then remove the element.
                                                                                reduces to case 1.
                                                                        T(n) = THETA(logn) - cuz height bounded by base 2 and base 4.
                                                                    Implementation
                                                                        ?Recursion- 
                                                                            //Thoughts- Keep on merging with siblings until rotation is possible.
                                                                            delete the item- set the residual pointer to null (on leaf node)
                                                                            Every node checks if its child has gotten empty.
                                                                            If yes, get the "residual pointer"
                                                                            Check if child's any sibling (left or right) has extra items (case of rotation)
                                                                                If not, append/prepend (which is healthy- left/right) its item to healthy child (other references remaining same), add residual pointer aptly.
                                                                                    the pointer to the healthy child becomes the residual pointer
                                                                            Recursion takes care of the rest.
                                                                    Why study
                                                                        It's fun. another reason
                                                                        RB treee is very fast- helps there.

                                                            </Tree234>
                                                            <abTrees>
                                                                multiway search tree.
                                                                at least a children and at most b children.
                                                                How many keys between: a-1 to b-1.
                                                                Root can have less than 'a' children but at least 2 children.
                                                                All leaf nodes at same level.
                                                                Height, h = at least log n base b and at most log n base a.
                                                                (24)trees were just an instance of it.
                                                                <insertion>
                                                                    No problem if the node has empty space.
                                                                    if node is stuffed up, split the node- move median to the parent.
                                                                        this can cascade- if parent is stuffed up, split the parent, repeat the process.
                                                                        in 24 tree, the median could be 2 or 3 so we were picking them aptly.
                                                                        doesn't apply on root- cuz new node created- it has 1 key.
                                                                    Generalizing- node splits when it has exactly b keys
                                                                        median is promoted to parent.
                                                                        2 halves go to either nodes- CEIL((b-1)/2)
                                                                        but minimum in a node is a-1 so a-1 <= CEIL ((b-1)/2)
                                                                </insertion>
                                                                <Deletion>
                                                                    If node doesn't get empty, just do it.
                                                                    If node gets lesser than a-1, 
                                                                        borrow from sibling if possible- rotation.
                                                                            If parent becomes empty, repeat the process (same as 24)
                                                                        Merge when the node has a-2 keys and its sibling has a-1 keys- Mergednodes has 2(a+1) kyes.
                                                                            2(a-1)<=(b-1)
                                                                            So b>=2a-1 ;    // it means 5,7 tree is invalid but 5,9 isn't.

                                                                </Deletion>
                                                                <DiskStorageSpecialType>
                                                                    <BTree>
                                                                        Disk based DS
                                                                        B trees are ab trees with specific value of a.
                                                                        when large data to search, references were memory pointers
                                                                                transactions data- huge data- not in MM of PC.
                                                                                data lies in secondary storage
                                                                                Eg- Bank has record of customers- huge transaction data- on account number- retrieve data
                                                                                        1 GB data.
                                                                                So search tree structure which is secondary storage enabled.
                                                                                        so huge that it won't fit into memory.
                                                                                        disk access is very slow- so pay-off by reading data in pages (or blocks)
                                                                                        organize search tree- so sit suitably on disk (so large)
                                                                        Algo
                                                                                Time depends on CPU- insignificant
                                                                                disk access- make this small- maybe number of access.
                                                                        Pointers in DS are not addresses in MM but locations in files.
                                                                                for x pointer key[x] changes to DiskRead(x) and DiskWrite.
                                                                                Fetch page from disk and access that object. Modify x. Write back on disk.
                                                                        Operations
                                                                                DiskRead(x:pointer to a node)
                                                                                DiskWrite(x:Pointer_to_a_node)
                                                                                AllocateNode():Pointer_To_A_Node
                                                                        a-b tree
                                                                                Size of B-tree determined by page size- 1 page = 1 node of B tree
                                                                                Height is logarithmic say base 1000.
                                                                                1000 value of a- so at least 1001 children.
                                                                                Total number of keys= number of nodes * keys in a node/page
                                                                                Very huge can't keep on RAM (8 bits * number of keys reqd)
                                                                                We will keep these nodes as blocks on disk. Root stays in MM.
                                                                                        apt child node and bring in MM like that disk access (height of tree + actual record)
                                                                                        so to reduce the height of tree we make it base n huge. What stops us- Page size restricts keys+pointer.
                                                                                Node x say has
                                                                                        n[x] = number of keys
                                                                                        key1[x]< key2[x]< ..
                                                                                        leaf[x] = true is x is a leaf node else false
                                                                                        c1[x],c2[x],..cSUB(n[x]+1) = pointer to chilren (if internal node)
                                                                                Unlike a-b trees where b = 2a-1 lowerbound, 
                                                                                        here we want b should be 2a. every node has t to 2t children.
                                                                                                for disk we need to choose a big b- for large keys in 1 node.
                                                                                        root node can have between 2 and 2t children
                                                                                        Maximum height
                                                                                                n>= 1+(t-1).SIGMA((2t)^(i-1)) i from 1 to k = 2t^k - 1 so height = logn
                                                                                Searching
                                                                                        BTreeSearch(x,k){
                                                                                                i=1;
                                                                                                while(i <= n[x] and k > key(i,x))
                                                                                                        i++;
                                                                                                if(i <= n[x] and k = key(i,x))	//key found
                                                                                                        return (x,i);
                                                                                                if(leaf(x))	//no child exists- child(i,x) is NULL
                                                                                                        return NIL;
                                                                                                else{
                                                                                                        DiskRead(child(i,x));
                                                                                                        return BTreeSearch(child(i,x),k);
                                                                                                }
                                                                                        }
                                                                                Creation- Empty B-Tree- create a root and wirte it to disk!
                                                                                        BTreeCreate(T){
                                                                                                x = AllocateNode();
                                                                                                leaf(x) = true;
                                                                                                n(x) = 0;
                                                                                                DiskWrite(x);
                                                                                                root(T) = x;
                                                                                        }
                                                                                SplitNodes
                                                                                        2t-1 keys so adding 1 more splits it.
                                                                                        median goes up
                                                                                        BTreeSplitChild(x,i,y){	
                                                                                                // x:parent node, y:splitting node child of x, i: index in x, z:new node
                                                                                                z = AllocateNode();
                                                                                                leaf(z) = leaf(y);
                                                                                                n(z) = t-1;
                                                                                                for(j=1;j< t; j++)
                                                                                                        key(j,z) = key(j+i,y);
                                                                                                if(!leaf(y))
                                                                                                        for(j=1;j<=t;j++)
                                                                                                                child(j,z) = child(j+1,y);
                                                                                                n(y) = t-1;
                                                                                                for(j=n(x)+1;j>i+1;j--)
                                                                                                        child(j+1,x) = child(j,x);
                                                                                                child(i+1,x) = x;
                                                                                                for(j = n(x); j>=1; j--)
                                                                                                        key(j+1,x) = key(j,x);	//moving keys to right
                                                                                                key(i,x) = key(i,y);
                                                                                                n(x) = n(x) + 1;
                                                                                                DiskWrite(y);	//since these 3 are being changed
                                                                                                DiskWrite(z);
                                                                                                DiskWrite(x);		
                                                                                        }
                                                                                T(n): Running time will depend on number of disk accesses
                                                                                        2 loops run t times.
                                                                                Insertion- other way
                                                                                        2 pass- come down and go up
                                                                                        1 pass- if root is full then split the node.
                                                                                                and keep the nodes in disk to reduce disk access.
                                                                                        Highly interspersed insert and deletes- make it perform bad.
                                                                                        batch of inserts and deletes.


                                                                    </BTree>
                                                                </DiskStorageSpecialType>
                                                            </abTrees>
                                                        </Trees>
                                                    </Implementation>
                                                </OrderedDictionaries>
                                                <Strings>
                                                    <PatternMatching>
                                                        Pattern Searching or Matching
                                                            Find all occurrences of pattern P of length m inside the text T of length n.
                                                                    Editors and browser give this facility
                                                                    not exact matching- most of text (difference in 1 or 2 char is ok)
                                                                    bioinformatics- particular gene is searched- alphabet is small (4 amino acids), protein has 20 alphabet size.
                                                            <Naivemethod>
                                                                    look when match starts
                                                                    when it does traverse thru the pattern for possibility of match
                                                                    if it does, report
                                                                            if it doesn't, start matching process from 2nd char of text where pattern started to match.
                                                                            cuz pattern doesn't occur at multiples of m.
                                                                    Think of it as pattern moving along the text like a lizard along a short lane.
                                                                    T(n) = O(mn) (every guy may mismatch all last element), S(n) = O(m+n)
                                                                    Problem- very slow.
                                                            </Naivemethod>
                                                            <KMP>
                                                            KMP- Knuth Morris Pratt Algo
                                                                    Intuition- Can we be more clever
                                                                    why should we move back to 2nd char of where text started matching
                                                                            why not where mismatch started 
                                                                                    assuming characters are different
                                                                                    if they were same, then we would move aptly.
                                                                                    may move to text char where the pattern element repeats first its first char
                                                                            on match fully I will not jump the whole pattern
                                                                                    we are not looking for disjoint matches
                                                                    Observation- when mismatch occurs, we may not need to restart the comparison all way back (from the next input position)
                                                                    What to do- an array construction that determines how many chars to shift the pattern to right in case of mismatch during pattern matching process
                                                                            call the array H.
                                                                                    In the end shift the pattern such that they string till the mismatch matches.
                                                                                            smallest shift so as to not lose any pattern
                                                                                            largest so that don't waste any comparisons.
                                                                                    for each position i in pattern P, Define
                                                                                    H[i] = length of longest proper suffix (excluding mismatch) of P (1thru i) that matches a prefix of P and P(h[i]+1) != P[i+1]
                                                                                    //let me pick a different color now so that I can keep making it dirty.
                                                                                            cuz ultimately it is this prefix that goes and sits at the suffix.
                                                                                            eg- refer to notes- H[11] = 6 (jump to there); shift by 11-6 = 5 steps back
                                                                                                    there is a potential to match the mismatching element this time, starting from the mismatching element.
                                                                                                    always shift by i-H[i] places. If fully match, then by m-H[m] places.
                                                                                            we want longest such prefix so as to not lose out any pattern
                                                                            Correctness of KMP
                                                                                    if a prefix and b suffix match- and are the longest such match.
                                                                                    We are not missing any string- proof by contradiction
                                                                                            say, prefix c > a would prove to be a better prefix (and would eventually match- THERE EXISTS)
                                                                                            then pick d suffix from the pattern P s.t |c|=|d| (length)
                                                                                            We have c = d
                                                                                                    clearly d would have matched from the text before mismatch.
                                                                                                    And c by assumption matches till the mismatch
                                                                                            ?since c > a, a and b were not longest match. Contradiction.
                                                                                            c's + mismatching part matches this time. P[l] (latest pattern pos corresponding to mismatch) = T[k] (mismatch pos) != P[i+1] (mismatching char originally), hence P[l] != P[i+1]
                                                                                                    this is contradiction.
                                                                            Complexity
                                                                            This process happens over and over again on seeing a mismatch
                                                                                    No of successful comparisons = n (once a text char matches- it's never checked again)
                                                                                    No of unsuccessful comparisons, text never backtrack, shifts pattern forward until a match is found on the pattern (using H)
                                                                                            pattern may shift at most n number of times (size of text)
                                                                                            pattern shifts on seeing a mismatch (shifts towards the text (never to come back)) so at most n.
                                                                                    Total comparisons = 2n.
                                                                                    Bad Analysis will tell you that every unsuccessful comparison of a text may undergo O(m) time for unsuccessful char and n can be unsuccessful so O(mn)
                                                                                            #Think about it- on unsuccessful- the pattern shifts towards front and doesn't suffer m shifts of pattern.
                                                                                                    mismatch on first char of pattern just moves the text forward immediately.
                                                                                    So, 
                                                                                            T(n) = O(m+n) = Processing time and searching time.
                                                                                            S(n) = O(m+n) where m = |P| and n=|T|
                                                                            Computing array H- can be done in O(n)
                                                                                    H[i] = longest suffix which is also prefix.
                                                                                    Idea is to keep it preprocessed to minimize time taken.
                                                                                    Crude way
                                                                                            Check for all i, if it is the value j.
                                                                                                    j times I need to compare.
                                                                                                    SIGMA(j) from 0 to i-1 = i^2.
                                                                                            Computing it for all values of i, SIGMA(i^2) from 1 to m = m^3.
                                                                                    Idea
                                                                                            Why don't we use the previously calculated values of H.
                                                                                            If I know H[0..i-1] does that help me solve for H[i]?
                                                                                                    If P[i] = P[H[i-1]+1], then H[i] = H[i-1]+1
                                                                                                    else if P[i] = P[H[H[i-1]-1]], keep doing iteratively until they do- when they do- that value is given to H[i]
                                                                                            Why else if part works?
                                                                                                    H[i-1] (call P[i-1] as y) tells till which index-1 (from front) the P[i-1] matched, call it z.
                                                                                                            And z (i.e P[H[i-1]-1]) matched from 0 to H[H[i-1]-1]-1 (call this x)
                                                                                                            Thus, y = z and z = x so y = x (and can't be any bigger else z's calculated value gets falsified)
                                                                                                            If P[x+1] matches with P[i]- gotta increment H[i-1]
                                                                                                            else it didn't work and recurse for next H(H(i)).
                                                                            Result- T(n) = O(n) proportional to the size of text.	
                                                            </KMP>
                                                            <TRIES>
                                                                TRIES
                                                                    Preprocessing pattern- helped us solve in T(n) PROPORTIONALtO size of text.
                                                                    Preprocess the text- For size of shakespere, it is humungous- why don't we preprocess the text!!
                                                                    DS to maintain a set of strings as ordered tree.
                                                                <Standard>
                                                                Standard
                                                                        each node but root is labelled with a character.
                                                                                children of node are alphabetically ordered.
                                                                                Path- from external node to root- yields strings of S (in reverse)

                                                                                Arity of Tries depends on size of alphabet- say english lang (only small case)- 26 children possible.
                                                                        Implementation
                                                                                a-b tree- 26 letters in a node (No! No! Remember b =? 2a-1)
                                                                                Maintain as LL (waste time) at every node and not array.
                                                                                        or array (wastes space)
                                                                        Find, insert, remove operations
                                                                                Insert- go down the root- tracking all alphabets of the string.
                                                                                        when an alphabet is not found- create that alphabet node and add remaining alphabet nodes as children.

                                                                        Running Time (LL)
                                                                                T(n) = O(dm) where d = alphabet size and m = size of string involved in operation.
                                                                                        Worst case O(W).
                                                                                S(n) = O(W) - Total size of strings 
                                                                                        At worst all chars taken together
                                                                                        Better way- SIGMA (|Union of all chars at a given position of string|) over length of greatest string.
                                                                                                Number of nodes in this trie?
                                                                                                        = Total number of unique positional characters in all words.
                                                                        Application
                                                                                Word matching (first occurence of word) and prefix matching (first occurrence of longest prefix) in 
                                                                                        T(n) = O(m)
                                                                                Even in fact all occurences (preprocess the text)
                                                                                        extract all words and throw into trie.
                                                                                        the leaf stores what all places it appeared
                                                                                        time almost the size of word.
                                                                                Falls flat scenarios- In some situations there is no conception of word (like sequence of bases in DNA)
                                                                                        what if searching "be all", I can't
                                                                                        I can do cuz there is well defined boundary.
                                                                                        Q- what if one word is prefix of the other.
                                                                </Standard>
                                                                <Compressed>
                                                                        Trie with nodes of degree at least 2.
                                                                        Nodes with 1 child are collapsed into parent by compressing chains of redundant nodes.
                                                                        Now, node can have a string as its label.
                                                                        Storing a node
                                                                                keeping in array.
                                                                                The labels will be substring of at least 1 word.
                                                                                //some of them are right also- take the positive side.
                                                                                        need to store these labels
                                                                                        stored as numbers
                                                                                        Eg- id in did- this will be substring of the word ( all words kept in an array)
                                                                                                each word as 3 numbers- index of 2-D and start index and end index in 1-D part of it.
                                                                                                Or 1-D text array and its indices.
                                                                        Operations
                                                                                Insertion/Deletion in compressed Trie
                                                                                        we can always write the content of the label on its incoming edge from parent (if space doesn't permit)
                                                                                        search for the word using the trie, use first letter to decide which path to take-
                                                                                                if no string matches- break it aptly to take out the prefix common part as a node and make children aptly.
                                                                                Deletion- search if leaves 1 child of the parent- then merge it with parent.
                                                                                        do it once not multiple times.
                                                                        Performance
                                                                                S(n) = Number of nodes = O(s) where s = |S|	//no of words.
                                                                                No of words = no of leaves = 1/2 (total nodes)
                                                                                        Claim- A tree in which every node has at least 2 children has at most L-1 internal nodes, where L is number of leaves.
                                                                                                Prove by Induction (Home work)
                                                                        Use of Trie
                                                                                Used in web search- google retrieves word
                                                                                        index of a search engine (collection of all searchable words) is stored into a compressed trie.
                                                                                        Each leaf of the trie os associated with a word and has a list of pages (URLs) containing that word, called occurrence list.
                                                                                        any search engine would do this (not that google does it)
                                                                                        Kept in MM (internal memory)
                                                                                        Occurrence lists are kept in external memory and are ranked by relevance.
                                                                                        Multiple words- use AND (intersection)- on occurrence list.
                                                                                        Of course, Additional information retrieval techniques
                                                                                                Stopword elimination- ignore "a"
                                                                                                Stemming- identify "add","added","adding"
                                                                                                Link Analysis- Recognize authoritative pages.
                                                                                Used in Internet routers
                                                                                        Computers on internet by 32 bits IP (represeneted by dotted quad decimal form usually(aliased by domainnames))
                                                                                        nslookup on unix.
                                                                                        Organization uses subset of IP addresses with the same prefix.
                                                                                                eg- IITD uses 10.*.*.*
                                                                                                How would searching happen (imagine 2^24 addresses linear search)
                                                                                        Data is sent to a host by fragmenting it into packets.
                                                                                                each packet carries the IP address of its destination.
                                                                                                A router forwards packets to its neighbors using IP prefix matching rules.
                                                                                                Routers use tries on the alphabet 0,1 to do prefix matching.
                                                                                                It chooses the one which shows the longest match.
                                                                                                        Eg- 10.26.37.54 vs 10.36.24.155- for the packet 10.36.25.14- it will take 2nd route.
                                                                </Compressed>
                                                                <SuffixTree>
                                                                                Pattern matching revisted
                                                                                        Use a tree structure where all suffixes of the text are represented
                                                                                        search for the pattern by looking for substring of the text
                                                                                        You can easily test whether P is a substring of T because any substring of T is the prefix of some suffix of T.
                                                                                How many suffixes of size t, t suffixes.
                                                                                        create all suffixes of the string.
                                                                                        store them as a compressed trie.
                                                                                        so O(s) again = size of chars.
                                                                                        S(n) = O(n).
                                                                                        why suffixes- if searching for "ab"- trie is very discrete- and we want to say that it appears somewhere.
                                                                                        use special character $- what is special about dollar? nth special about dollar- just marks the end.
                                                                                How to build it	
                                                                                        make one edge for whole text and with every next suffix (by elimination)
                                                                                        keep adding new edge or branch and add new edge (by splitting)
                                                                                        Total time= O(n^2).
                                                                                                n words and i length word takes O(i) times so SIGMA.
                                                                                        Pattern is a prefix of a suffix of T.
                                                                                        obtained as concatenation of labels of edges along the path beginning at root.
                                                                                                only starting index needed at leaf to indicate start node.
                                                                                                when a pattern matches at node- go reach out all the leaf nodes from there and those are occurences.
                                                                                        There exists O(n) procedure- fairly complicated.
                                                                                Now, complexity-
                                                                                        Preprocessing = O(n) (but saw only O(n^2))
                                                                                        Searching= O(m+k) where k is no of occurences of P in T.
                                                                                                if appears 1000 times in text?
                                                                                                traversal may use preorder traversal.
                                                                                                S(n) = O(m+n)
                                                                </SuffixTree>
                                                                <Application>
                                                                    <DataCompression>
                                                                        <FileCompression>
                                                                            Need- transfering files- lesser bits and storing.
                                                                            Text is stores as 8-bit ASCII code (man ascii to see it)
                                                                            Fixed length encoding- same number of bits for each character
                                                                                    8*|chars|
                                                                                    Fix length of chars so read those many bits and assert the unique char it maps to.
                                                                            To reduce the space, note that some chars are more frequently, likely to occur than others.
                                                                                    some chars should have 2 bit associated with them (more frequent ones)
                                                                            Variable length encoding- frequently occuring chars have lesser bits.
                                                                            Eg- JAVA- if only 3 chars in alphabet- 2bits I would need.
                                                                                    I choose to use 0 for a and j and v thru 11 and 10- 6 bits (lesser)- 110100
                                                                                    vs 11001000.
                                                                                    How do you decode (probs in ambiguity)?
                                                                                            I should retrieve the word (say java back)
                                                                                            vs a = "0", j = 01, v = 00
                                                                                            encoded text 010000 (6 bits) but can't decrypt.
                                                                                            it could be "java" or "jvv" or "jaaaa".
                                                                                            Prefix rule- no code is prefix of another.
                                                                                                    Eg- a,j,v = 0,11,10 (satisfies)
                                                                                                    !Eg- a,j,v = 0,01,00 (code of a is prefix of that of j and v)
                                                                        </FileCompression>
                                                                        <EncodingTrie>
                                                                            to satisfy this prefix rule
                                                                                left child means 0 and right means 1.
                                                                                for a char- the seq of bits is called code word and entire list is called code.
                                                                            Represent codes as a trie.
                                                                                since each char corresponds to a leaf (a coding that breaks prefix rule would fail- not reach leaf)
                                                                            If I give an encoded text and a trie
                                                                                how would you decrypt- keep writing chars with traversals on trie.
                                                                                T(n)- O(number of bits in encoding)
                                                                                    I check a bit and look one level down the trie.
                                                                            Trie this!
                                                                                exercise on notes
                                                                            Optimal Compression
                                                                                How to ensure that encoded text is as small as possible
                                                                                Consider frequency of all chars in the word- ABRACADABRA
                                                                                    29 bits for encoding in notes slides.
                                                                                    another encoding gives 24 bits. so design issue.
                                                                                No of bits to encode a char is its level number in trie.
                                                                                    char being a leaf.
                                                                                    Thus, given f(i)- frequency of ith character and l(i) level of the leaf corresponding to it.
                                                                                        we want to minimize SIGMA (f(i)*l(i))
                                                                                        called the total external weighted path length (WEPL) of a tree- 
                                                                                            so called? path length(l(i)), weighted (or frequency (f(i))), external(of chars), total (SIGMA)
                                                                                        use a tree in that way!
                                                                                        translated question to finding apt tree.
                                                                        </EncodingTrie>
                                                                        <HuffmanTrie>
                                                                            <Implementation>
                                                                                    Huffman Encoding Trie
                                                                                    write freq of all chars
                                                                                    take those with smallest freq chars and combine them as leaves and node connecting them gets sum.
                                                                                    recurse this on all the nodes. 
                                                                                    this will go on for n-1 times.
                                                                                    More than 1 huffman trie(when 2 possibilities choose anyone of them)- but all perform same.
                                                                                    ABRACADABRA- 0,100,101,0,110,0,111,0,100,1010 (refer notes)
                                                                                    Claim is this will be least.
                                                                            </Implementation>
                                                                            <Correctness>
                                                                            Correctness- Proof by induction
                                                                                    true when 2 leaves
                                                                                    suppose true when n-1 chars.
                                                                                    in optimum tree the leaves with 2 lowest weights are siblings.
                                                                                        say, The smallest node appears not at greatest depth but somewhere lesser height- then we can always swap it with greatest depth to obtain mimimum WEPL.
                                                                                        same argument for 2nd smallest node also- say it appears somwhere else- swapping that with this- will reduce our WEPL.
                                                                                    combine smallest freq nodes to 1 (thru a parent node) as if having 1 node with f1+f2 (algo behaves as n-1 chars (f1+f2,f3,..))
                                                                                        how much will this step change our WEPL (refer formula)- all nodes keep same height and fi.
                                                                                        so f1(x+1)+f2(x+1)-(f1+f2)x = f1 + f2 (reduced by f1+f2)
                                                                                    We now argue that WEPL(f1,f2,...,fn) = f1+f2+WEPL(f1+f2,f3,..fn)
                                                                                        #WEPL(f1 thru fn) as made thru our algo will generate the RHS
                                                                                            On merging smallest nodes, the RHS is obtained.
                                                                                            claim is tht WEPL(f1+f2,..fn) will prove to be the best Trie and no1 else.
                                                                                            Proof by contradiction- 
                                                                            </Correctness>
                                                                        </HuffmanTrie>
                                                                    </DataCompression>
                                                                </Application>
                                                            </TRIES>
                                                    </PatternMatching>
                                                </Strings>
                                                <PriorityQueues>
                                                    Situ
                                                        Multiuser OS- n users submit jobs to run on a single processor.
                                                            Assume- we know time jobs require and can preempt (pause and resume)
                                                            SRPT reduces waiting time (exec process which has remaining time is least)
                                                                smaller job arrive in middle- schedule new job.
                                                                Ops reqd- RPT of unfinished jobs (at any time), finding job with SRPT, remove on finish, add on arrrival.
                                                    ADT- Priority Queue lets us do it.
                                                        maintains a set of elements (having priority value (PV)-misnomer here)
                                                        Operations
                                                            Insert()- S = S U {x}
                                                            Minimum- smallest PV returned
                                                            Delete-min()- removes and returns smallest PV element.
                                                            PV not unique
                                                            Total Order Relation (<=)- 
                                                                Reflexive (k<=k), Antisymmetric(k1<=k2 and k2<=k1 means k1=k2), Transitive (k1<=k2,k2<=k3 means k1<=k3)
                                                        Uses Comparator ADT
                                                            External to the keys- compare 2 objects.
                                                                we can even compare people- given a comparator- criteria of comparison.
                                                            to compare 2 keys- Priority Queues use comparator they were given.
                                                            Thus PQ general enought to store any object.
                                                            Operations
                                                                isLessThan(a,b),isLessThanOrEqualTo(),
                                                                isComparable(a), isGreaterThan(a,b), isEqualTo(a,b)
                                                    <Implementation>
                                                        <UnsortedArray>
                                                            add in the end of sequence- O(1)
                                                            unordered- minimum finding takes O(n)
                                                        </UnsortedArray>
                                                        <SortedSequence>
                                                            minimum and delete-min- O(1)
                                                            Insert- O(n)- find location and shift
                                                        </SortedSequence>
                                                        <BinaryHeap>
                                                            <Applications>
                                                                Job scheduling (in shared computing resources in UNIX)
                                                                Even Simulation
                                                                Building block for other algos.
                                                            </Applications>
                                                            <Properties>
                                                            Binary Heap- A Binary Tree that stores priorities pairs (PV and element) at nodes
                                                                Structural Property- All levels except last are full- last being left filled.
                                                                Heap Property- Priority of node is at least as large as that of parent.
                                                                    Or iow, priority of node <= children.
                                                                    !Eg- any node violates, any missing child in left filing.
                                                                Finding minimum element-
                                                                    always at the top of the heap O(1)- proof by contradiction.
                                                            Height- being left filled
                                                                2^h - 1 < n <= 2^(h+1)-1
                                                                so h = log n base 2 floor.
                                                            </Properties>
                                                            <Implemenation>
                                                                can use binary tree
                                                                Using Arrays
                                                                    Parent(i) = FLOOR(i/2)
                                                                    Left(i) = 2i
                                                                    Right(i) = 2i+1
                                                                To visualize assistance- write array s.t all layers in the tree are in different colors in array.
                                                                    A[Parent(i)]<=A[i]
                                                                <minHeap>
                                                                    For finding minimum, this works best of all DS.
                                                                    T(n)
                                                                        Insertion- O(logn)
                                                                        Find Min- O(1)
                                                                        Delete Min- O(logn)
                                                                    <Variants>
                                                                        of Binary tree, ternary tree or n-ary tree.
                                                                        maxheaps- children of any nodes will be smaller than itself.
                                                                    </Variants>
                                                                    <Property>
                                                                        An almost complete binary tree (all nodes have 0 or 2 children)
                                                                            Refer to complete binary tree properties- it will be helpful.
                                                                            Fill element at a level before going to further levels and start filling from left.
                                                                        Children of any node will be larger than itself OR in other words, for any subtree, its root is smallest.
                                                                    </Property>
                                                                    <Implementation>
                                                                        LL- needs a lot of storage.
                                                                        Array- better way. Interpret array as min heap.
                                                                            Root is at index 1. for left children, use 2i, for right, use 2i+1.
                                                                            Parent of any node is i/2 (only do left shift)
                                                                            How to check heap property- compares indices in multiples of 2. A.heapSize=No of Nodes upto the level that heap property breaks.
                                                                            More than 1 way to form a heap from a set of numbers.
                                                                            Ordered array is always a heap. So, O(nlogn) we can make a heap using sorting but better routine O(n).
                                                                            <Routines>
                                                                                Assumption- n/2 + 1 to n will all be leaves.
                                                                                <MaxHeapify>
                                                                                    Inspiration
                                                                                        MaxHeapify- maintaining heap property when the element node has lost its property (left and right child are heaps (important))
                                                                                            Sorting does it in O(nlogn) but this in O(n)
                                                                                            Approach 1- Individual elements are heaps in their own rights. Take heap property from leaves to root
                                                                                                Eg- 1 5 6 8 12 14 16- for max heap - if n=7 then leaves 3+1 to 7= 4 thru 7.
                                                                                                    n=6 and 7 but their parent 3 is violating the heap property. find max of all and swap with children if needed. Go reverse in this sequence.
                                                                                                Eg- 9 6 5 0 8 2 7 1- write them in form of a tree. go reverse with binary children and traverse upwards.
                                                                                                    n=8, so 5 to 8 are heaps. Start apply from 4 thru 1- comparing with children.
                                                                                                    heart of the algorithm is if left and right sides are heap- we can merge them with a number- by comparing their roots with the number.
                                                                                    Code- starts with MaxHeapify(A,1)?
                                                                                        MaxHeapify(A,i){
                                                                                            l=2i; r=2i+1;
                                                                                            if(l<=A.heapSize and A[l]>A[i])
                                                                                                largest = l;
                                                                                            else largest = i;
                                                                                            if(r<=A.heapSize and A[r]>A[largest])
                                                                                                largest = r;
                                                                                            if(largest != i)
                                                                                                swap(&A[i],&A[largest]);
                                                                                                MaxHeapify(A,largest);
                                                                                        }
                                                                                        Analysis
                                                                                            Drags the only non-heap on top and drags it down to make heap.
                                                                                                dragged until it proves to be at its worthy place
                                                                                                Correctness
                                                                                                    element traces down the tree- chosen element for moving up is always priority lower than their siblings (by algo)
                                                                                                    so the heap property continues to hold.
                                                                                            T(n)= 2 comparisons for moving 1 level down- THETA(logn) levels so THETA(logn).
                                                                                            S(n)= No extra space and recursive calls on stack = O(logn) so k*logn = O(logn)
                                                                                </MaxHeapify>
                                                                                <BuildMaxHeap>
                                                                                    We start from the bottom and move up (making heap)
                                                                                        Proof of correctness- the children have to be heaps to run heapify procedure.
                                                                                        Induction on i, all trees rooted at m>i are heaps.
                                                                                    All leaves are heaps to begin with.
                                                                                    Code
                                                                                        BuildMaxHeap(A){
                                                                                            A.heapSize=A.length;
                                                                                            for(i=A.length/2 downto 1)
                                                                                                MaxHeapify(A,i);
                                                                                        }
                                                                                    Iterative Version- 

                                                                                    Analysis-
                                                                                        you may think that n/2 elements and every 1 gets logn time (heapify procedure n times)- so nlogn- it is wrong analysis (not bad analysis)
                                                                                        Eg- 8 nodes of height 0, 4 nodes of height 1, 2 of 2, 1 of 3.
                                                                                            at height h, we will have Ceil(n/(2^(h+1))) nodes.
                                                                                            at any height, maxHeapify takes O(h) time- so height 1, takes log(1), 2 takes log(2),..
                                                                                            If I apply maxHeapify, to all nodes at height h, it will take Ceil(n/(2^(h+1))).O(h). 
                                                                                            Let take over the tree, SIGMA(n/2^h).h for h from 0 to logn <= SIGMA(n/2^h).h for h=0 to INFINITY.
                                                                                            take n outside- n.SIGMA(h/2^h)=O(n)
                                                                                                How? Following trick-
                                                                                                SIGMA(x^i) = 1/(1-x) if |x|< 1
                                                                                                differentiate we get- SIGMA(i.x^(i-1)) = 1/(1-x)^2
                                                                                                multiplying both side by x, SIGMA(i.x^i) = x/(1-x)^2
                                                                                                substituting x = 1/2 we get, SIGMA(i/2^i) = (1/2)/(1/4) = 2
                                                                                        T(n) = O(n)
                                                                                        S(n) = O(logn)- maxHeapify is called over and over again in iteration.
                                                                                </BuildMaxHeap>
                                                                                <FindMax>
                                                                                    O(1)
                                                                                </FindMax>
                                                                                <HeapExtractMax>
                                                                                    HeapExtractMax(A){
                                                                                        if(A.heapSize< 1)
                                                                                            error"heap underflow"
                                                                                        max = A[1];
                                                                                        A[1] = A[A.heapSize];
                                                                                        A.heapSize = A.heapSize - 1;
                                                                                        maxHeapify(A,1);
                                                                                        return max;
                                                                                    }
                                                                                    Analysis- Keep last index at 1st index and let heapify do its job.
                                                                                    T(n)=S(n)=O(logn)
                                                                                </HeapExtractMax>
                                                                                <HeapIncreaseKey>
                                                                                HeapIncreaseKey(A,i,key)    //increaswe the value of node
                                                                                    HeapIncreaseKey(A,i,key){
                                                                                        if(key< A[i])
                                                                                            error
                                                                                        A[i]=key;
                                                                                        while(i>1 and A[i/2]< A[i])
                                                                                            swap(&A[i],&A[i/2]);
                                                                                            i/=2;
                                                                                    }
                                                                                    Analysis- T(n)=O(n), S(n)=O(1)
                                                                                        DecreaseKey will go down- heapify!
                                                                                </HeapIncreaseKey>
                                                                                <Insertion>
                                                                                    Insertion- place it at the end and let it rise using HeapIncreaseKey.
                                                                                        say increased from -INFINITY to the key.
                                                                                        Bubble it up- using swaps
                                                                                        Or find its location and push all elements below down 1 step.
                                                                                    Correctness-
                                                                                        Contents change along the path from leaf to root- heap property may break only at those nodes.
                                                                                        But new content of these nodes only have lower priority than b4.
                                                                                    T(n) = O(logn)
                                                                                </Insertion>
                                                                                <DeleteMin>
                                                                                    using heapify on root may not be a good idea as it will leave the the leaf not left filled.
                                                                                    So better 
                                                                                        Remove the root element (min)
                                                                                        Remove the last element of the array (heap) and place it at root
                                                                                        Apply heapify on root.
                                                                                    O(logn)
                                                                                </DeleteMin>
                                                                                <HeapSort>
                                                                                    Create a heap
                                                                                    Do delete-min repeatedly till heap becomes empty.
                                                                                        Place deleted element at the last- and remove the element from part of heap.
                                                                                        Apply heapify on root.
                                                                                    To do an in place sort, we move deleted element to end of heap.  
                                                                                    T(n) = O(nlogn)
                                                                                </HeapSort>
                                                                            </Routines>
                                                                    </Implementation>
                                                                    <Summary>
                                                                        Summary- Operation for which the DS is built- it does brilliant.
                                                                            FindMax- O(1)
                                                                            DeleteMax- O(logn)
                                                                            Insert- O(logn)
                                                                            IncreaseKey- O(logn)
                                                                            DecreaseKey- O(logn)
                                                                            It is still an array- 
                                                                                finding minimum in maxheap is O(n)
                                                                                Search- O(n)
                                                                                Delete- O(n+n)= O(n)
                                                                    </Summary>
                                                                </minHeap>				
                                                            </Implemenation>
                                                        </BinaryHeap>
                                                    </Implementation>                                                
                                                </PriorityQueues>
                                                <Graphs>
                                                    Defn- A graph G = (V,E)
                                                        V: set of vertices
                                                        E: set of edges connecting the vertices in V.
                                                            e = (u,v) BELONGS E where u,v BELONGS V.
                                                        Eg- G s.t V= {a,b,c,d,e}, E={(a,b),(a,c),(a,d),(b,c)}
                                                    Applications
                                                        Electronic circuits- find the path of least resistance
                                                        Networks- roads, flights, communications.
                                                        lifestyle of CS201 stud.
                                                    <Terms>
                                                        Adjacent Vertices- connected by edge.
                                                            Complete Graph- all pairs of vertices are adjacent. |e| = m = n(n-1)/2 (cuz nC2 or every node can connect n-1 counted twice)
                                                        Degree (of a vertex)- # of adjacent vertices.
                                                            sum of degree of all vertices= 2*e (cuz adjacent vertices count edge twice)
                                                        <Path>
                                                            sequence of V s.t consecutive vertices v(i),v(i+1) are adjacent.
                                                            Simple Path- no repeated vertices.
                                                                Cycle- first and last vertices are same.
                                                            Connected graph- any (all) 2 vertices are connected (not necessarily adjacent).
                                                                Connected component- maximal connected subgraph. Eg- a graph has 3 connected components
                                                            Eulerian tour- Bridges of Koenigsberg- postman doesn't want to retrace steps- not possible.
                                                                Graph Model with parallel edges
                                                                Path that traverses every edge exactly once and return to first vertex ("cycle" (not really cuz not simple) covering all edges)
                                                                Theorem- a graph has a eulerian tour iff all vertices have even degree (going and coming)
                                                            <ShortestPathProblem>
                                                                Desirable- Prim's algorithm
                                                                <SSSP>
                                                                    Single Source Shortest Path.
                                                                    Well defined for directed graph. Consider G = (V,E), function l:E->R+.
                                                                    Given a source node s and destination (termination) node t.
                                                                        Many paths possible between 2 nodes- we want to tell the smallest (SIGMA(li))
                                                                        ?enumeration of all paths- use traversal of graph. (BFS for no of edges smallest)
                                                                        Also longest path problem.
                                                                    Solution
                                                                        Why not enumerate all paths and find out their respective weights, report the minimum.
                                                                            It is not impractical. There can be exponential # of paths.
                                                                            Why would I take cycle- all edges are positive- and I want mimimum.
                                                                            Eg- 2 edges outincident from every node. 
                                                                                n = 3k+1 vertices for k diamonds.
                                                                                2^k different paths between S and T = 2^(n/3) paths- this is humungous- say n = 100 vertices.
                                                                                = no of particles in universe.
                                                                        <DijkstraAlgorithm>
                                                                            Pronunciation- 'j' is spoken as 'y' so "diykstra"
                                                                        Break the journey into junctions and find smallest distance to the junctions.
                                                                            Proof by contradiction- say s to x is not smallest- another s to x path which is smaller will make s to t smaller. contradiction.
                                                                            But no junction is specific for the smallest route.
                                                                                So we will compute the shortest path from s to every vertex in G.
                                                                            s to 1-edge distance- the smallest adjacent vertex is obviously the smallest.
                                                                                any other edge + some positive number will only increase it.
                                                                                can't say the same about other edges (say v2)- cuz the smallest edge might in 1 or more hops reach the node (under consideration) in lesser distance.
                                                                                But I can say for sure that l1 <= d[v2] <= l2, similar for all adjacent to s.
                                                                                1 correct distance is found.
                                                                            Now how to come up with confirm shortest distance of another vertex.
                                                                                consider the cut (as in prim's)- and check cumulative shortest distance (kept with the vertex)
                                                                                    this is next shortest distance for sure.
                                                                                    There can't be any path smaller- any other cumulative path is greater and plus some positive number (for hops) definitely increase.
                                                                                    Make 2 sets S and S'- S being the the set of vertices to which shortest distance is being found.
                                                                                        all vertices v BELONGS S'- d[v] denotes the upperbound on the length of shortest path from s to v.
                                                                                        all vertices v BELONGS S- d[v] denotes the length of shortest path from s to v.
                                                                                        Find the vertex in S' for which d[v] is the min, is moved towards S.
                                                                                        How does d[w] for all w in S' change when v in included. all w have their previous upper bound
                                                                                            with v being taken to S, the cumulative weight thru v if lesser than previous, should be updated.
                                                                            Pseudo Code-
                                                                                for all v in V, 
                                                                                    d[v] = INFINITY
                                                                                    H.insert(v,d[v]);
                                                                                d[s] = 0;
                                                                                H.decreasePriority(s,0);
                                                                                while(!H.empty()){
                                                                                    v = H.deleteMin();
                                                                                    for all w outadjacent to v{
                                                                                        //w should be in S'- not necessary- cuz S is secure with smallest values.
                                                                                        d[w] = min(d[w],d[v]+l(v,w));
                                                                                        H.decreasePriority(w,d[w]);
                                                                                    }
                                                                                }
                                                                            Analysis-
                                                                                Along the lines of Prim's (version 2)
                                                                                    label[v] = min(l1,l2,l3);
                                                                                    d[v] = min(d[w1]+l1,d[w2]+l2,..);   //?d[v],d[w1]+l1,..
                                                                                T(n)?
                                                                                    same as prim's- SIGMA(deg(v).logm) = O(mlogn)
                                                                            Correctness- 
                                                                                why l: E-> R+ (and not -)   //cuz R- may reduce the edge distance later- can't be confident.
                                                                                d[w] in S' will only decrease (never increase)
                                                                                d[u] = length of shortest path from s to u that includes only vertices from s.
                                                                                when some w moves across from S' to S- it's adjacent all u, get d[u] = min(d[u],d[w]+l(w,u))
                                                                                Formalize- For All x BELONGS S: d[x] is the length of the shortest path from s to x.
                                                                                        AND for all x BELONGS S': d[x] is the length of the shortest path from s to x which includes only vertices of S.
                                                                                        Proof thru induction
                                                                                Base case- when s in S and others in S'- when smallest from s is included.
                                                                                    Eg is to facilitate understanding- doesn't prove anything.
                                                                                    Both properties hold- generalize it over l1,l2,..ln- vertices have l1,l2,etc written on them- pick the one with least.
                                                                                Claim- after moving w, For All x BELONGS S': d[x] is the length of the shortest path from s to x which includes only vertices of S.
                                                                                    Possibilities of reaching any u
                                                                                        goes thru another vertex in S to u- captured in d[u] (previously)
                                                                                        goes thru w in S to u in S'- updating value
                                                                                        goes thru w in S to another vertex in S to u- length (not distance) only increases 
                                                                                            how? let's say from x in S it is adjacent to u in S'.
                                                                                            lesser than s thru w to x to u, would have been s thru x to u (cuz x being in S has smallest distance from S)
                                                                                                length of S thru w to x to u is no less than the path s thru x to u.
                                                                                            then in this case, it's already been acounted for in d[u] (<= S->x->u)
                                                                                        // "kucch" nahi samajh mein aa rahaa ya "kucch nahi" samajh mein aa raha.

                                                                                Claim- that d[w] is the length of shortest from s to w (we are justified in moving w to S)
                                                                                    iow- after moving w, For All x BELONGS S: d[x] is the length of the shortest path from s to x.
                                                                                    Proof by contradiction- say its not best- thru some x, it is best
                                                                                        say it jumps thru x to w (d[x] + positive distance from x to w)- so >= d[w]. Contradiction.
                                                                                        So justified in moving w across.
                                                                            Variant- edges with negative length
                                                                                st no notion of smallest path- cuz cycle adds up to R- (negative cycle) then shortest path not defined (-INFINITY)
                                                                                Is it artificial to have negative length?
                                                                                    7 Pays you to go from 1 place to another- petrol is given for free there.
                                                                                        generally we pay to go from 1 place to another on graph.
                                                                                    Currency trading- you are global currency trader- gain or loss represented by edge.
                                                                                        in exchange- profit along the edges and nodes are different currencies.
                                                                                        you detect positive cycle and keep making money- see how wonderful.
                                                                                        we need longest cycle in that case.
                                                                                Can Dijksta work?
                                                                                    add all edges by +k (some k)- so that no negative.
                                                                                        it won't work. No of edges along 1 path may be different along another path.
                                                                                        counter eg- 100 edges form shortest path and 3 edges bulky- are larger.
                                                                                            when we add +10 (to counter negative lengths)- shortest path may become bigger than 3 bulky edges.
                                                                                            3,2,2 vs 1,1,1,1,1,1,1,-1 - adding +1 to counter -1- we get 3+1,2+1,2+1 = 8 + 3 = 11 vs 1+1,....,-1+1 = 6+8 =14
                                                                                    it falls flat cuz- while including smallest d[w] there is a chance that some other u in S' can add negative edges to make d[w] even smaller.
                                                                            But we have not found shortest path (only shortest path length)
                                                                                when d[w] is made smaller just remember who (which vertex) made is smaller.
                                                                                the vertex that made it smaller similarly remembers and so on till s (source)
                                                                                while moving w to S- the smaller making u-will be important.
                                                                                with each vertex, we maintain a predecessor information (array) if w = pred[u] then w is the vertex preceding u on the best path from s to u.
                                                                                    if shortest path to u, then shortest path to w (best path)
                                                                                    just add to your code- along with update d[u] in S'- add statement- prev[u] = w;
                                                                                    previous vertex is unique- cuz 2 routes merging on a point- form a "cycle"- we will prefer the smaller of 2 for smallest.
                                                                                    so kinda no cycle permitted- so it will have n-1 edges (or predecessor edges)
                                                                                    so in this tree, I can reach any vertex from s (branching- had been MST if undirected)- all shortest path captured.

                                                                                Printing the path- ?stack- you read it in reverse order for now.
                                                                                    x=v;
                                                                                    while(x!=null){
                                                                                        print(x);
                                                                                        x=pred[x];
                                                                                    }
                                                                                    print(s);



                                                                        </DijkstraAlgorithm>
                                                                        <BellmanFordAlgorithm>
                                                                            aka Gossip algorithm
                                                                            when edges are permitted to have negative edges. l:E->R.
                                                                            cycle in middle can have
                                                                                positive length- ignore them- only adds up.
                                                                                negative length- undefined- -INFINITY
                                                                                0 length- why take it at all.
                                                                                so there exists a simple path- so our attention focussed on simple path.
                                                                            Information is being gossipped about between nodes.
                                                                                what is being gossipped? the shortest length- how uninteresting!
                                                                                on hearing that adjacent node could be reached in n- add the edge length and update distance of the vertex.
                                                                                    update if becomes lesser else do nothing.
                                                                                    propagate the update to neighbors thru to all- we call it 1 round.
                                                                                1 round- is like bell rings and all nodes tell their neighbors. 1 edge distance transmission.
                                                                                    Implement- every node takes its inadjacent vertices and updates itself if needed
                                                                                How many rounds are reqd?
                                                                                    stop when information stops to change (like bubble sort with early exit)
                                                                                    n -1 because path is simple.
                                                                            Claim- If the shortest path from s to vertex x has l edges on it then d[x] gets the right value after l rounds.
                                                                                Proof by induction- on l. 
                                                                                    if l = 1, then after 1st step 1-edge distance node will get correct value.
                                                                            Pseudo-code
                                                                                d[s] = 0;
                                                                                for all v BELONGS V-s
                                                                                    d[v] = INFINITY
                                                                                for(round = 1; round< n; round++)
                                                                                    for all v           //order not important. at least impact of 1 round will definitely be visible.
                                                                                        for all w inadjacent to v
                                                                                            d[v] = min(d[v],d[w]+l(v,w));
                                                                            Performance-
                                                                                T(n) = O(mn)
                                                                            Correctness- 
                                                                                along the factual shortest path- after n-1 rounds- the t will get the labels of l1+l2+..+ln-1.
                                                                                for correctness we have to argue that it will not get anything lesser than l1+l2+..l(n-1)
                                                                                If a vertex gets a certain distance label d in round r, then we have found a path of length d from s to v.
                                                                                    Induction on r- up to r-1,u had label d[u], after r, v gets label d cuz d = d[u] + l(u,v)
                                                                                2 or more updates (cuz of sequential streak) happening in 1 round doesn't affect at all.
                                                                                Let's modify to avoid doing it (not necessary)- store in new array from old array and no refreshing in old array.
                                                                                    x[v] = min(d[v],d[w]+l(v,w))
                                                                                    d = x;  //copy the array.

                                                                                Presence of negative cycle- if V's iteration also changes/ leads to updation- then there is a negative cycle.
                                                                        </BellmanFordAlgorithm>
                                                                        <BestOnes>
                                                                            Positive- O(m+nlogn)
                                                                            Negative- O(mn)
                                                                        </BestOnes>
                                                                </SSSP>
                                                                <APSP>
                                                                    <Extensions>
                                                                        <Dijkstra>
                                                                            Positive edge lengths- for all vertices, do dijkstra (to find shortest to all other vertices)
                                                                                O(mnlogn)
                                                                        </Dijkstra>
                                                                        <BellmanFord>
                                                                            T(n) = n.(mn) = O(mn^2)
                                                                        </BellmanFord>
                                                                    </Extensions>
                                                                    <FloydWarshallAlgorithm>
                                                                        for all nodes as pitstops
                                                                            find how the APSP changes (tabular form)
                                                                        Performance- T(n) = O(n^3)
                                                                            Supports negative edge weights but not negative weight cycles.
                                                                    </FloydWarshallAlgorithm>
                                                                    <BestOnes>
                                                                        Positive edges- O(n(m+nlogn))- SSSP's n times version.
                                                                        Negative Edges- O(mn+n^2.logn)- basically same as previous.
                                                                    </BestOnes>
                                                                </APSP>
                                                            </ShortestPathProblem>
                                                        </Path>
                                                        <FreeTree>
                                                        Free Tree- Connected graph without cycles
                                                            Properties
                                                                G is tree iff there's unique path betw 2 vertices
                                                                    1. By Contradiction- there's a unique path- so G is connected. 
                                                                        Let's say there's a cycle. Then, there are 2 distinct path. Contradiction.
                                                                        So,G is connected with no cycles- tree!
                                                                    2. By Contradiction- G is a tree. so connected, so at least 1 path between 2 pairs.
                                                                        let's say there are 2 paths- then connected the 2 paths make a cycle. No a tree (contradiction)
                                                                A tree with n vertices has n-1 edges
                                                                m = n-1
                                                                    Proof- By Induction
                                                                        base case- n=1, m = n-1 = 1 (true) (obvious for 2,3)
                                                                        Induction step- true for all n< k, i.e all trees with vertices n< k have n-1 edges.
                                                                            Wrong way- adding an edge somewhere to k vertex tree- this doesn't generalize for all trees with k+1 vertices.
                                                                            Given a graph with k vertices, we have to prove has k-1 edges.
                                                                                let's remove an edge e = (u,v) for some u and v in the tree.
                                                                                we get 2 connected components or 2 trees from this, say with vertices k1 and k-k1
                                                                                by assumption, edges in tree1 = k1-1 and in tree2 = k-k1-1 and 1 more edge that was removes.
                                                                                    total edges = k1-1+k-k1-1+1 = k-1.
                                                                Any connected graph with n vertices and n-1 edges is a tree
                                                                    Gotta prove that there is no cycle. assume there is a cycle.
                                                                    Let's remove an edge from the cycle- resulting graph still connected.
                                                                        continue the process for all cycles in the graph until there's no cycle (or becomes a tree)
                                                                        finally the number of edges after removing all such edges will be < n-1.
                                                                        But a tree with n vertices has n-1 edges. So, it is not even a tree- contradiction.
                                                                Minimally Connected graph is a tree
                                                                A graph G with n vertices and n-1 edges and no cycles is connected (in fact minimally connected)
                                                                    Assume that G is not connected- then there are >=2 components G1 and G2 (wlog- without loss of generality over n>2)
                                                                    Let's connect u in G1 and v in G2- no cycles previously in G1 and G2 and no prev path betw u and v- no cycles still.
                                                                    Thus, a tree with n vertices, n edges (and no cycle)- contradiction.
                                                            Spanning Tree (of a graph G)- subgraph of G (which is a tree) containing all vertices of G.
                                                                Benefits- Failure of any edge disconnects system (least fault tolerant)
                                                            Forest, DAG.
                                                        </FreeTree>
                                                        <Subgraph>
                                                            Subgraph- subset of vertices and edge forming a graph.
                                                            Consider a Graph G s.t- a function l: E->R+ (weight associated with every edge)
                                                            Spanning Tree- Connected subgraph (with all vertices) without cycles.
                                                                |V|-1 edges make a tree- a spanning tree- without cycles- so all vertices connected.
                                                                Length of ST = Sum of Length (or weights) of the edges in the tree.
                                                                <MST>
                                                                    Minimum Spanning Tree- keeping weight/length the least.
                                                                    Inspiration- make a MST- take a cycle- replace minimal weight with highest- this is lesser ST.
                                                                        adding 1 new edge inculcates 1 cycle- removing any edge on the cycle again gives back a spanning tree (|V|-1 edges without cycles)
                                                                    Is MST unique? Yes, if edge lengths are distinct.
                                                                        No, otherwise.
                                                                    <KruskalAlgorithm>
                                                                        Based on Greedy Algorithm Design Technique- Make the best immediate choice available (may not be best in long run)
                                                                        Pick the smallest edge and add to the tree.
                                                                        Idea- 
                                                                            Sort edges in increasing order of length (e1,e2,..em) s.t e(i) <= e(i+1), T = PHI
                                                                            for(i=1;i< m;i++)
                                                                                if({e(i)}UNION T is a tree) //forms a cycle
                                                                                    T = T UNION e(i);
                                                                            return T;

                                                                            How to check if a cycle is formed when an edge e = (u,v) is included?
                                                                                cycle is formed iff 
                                                                                    u and v are already conntected
                                                                                    iow, u and v are in same connected component (starting with n connected components- for all n vertices up to getting 1 connected component- MST)
                                                                                    Refer to figure in notes.
                                                                                UNION DS-
                                                                                    Operations
                                                                                        Union(S1,S2)
                                                                                            to be done n-1 times (cuz MST contains n-1 edges)
                                                                                            Replace T UNION e(i) with Union(find(u),find(v))
                                                                                            T(n) = O(1)
                                                                                        Find(x):The Set in which x lies.
                                                                                            to be done <=2m times
                                                                                            replace if forms a cycle/tree statement by find(u) != find(v)
                                                                                            T(n) = O(logn)
                                                                                    DS
                                                                                        Good DS we want for Union and Find
                                                                                            LL- we are at the end of course but don't think beyond LL.
                                                                                                for every set, a LL of nodes in that set.
                                                                                                keep track of front and end of LL (union will be cakewalk)- O(1)
                                                                                                Find? worst case- O(n)- n being size of LL.
                                                                                            Fibonacci Heap- need a better DS. (similar to LL used in tree but other way)
                                                                                                make the root of 1 set point to the root of the other set.
                                                                                                Find returns the reference to leader or root of the set/tree. 
                                                                                                We can use the same adjacency list to implement it.
                                                                                                Union takes as input 2 root references- gotta change pointers- O(1)
                                                                                                Find- O(n)
                                                                                                    Union By Rank- clever way- make smaller set point to the root of the other set.
                                                                                                    for 2 sets of size n1 and n2 to unite, if n1< n2, make refernce of root of n1 to point to n2
                                                                                                        what will be the height of tree in this case?
                                                                                                            A tree with n1 nodes has height <= log n1 base 2
                                                                                                            Proof by Induction- assume 2 trees with n1 and n2 size have height of log n1 and log n2 both base 2.
                                                                                                                new tree will have n1+n2 nodes. n1< n2, gotta prove that height <= log(n1+n2) base 2
                                                                                                                Height of resulting tree = max(h2, h1+1)
                                                                                                                    if h2 <= log(n2) <= log(n1+n2)
                                                                                                                    if h1+1 <= log(n1)+1 = log(2n1) <= log(n1+n2)
                                                                                                                Base case, n1 = 0, n1 = 1.
                                                                                                    Union by height- alternate way- h1<=h2,
                                                                                                        a tree of height h has at least 2^h nodes.
                                                                                                        Proof by induction,NEW HEIGHT =  max(h2,h1+1)
                                                                                                            #OF NODES = n1+n2 = 2^h1+2^h2 >= 2^(h1+1)....similar to previous (refer to notes)
                                                                                                    Gotta keep track of no of nodes or height- updating the variables of all sets.
                                                                                                    Path Compression- make all nodes in fibonacci heaps- point to the root directly- save time in traversal.


                                                                                T(n) = O(mlogm+Un+mF) = O(mlogm+n+mlogn) = O(mlogn) or O(mlogm) cuz log(m) <= log(n^2) =2.log(n)
                                                                        Correctness-
                                                                            Assume all edge lengths are distinct. Say, some optimal algo gives best results.
                                                                            Kruskal's- g1< g2< g3< ....< gn-1
                                                                            Optimal-   f1< f2< f3< ...< fn-1
                                                                            Suppose the sets differ and the first place they differ is i.
                                                                                Case 1- l(gi) < l(fi)
                                                                                    Optimum algo did not choose gi instead of fi (for smaller MST)
                                                                                    add gi to optimum tree, It will form a cycle (cuz n edges)
                                                                                        we will prove that fi was not the best option for MST
                                                                                        gi can't be longest edge in the cycle
                                                                                            why? Proof by contradiction- assume the cycle is formed by all fk for k< i, 
                                                                                            all of which are equal to corresponding gk which don't form a cycle (by Kruskal algo)
                                                                                            so cycle should not have been formed by fk with k< i. There are other fk s.t k>i or not enumerated.
                                                                                        so replacing gi with the longest edge will give us better MST. Hence our algo proves better than Optimal.
                                                                                Case 2- l(gi) > l(fi)
                                                                                    Why did Kruskal not choose fi instead of gi. cuz fi must be forming a cycle.
                                                                                        so fi UNION {g1,g2,..gi-1} contains a cycle.
                                                                                        but all gk = fk for all k< i.
                                                                                        so fi UNION {f1,f2,..fi-1} contains a cycle.
                                                                                            This means the Optimal tree itself is flawed- it's not a tree anymore (contradiction)
                                                                                So, Kruskal's algorithm gives MST.
                                                                                Corollary- Is MST unique? Yes, if edge lengths are distinct.
                                                                                    No, otherwise.
                                                                                    Eg- triangle of side 1 each- there are 3 MST possible for it.

                                                                    </KruskalAlgorithm>
                                                                    <PrimsAlgorithm>
                                                                        A cut in G is a partition of the vertex set into 2 parts.
                                                                            Eg- for G, V = {a,b,c,d,e}; Cut can be = {a,b},{c,d,e} or {a,c,d},{b,e}
                                                                            No of different cuts = 2^(n-1)-1
                                                                                2^n- cuz nC0+nC1+..nCn or for every element there are 2 choices left or right.
                                                                                but each possibility is repeated twice.
                                                                                -1 for null- empty set and full set is not a cut (not -2 cuz we have already halved)
                                                                            Edges in the cut- edges passing from 1 side of cut to another.
                                                                        Claim (exploited by Prim's algorithm)- For any cut (S,S') (S' = V-S)the minimum edge in the cut belongs to MST.
                                                                            Proof by Contradiction- Let T be an MST which doesn't contain edge e (minimum in the cut)
                                                                                let's add e to T. T will get a cycle with at least one other edge in the cut (as graph was connected)
                                                                                So, C contains at least 1 edge of length more than e (we can replace e by f) and Reduce the MST. Contradiction.
                                                                        Algorithm- Start with a cut containing 1 node (to start with) and others- take all incident edges and add the smallest edge to the growing cut.
                                                                            out cut goes on expanding- adding the smallest edge in the cut.
                                                                            We have 2 sets- containing vertices- gotta look for all adjacent edges of S- check which are not in S.
                                                                                if not in S, then add smallest.
                                                                            T(n) = O(mn)
                                                                            Using Min Heap,
                                                                                if v is to be taken from S' to S, check all edges incident on v.
                                                                                Those from S are to be removed from the minheap and those from S' are to be added to the minheap.
                                                                                What it contains exactly the elements in the cut nothing more.
                                                                                Remove and adding takes O(logn) time so for v, it will be SIGMA(degree(v).logm) + n.O(1)- find min need to be done n times.
                                                                            PseudoCode- S is an array, S[v] = 1 if v BELONGS S, 0 otherwise. A heap H
                                                                                S[r] = 1;
                                                                                For all v, S[v]=0.
                                                                                For all e incident on r 
                                                                                    H.insert(e);
                                                                                while(!H.empty()){
                                                                                    f = H.findMin();    //?v = H.deleteMin();
                                                                                    //Let v be the endpoint of f s.t S[v] = 0
                                                                                    for all e (v,w) adjacent to v
                                                                                        if(S[w] == 0)
                                                                                            H.insert(e);
                                                                                        else H.delete(e);
                                                                                    S[v] = 1;
                                                                                }
                                                                            T(n)?
                                                                                while loop runs for n-1 times for all vertices.
                                                                                for loop- runs in total- SIGMA(degree(v).logm) = mlogm.
                                                                                So, O(mlogm)
                                                                            Variant- let all element in S' have a number on it (the smallest incident) = 3 (say)
                                                                                create a heap of vertices and not of edges (unlike b4)
                                                                                the vertex with minimum label- going across the cut- goes thru.
                                                                                only gotta update vertices from v to S' (say from 4 to 2)- so decreasePriority on minheap.
                                                                                    no insert and no delete.
                                                                                PseudoCode- Need S[],label[];
                                                                                    For all v S[v] = 0, S[r] = 1;
                                                                                    H.insert(v,INFINITY);
                                                                                    H.decreasePriority(r,0);
                                                                                    while(!H.empty()){
                                                                                        v=H.deleteMin();
                                                                                        for all w adjacent to v
                                                                                            if(S[w]==0)
                                                                                                if(label[w]>length(v,w)){
                                                                                                    label[w] = length(v,w);
                                                                                                    H.decreasePriority(w,label[w]);
                                                                                                }
                                                                                        S[v] = 1;
                                                                                    }


                                                                    </PrimsAlgorithm>
                                                                </MST>
                                                        </Subgraph>
                                                    </Terms>
                                                    <GraphADT>
                                                        positional container whose positions are vertices and edges of the graph.
                                                        Operations
                                                            size(), isEmpty(), elements(), positions(), swap(),replaceElement()
                                                            numVertices(),numEdges(),vertices(),edges()
                                                            directedEdges(),undirectedEdges(),incidentEdges(v), inincidentEdges(v), outIncidentEdges(v), opposite(v,e), degree(v),indegree(v),outdegree(v)
                                                            adjacentVertices(v), inAdjacentVertices(v), outAdjacentVertices(v), areAdjacent(v,w), endVertices(e), origin(e),destination(e),isDirected(e)
                                                            Update Methods- makeUndirected(e), reverseDirection(e), setDirectionFrom(e,v), setDirectionTo(e,v), insertEdge(v,w,o), insertVertex(o).
                                                        <Implementation>
                                                            DataStructures used for Graphs
                                                            <EdgeList>
                                                                Store vertices and edges into 2 containers (unsorted sequence) and each edge object has references to vertices it connects.
                                                                    easy to implement- LL of edge nodes with each node holding reference of vertices it connects.
                                                                    edges incident on a given vertex is inefficient- gotta example entire edge sequence.
                                                                Performance- refer to notes.

                                                            </EdgeList>
                                                            <AdjacencyList>
                                                                Vertices hold references of edges they connect
                                                                sequence of vertices adjacent to v.
                                                                Implementation- Array of Linked List.
                                                                Performance- S(n) = THETA(N+SIGMA(Degree(v))) = THETA(N+M)
                                                                    Refer to Notes.
                                                                Variants- Extend Edge list structure by adding adjacency list.
                                                                    all the vertices referenced by edg list hold reference of LL.
                                                            </AdjacencyList>
                                                            <AdjacencyMatrix>
                                                                Matrix of vertexFrom vs vertexTo- table entries show existence of edge (true/false) or value of edge (sentinel for nonexistence)
                                                                Performance- 
                                                                    S(n) = THETA(N^2)
                                                                    Refer to notes.
                                                                Variants- Augment edge list structure with a matrix.
                                                            </AdjacencyMatrix>
                                                        </Implementation>
                                                        <Searching>
                                                            aka Traversal (assuming adj List)
                                                            Systematic search of every node/vertex and edge of the graph.
                                                            <Applications>
                                                                Compilers
                                                                Graphics
                                                                Maze Solving
                                                                Mapping
                                                                Networks- Routing, searching, clustering, etc.
                                                            </Applications>
                                                            <Techniques>
                                                                <BFS>
                                                                    Breadth First Search- traverses a connected component of a graph- defines a spanning tree.
                                                                    Like wandering in a labyrinth (in undirected)
                                                                        starting vertex s, assigned distance = 0
                                                                        In first round, the string is unrolled the length of 1 edge and vertices 1 edge away get assignment of distance 1.
                                                                        In second round, for all the vertices of previous step, unrol the string 1 more edge length and assign distance.
                                                                        go on until all vertices (in connected component) get a label assigned.
                                                                            the label (of v) is shortest path from s to v.
                                                                    ~Levelled traversal.
                                                                        If (u,v) is an edge then the level numbers of u and v differ by at most one.
                                                                            Proof- draw a levelled traversal diagram
                                                                                assume they are not in consecutive levels.
                                                                                then the edge traverses across levels but then in the traversal we would have covered it in the smaller level's vertex's labyrinth. Contradiction.
                                                                    Implementation
                                                                        Idea-  
                                                                            create a queue Q
                                                                            mark v as visited and put v into Q
                                                                            while Q is non-empty
                                                                                remove the head u of Q
                                                                                mark and enqueue all (unvisited)
                                                                                neighbours of u
                                                                        Recursion Code- 
                                                                            void bfs(int v)
                                                                            {
                                                                            for(i=1;i<=n;i++)
                                                                             if(a[v][i] && !visited[i])
                                                                              q[++r]=i;
                                                                            if(f<=r)
                                                                            {
                                                                             visited[q[f]]=1;
                                                                             bfs(q[f++]);
                                                                            }
                                                                           }
                                                                        Iterative Code-
                                                                            //use queues and while loop terminates on null or visited.
                                                                    Performance- 
                                                                        S(n) = O(n) //queue needed of max size |V|
                                                                        T(n) = O(m+n)
                                                                            Initializing takes O(n).
                                                                            all vertices are enqueued if not visited (so once)- enqueue and dequeue will take O(n) time.
                                                                            Adj List of vertex is scanned when vertex is dequeued- SIGMA (degree(vi)) = Sum of lengths of all lists is O(m).
                                                                    Terms
                                                                        Tree Edge
                                                                    Applications
                                                                        Connected Components
                                                                            Single nodes also counted as connected components.
                                                                            I want a procedure which returns this labelling of vertices.
                                                                                on basis of labels, I tell if they belong to same connected component or different.
                                                                                Let's use a vertex array (component/ label array)- mark index numbers in vertex.
                                                                                    vertices map to numbers so marking is easy.
                                                                                Start with a start vertex and use BFS to cover all connected vertices- give them all same label say 1.
                                                                                Traverse thru the vertex array to find first index with value 0 (not marked) and apply BFS there.
                                                                                Continue in this manner until, all vertices are covered 
                                                                                    important to note that we search for unmarked from where we left otherwise it may become O(n^2), linear traversal of vertex array we want.
                                                                            Performance
                                                                                T(n) = O(m+n)   // only O(m) or O(n) is wrong. O(max(m,n)) is right also.
                                                                        Bipartite Graphs
                                                                            G is bipartitte if V paritions into U and W (so U UNION W = V and U INTERSECTION W = PHI)
                                                                                s.t every edge has 1 end point in U and other end point in V.
                                                                            In levelled traversal representation- it means that no edge should have both end points in same level
                                                                                all levels correspond to alternating sets U and W.
                                                                                Why not jumps of 2k? cuz BFS doesn't permit forward edge or backward edge.
                                                                                So, if we find an edge with both of endpoints in same level- then it is not bipartite.
                                                                                    So, keep assigning vertices with levels and along with visited checking also perform level checking.
                                                                                    Also, G will have an odd cycle, it is not bipartite- refer to notes to relate.
                                                                                Reverse is not true- If 1 or all cycles in a graph are even, it is necessarily a bipartite graph.
                                                                                    !Eg- make a graph with square inside of it- with 1 vertex on top (not others)
                                                                        Diameter of Graph
                                                                            maximum distance between 2 vertices in G.
                                                                            Distance between 2 vertices = length of shortest path between 2 vertices (BFS)
                                                                            Maximum Level Number <= Diameter(G) <= 2.Maximum level Number
                                                                                diameter may have its lowest level as 2 or 0.
                                                                                Diameter may be a linear chain thru all levels.
                                                                                All vertices at a level check how deep their any 2 of children went.


                                                                </BFS>      
                                                                <DFS>
                                                                    @Rat (who remembers the route) trying to search for a cheese in a maze.
                                                                        he will go to the dead end and then backtrack and try other routes in the middle.
                                                                    Start TS and End TS (like Euler's route in trees' left side and right side)
                                                                    Terms
                                                                        Tree Edge
                                                                        Back Edge- visited node- ancestor on tree.
                                                                        !Cross edge not possible- why? cuz it would have been covered in DFS.
                                                                    Implementation
                                                                        Idea- 
                                                                        time = 0;
                                                                        DFS(v){
                                                                            visited[v] = 1;
                                                                            arrival[v] = time++;
                                                                            for all w adjacent to v
                                                                                if(!visited[w])
                                                                                    DFS(w);
                                                                            departure[v] = time++;
                                                                        }
                                                                    Recursion-
                                                                    Iteration-
                                                                    Properties- 
                                                                        for tree edge (u,v)- arr[u]< arr[v]< dep[v]< dep[u]
                                                                        for back edge (u,v) (v on top)- arr[v]< arr[u]< dep[u]< dep[v]
                                                                    Applications
                                                                        TwoEdgeConnectivity- if removing any edge, keeps the Graph G connected.
                                                                            Eg- If this wire breaks still internet will work.
                                                                            Implementation
                                                                                Brute force- remove all edge 1 by 1 and check if graph is still connected= O(m^3)
                                                                                Another approach- 
                                                                                    Idea- 
                                                                                        check for cycles between every nodes.
                                                                                        when there is a backedge from some descendent of v (include v) to some ancestor of v (proper- excluding v)
                                                                                        when to check? while backtracking from v.
                                                                                        Deepest back edge (upto lowest level) will serve the purpose the best.
                                                                                    Code- 
                                                                                        time = 0;
                                                                                        TwoEC(v){
                                                                                            arr[v] = time++;
                                                                                            visited[v]=1;
                                                                                            dbe = arr[v];
                                                                                            for(all w adjacent to v)
                                                                                                if(!visited)
                                                                                                    dbe = min(dbe,TwoEC(w));
                                                                                                else
                                                                                                    dbe = min(dbe,arr[w]);
                                                                                            if(dbe = arr[v]) then abort;
                                                                                            return (dbe);
                                                                                        }
                                                                        PlanarGraph- Is G a planar Graph?
                                                                            Eg- Complete graph on 5 verticeds is not planar graph.
                                                                        TwoVertexConnectivity                                                        
                                                                </DFS>
                                                                <DirectedDFS>
                                                                    same pseudocode- defn of adjacent means out adjacent.
                                                                    Connected component takes directions into account.
                                                                        Strongly connected- path between 2 ordered pairs of vertices.
                                                                            Eg- a unidirectional polygon- is strongly connected.
                                                                        Weak Connected- if for every ordered pair (u,v) there is path from u to v or from v to u.
                                                                    Terms
                                                                        Tree Edge- arr[u]< arr[v]< dep[v]< dep[u]
                                                                        Back Edge(u,v) (v on top)- arr[v] < arr[u]< dep[u]< dep[v]
                                                                        Forward Edge- arr[u]< arr[v]< dep[v]< dep[u]
                                                                        Cross Edge (u,v) (v on the left branch)- arr[v]< dep[v]< arr[u]< dep[u]
                                                                    Applications
                                                                        Topological Sort- DAG- Directed Acyclic Graph- Does G have a cycle (directions considered)?
                                                                            If there is a backedge- there is a cycle.
                                                                            If you ignore directions- then all except tree edge make a cycle.
                                                                            Does no back edge mean no cycle (acyclic)
                                                                                Do DFS, Order vertices by their departure times (largest to smallest)
                                                                                    Given a DAG, we can order vertices s.t all edge go from left to right (no back edge)
                                                                                        This ordering is called topological sort.
                                                                            T(n) = O(m+n)
                                                                            Applications- PERT technique for project management.
                                                                        Strongly Connected- 
                                                                            Approach1- O(mn)
                                                                                If DFS(v) visits all vertices in G then path from v to all.
                                                                                If a path from every vertex in G to v.
                                                                                    G -> G(R) -> DFS(v) // Reverse all edges of G and do DFS(v)
                                                                                    if all vertices are visited then there is a path from all vertices to v.
                                                                                If all vertices are visited in both DFS's then G is strongly connected.
                                                                                else it's not.
                                                                            Approach2- 
                                                                                It is necessary and sufficient that an edge go out of every subtree.
                                                                                We want to find out a path from every vertex to root (converse is already true)
                                                                                    DFS(v) should return min (a,b,c,d)- smallest node that can be visited from v.
                                                                                Code- along the lines of DBE.
                                                                                    SC(v){
                                                                                        arr[v] = time++;
                                                                                        visited[v] = 1;
                                                                                        xyz = arr[v];
                                                                                        for( all w adjacent to v)
                                                                                            if(!visited[w])
                                                                                                xyz = min(xyz,SC[w]);
                                                                                            else xyz = min(xyz, arr[w]);
                                                                                        if(xyz == arr[v]) then STOP;
                                                                                        return xyz;
                                                                                    }
                                                                                T(n)= O(m+n)

                                                                </DirectedDFS>
                                                            </Techniques>
                                                        </Searching>
                                                    </GraphADT>
                                                </Graphs>
                                                <SummaryDS>
                                                How operations take different time based on the way we have structured our data!
                                                    Criteria        Insertion   Searching   Find Min    Delete Min
                                                    Unsorted Array  O(1)        O(n)        O(n)        O(n)
                                                    Sorted Array    O(n)        O(logn)     O(1)        O(n)        //shifting eats time.
                                                    Singly LL       O(1)        O(n)        O(n)        O(n+1)
                                                    Min Heap        O(logn)                 O(1)        O(logn)
                                                    Take your pick based on your application requirements.
                                                </SummaryDS>
                                        </DataStructures>
                                        <AlgorithmDesignTechniques>
                                            aka Algorithmic thinking, 
                                            Reduction- Reducing a problem (with its operations) to a standard ADT.
                                                Using already known subroutines as a building block to reach a solution.
                                                Eg- Sorting.
                                            <DivideAndConquer>
                                                say, DAC
                                                Using Divide and Conquer- Divide the Problem in 2 or more parts and recursively solve problem (smaller version to bigger version)
                                                    solution to the smallest version-problem is known and combine them thru to build largest 1.
                                                    3 steps:
                                                        Divide- Divide the problem into 2 or more disjoint subproblems (dividing input size)
                                                        Conquer- Use divide and conquer recursively to solve the subprobs.
                                                            #Recurse plan
                                                        Combine- Take the solutions to the subprobs and "merge" soln into soln of original.
                                                            the underlying thread (algo at all levels) for every building up to reach the original solution.
                                                    Eg- Merge Sort- refer to Sorting tag.
                                                        Divide- If S has >=2 elements, divide sequence into 2 halves (by index)- CEIL(n/2) and FLOOR(n/2)
                                                        Conquer- Sort sequences S1 and S2 using merge sort.
                                                        Combine- Merging the sorted sequences S1 and S2 into 1 sorted sequence.
                                                    Analysis- Running time represented using recurrence relations
                                                        T(n) = { solving trivial/simplest problem if n=1 or sth; NoOfPieces*T(n/subprobsSizeFactor) + Dividing + combining if n>1}
                                                            eg- T(n) = 2T(n/2)+O(n) if n>1, O(1) otherwise.
                                                        Solving Recurrences- Done b4.
                                                            RepeatedSubstitutionMethod- (substitute, expand) until you notice patterns.
                                                            SubstitutionMethod- guess the solution and verify by mathematical induction.
                                                            RecursionTrees
                                                                T(n) = c for base steps means- the leaves take c time- if combine steps takes c then it's on all nodes.
                                                            MasterMethod- Templates for different classes of recurrences.

                                            </DivideAndConquer>
                                            <Greedy>
                                                Based on Greedy Algorithm Design Technique- Make the best immediate choice available (may not be best in long run)
                                            </Greedy>
                                        </AlgorithmDesignTechniques>
                                    </ChoosingTheBest>
                                    <CaseStudyAlgorithms>
                                        CS Huge DB store on website- to search for availability of a Brazilian movie on our website!
                                            REL I have got a zillion of movies at home and to make sure I access them when I need them- quickly check if I have them- where to find them.
                                            Prob-What do think I would have done at home to solve such a prob in personal life?
                                            Algo-I have placed them in a known order- like alphabetically- Told in high level terms.
                                                What makes searching on sorted access faster.
                                                    Why is it faster- we need to know reasons behind everything.
                                                    I will know where to start looking from and not blind search from 1st in sequence.
                                        CS Problem- A Sorting Problem!
                                            Variation- Put these movies on order but THE in front is not considered like THEM- start reading from M for that movie name. Ignore spacing and special symbols.
                                                Many ways you can come up with-
                                            Cases- on numeric,on strings.
                                            Solutions- 
                                                This was insertion sort
                                                    @That's what we do when playing cards.
                                                    picked a dvd 1 at a time starting from 2nd and placed it in right spot (by comparing them) in the list of dvds before it.
                                                        best case you end with only n comparisons
                                                        worst case for every- you do comparisons with all those before it- 1+2+...+n-1=n(n-1) a lot of effort.
                                                SelectionSort- Say number inserted in every dvd cover and told to hand over to n people- what will your approach be.
                                                    Search the smallest- give to 1st;search smallest give to 2nd and so on.
                                                    best case- at ith turn- going in front of the person- n times + for every person- finding smallest takes time of surfing thru all dvds- n-i 
                                                As a punishment- non-intuitive bubble sort- series of swaps.
                                                    person names represent indices and blind hat put on him because algo is so mindless in approach.
                                                    while checking for swaps need- need not check the last number after 1st iteration- it is unnecessary
                                                    if for an iteration, no swaps happen we can stop the whole process for it must have been sorted already- bubble sort with early exit.
                                                    In every pass, some numbers move very slowly to their deserving positions.
                                                    It works sth like- pick a number from beginning and traverse till you find a number greater than that. Give that position to it. and pick 1 number next to that and so on til you reach the end of the array.
                                                        swap becomes the best option to avoid a separate loop to shift of all the former element of array that follow from the where we started to compare.
                                                    If people sit on alternate positions of deserving positions, this may work very fast.
                                    </CaseStudyAlgorithms>
                                    <AlgoRepresentations>
                                        VerbalArticulation
                                            To be learnt for interviews.
                                        PseudoCode- mixture of natural language and high level programming concepts to describe main ideas behind implementation (of procedure)
                                            More structured than usual prose but less formal than PL.
                                            all keywords and primitive (low level operations) supported
                                                Data movement (assign)
                                                Control
                                                Arithmetic and logical ops.
                                        FlowChart
                                    </AlgoRepresentations>
                                    <LearnProgrammingB4Algorithms>
                                        Why?
                                        <ThoroughWithComputerUnderstandingAndTools>
                                            using CPU
                                            memory(RAM)
                                            Exceptions
                                                Segmentation fault- crash
                                                    you are accessing memory you should not be accessing. 
                                                    Pointer pointing to memory out of program's data.
                                                Array bounds crossed- 
                                                    also called buffer overflow vulnerabilities.
                                            Q- I continue reading after bound, when problem happens?
                                                When segment is crossed? No
                                                    security may become a problem. Windows says that- they crossed their array.
                                                when bound is crossed. Some variable value is affected and may set up a chain reaction.
                                                    somewhere a fairy dies.
                                        </ThoroughWithComputerUnderstandingAndTools>
                                        <Abstract4AlgorithmicThinking>
                                            so that implementation is not primary concern here. Given an algo, you can code it.
                                            Practical Thinking- we can relate to the ideas in algorithms.
                                        </Abstract4AlgorithmicThinking>                                        
                                    </LearnProgrammingB4Algorithms>
                                    <AlgoCategories>
                                        Good algo- 1 bit input increase, 1 more unit of work.logs,const,n
                                        mediocre, n^2,n^3 etc.
                                        Bad- exponential. it turns out for quadratic- 1 more bit and twice as long to sort.
                                            naive algo we come up with are these- don't use lightly- exponential means doomed algo.
                                        Caution- O(n) is better than O(n^2) but after a certain constant depending on constants. 
                                            Till then, constants may make O(n^2) behave better.
                                            Say, 10^6n vs 2n^2 for n = 1000.
                                    </AlgoCategories>
                                    <CaseProblems>
                                        <IsPrime>
                                            is N prime? is problem 
                                                Is 7 prime? is instance of it                            
                                                Input Size- 
                                                        How much information in terms of bits for 7- 3 bits and 4 bits eventually.
                                                        complexity increases linear with number means exponentially with bits- when 1 bit adds number goes from 7 to 15- and hence the time doubles.
                                                        if bits double then? exponentially.
                                                        Computer takes same number of bits.
                                                    How does time change with the change in input
                                                        takes different times to do.
                                                        natural thing to think it's linear but not.
                                                        wrt bits it's exponential.
                                                    Different Stratagies- 
                                                        Brute force- 
                                                            takes n-2 divisions- linear growth.
                                                            only half- still linear growth.
                                                            sqrt of it- sqrt growth.
                                                            gimme 1000 bit number- 2^1000 and 2^1001 imagine effort reqd on that.
                                                                    on this principle the computer security works- 1000 bit number factoring which is impossible.
                                                                    prime number that big and figure the product straight way and can't factor it easily. 
                                                                        even I make publically available and no1 can factor it.
                                                                    nth else will work- imagine those many number of ops- if half the work- it will be 2^999- very clever algo but doubled the speed- but to solve even 1000 core can't do.
                                                                        universe will collapse and start again millions of time.
                                                                        I get 1000 speed- 2^10 so get speed of 2^990.
                                                                        size of problem is no of bit it takes to represent the problem.
                                        </IsPrime>
                                        <Sorting>
                                            Given a list of elements (numbers), arrange (permute) them in ascending or descending or in seq s.t- A[i]< A[j] for i< j.
                                            Reflections- 
                                                Max comparisons possible = nC2 comparisons are possible to ascertain deserving place- but are all necessary, say a>b>c, why compare a with c? So, O(n^2)
                                                Min comparisons- n! combinations (ways) a list can be arranged. To ascertain a state from n!, we need to ask at least log(n!)base2 questions. So, THETA(nlogn)
                                            Computers love to spend their time in sorting- 90% time.
                                                When in doubt, sort
                                                    Algo design principle (reduction)
                                                    Sorting used as subroutine in many algo.
                                                        Applications
                                                            Eg- Searching in DB- can do binary search on sorted data.
                                                            Eg- Computer graphics and geometry problems.
                                                            Eg- Closest pair, element uniqueness.
                                                            A lower bound for sorting OMEGA(n logn) comparisons- proves lower bound on other problems.                                            
                                                            Viz
                                                            Developed representing different algorithm design techniques.
                                                                Using Divide and Conquer- Divide the Problem in 2 or more parts and recursively solve problem (smaller version to bigger version)
                                            Java Implementation- ?ADT
                                                public interface SortObject{
                                                    //sort sequence S in nondecreasing order using comparator c
                                                    public void sort(Sequence S,Comparator c);  //comparator to generalize it over objects and not keeping specific to integers
                                                }
                                                public class ListMergeSort implements SortObject{
                                                    public void sort(Sequence s, Comparator c){
                                                        int n = s.size();
                                                        ....
                                                    }
                                                }


                                            <SelectionSort>
                                                Select the smallest/ largest from the working array, remove it from working array and place at its deserving place (thru swap or diff array)
                                                Focus is finding the deserving position of an element- starting from largest/smallest (easy to find).
                                                what was the worst case- updating big variable every time it is descending- a lot of times.
                                                        T(n) = Total Searching= n+n-1+n-2+...+1 = O(n^2) unconditional of input
                                                        best case avoids updates but comparisons remain same.
                                            </SelectionSort>
                                            <BubbleSort>
                                            Bubble sort- Traverse thru the list until fine- to hunt for out of order big lumps; intend- drag them to end or until a bigger fella found; intend same for that.
                                                    Idea is same as selection sort but drag the elements along the selection process (for an absolute position)
                                                    Variants
                                                            Generally, People use oblivious way of bubble sort- start to end don't worry so much.
                                                            Can prefer to use bubble sort with early exit- if a cycle with no swaps, exit.
                                                    works best 
                                                        if there are a few out of order elements.
                                                        when almost sorted- +or-1 from its position- very quickly and use early exit.
                                                        if there is no (?least) out of order element between current and deserving positions of elements.
                                                            1 pass will do it if no such element
                                                    ?avg from function to fn varies. entropy and study of inc and dec of entropy from fn outcome is not avg anymore.
                                                    consider elements from 1st to second last element.
                                                            compare the item with next and swap if out of order.
                                                            make k smaller and do it over again as long as k > 0.
                                                            we will not do it for 1st element, 2nd at right place.
                                            </BubbleSort>
                                            <InsertionSort>
                                                Insert Centered- Let a new member come one by one and get to its place in sorted list.
                                                    Idea is bring elements one by one and find its relative deserving position.
                                                    Remember the information unleashed by 1 comparison- it will assist later.
                                                    Structuring- the results till now so that comparisons are minimized (a< b< c, then if b< d< c, when why check it with a? Time saved!)
                                                @Playing Cards
                                                Worst Case- Already sorted into wrong order- traverse through all of the list
                                                        1+2+...n-1 = O(n^2)
                                                Best case- instantly insert first one tells it is 1st. that is if it is already sorted.
                                                        so n comparisons for n cards so O(n)- very fast if already sort or a very few elements out of order.
                                                        1st time we see the diff betw best and worst case.
                                                        RHS vs LHS- Depending on descending or ascending- decide for better performance
                                                Average Case
                                                    comparisons and to insert I have to shift all elements ahead of it by 1 step.
                                                    for avg- half way we find it and n/2 for shift- n^2.
                                                I want a better sort than n^2.
                                                    2 Steps
                                                        find right spot
                                                            Use Binary Search- faster
                                                            but dragging to deserving positin will anyway take ~n steps.
                                                            shift n element for i times - still n^2.
                                                            Imagine I have a card in hand and you have to guess it
                                                                    wild- is it 99? nope. Is it 98- nope. .... a lot of time.
                                                                    divide prob- is it even? is it greater than 50?...
                                                            rather than checking 1 value- ask a property and divide the problem into parts- 1 of which is of our interest.
                                                                sample space reduces to half everytime- how many times do I need to ask- is it reduced?
                                                                        1-50,2-25,3-13,4-7,5-4,6-2,7-1.
                                                                        log(n)                        
                                                        it has to insert- make place for the element by dragging element to right
                                                            kills binary search advantage.
                                                            @of people in train
                                                        Merge the two steps thereby saving extra effort
                                                            Shift the element when the element is found greater than inserting element.
                                                        every outer iteration guarantees- all element till j are sorted.
                                                    Implementations-
                                                        Array-
                                                            Iteration- 
                                                                for(j=2 to A.length)
                                                                    key=A[j]; i=j-1;
                                                                    while(i>0 and A[i]>key){
                                                                        A[i+1]=A[i];
                                                                        i--;
                                                                    }
                                                                    A[i+1]=key;
                                                            Recursion
                                                        LL- 
                                                            if LL, insertion will be O(1) but finding- O(n^2) = 1+2+..n
                                                                Doubly- linear search and constant insertion into list.
                                                                Larger to smaller LL
                                                                Smaller to Larger LL                                                                                        
                                                which Data structure to choose and why for speed up- think about it later.
                                            </InsertionSort>
                                            <MergeSort>
                                                Greatness of Divide and Conquer Paradigm (algorithm approach)- comparisons are further minimized.
                                                    Comparisons are minimized due to sorted nature of elements that merge.
                                                asking about 1 question, 2nd question- rather than getting answer for just one- ask a question that will eventually help me.
                                                        lessons from insertion sort- when I ask binary question- I can get more answers then I want.
                                                @Library with 1 billion sorted books- 1000 books in trolly to place in there.
                                                        Insertion Sort- Pick a book at a time and fit in right place! Come back and repeat until empty
                                                            We can always start insertion from front end or rear end but with 1 element (to go along)
                                                        Merge Sort- sort the trolly- take trolly with you with sorted books- 1 bit of work.
                                                            keep placing on rack along your way (no coming back!)- this is interesting!
                                                        skepticism- you must question!! 
                                                            3 books sort them in 2 comparisons and move along the sorted library once(1 pass)- 
                                                                    O(n+2) bits of work.
                                                        let me rewind- "and act".
                                                        comparisons 2- how much binary information I can get states to choose from- 4 states and possible states of 3 cards arrangement is 3! so 6 states possible so can't sort in 2 cmp.
                                                MergeRoutine- the heart of Merge Sort- how to merge 2 sorted arrays.
                                                    Copy the 2 halves into separate arrays and fill into newArray- by going thru indicators in forward direction.
                                                    MERGE(A,p,q,r){     //index p to q and q+1 to r are sorted.
                                                        int i=p,j=q+1,k=0;  //k can also be p
                                                        while(i<=q && j<=r)
                                                            if(A[i]< A[j])
                                                                B[k++]=A[i++];
                                                            else B[k++]=A[j++];
                                                        //use condition and then loop to copy remaining elements of an array.
                                                        //Or Copy INFINITY (or sentinel value) at the ends of both arrays- and 1 loop will do it all!
                                                        //copy back from B to A.
                                                    }
                                                    T(n)? Every element candidate of B is determined in 1 comparison so O(l+m)=O(n)
                                                        comparisons reqd- min(l,m), worst case- n+1, 
                                                    S(n)? A new array- so O(n)- so out of place algorithm.
                                                    Variants
                                                        3-way merging- make 3 lists and merge them into 1. But same time it takes almost. O(nlognbase3).
                                                        Merging 2 list of size m and n will take O(m+n) time.
                                                MergeSortRoutine- Divide and Conquer, recursion
                                                    mergeSort(A,p,r){
                                                        if(p< r){
                                                            q=(p+r)/2;
                                                            mergeSort(A,p,q);
                                                            mergeSort(A,q+1,r);
                                                            merge(A,p,q,r);
                                                        }
                                                    }
                                                    Draw the tree of execution for MS(1,6)//see Diagram.
                                                        At leaf, ms(1,1) is trivial.
                                                        Follow Euler's tour of execution tree
                                                            first half returns sorted, then second merge sort is invoked (and recursion) to get it sorted.
                                                            and then merging procedure executes on either parts everytime (combine step of DAC)
                                                    S(n)? Constants and Merge procedure takes O(n) space but none interferes with other- so let's keep a global array and it will do.
                                                        Function calls are many but stack won't need all of them. Height of Stack = height of tree = CEIL(logn)+1 (refer diagram- same level functions (activation records) occupy same position in stack)
                                                        every recursion fn call needs constant space k, so O(klogn)=O(logn)
                                                        But S(n) for merge = O(n) so total S(n) = O(n+logn)=O(n)
                                                    T(n)?
                                                        T(n) = T(n/2)+T(n/2)+O(n)=2T(n/2)+kn
                                                        Master theorem, T(n)=O(nlogn)
                                                        Recursion Tree, Every level of merging take O(n) effort and a total of logn no of times
                                                    Variants
                                                        logn sorted lists each of size n/logn. What is time reqd?
                                                            No of elements = logn*n/logn=n. Make a recursion tree- merge 2 n/logn sized lists- to make a sorted list of size 2n/logn. Effort Reqd=2n/logn for logn/2 such lists=O(n) at every level- log(log(n)) such levels (n/logn),2n/logn,4n/logn,...,logn.(n/logn), which term is last?
                                                                T(n)=O(n.log(log(n)))
                                                        n strings each of length, n are given, what is time reqd to sort them? (making a dictionary!!)
                                                            1 lexicographic comparison is going to take n comparisons instead of 1 (numeric), for 2 strings comparison!
                                                            Let's use 2-way merging- n/2 comparisons and each comparison takes O(n) times so O(n^2) for first level, logn such levels,
                                                            T(n)=O(n^2.logn) (we used recursion tree for solving)
                                                If we make trolly size equal to library that is called merge sort.
                                                        take the problem- divide in 2 piles. sort those piles and 1 pass of both (similar along lines of library trolly sort)
                                                        is it not cheating- answer to problem in terms of problem itself? but it is smaller version of it and smallest has answer so recusion- 
                                                        we could have thought of insertion sort or sth at 1st step but again merge sort will prove better alternative.
                                                Analysis
                                                        dividing in 2 parts and merging take n steps. what's the complexity of merge sort.
                                                        Fun activity for you- we will discuss solution in next lecture but try doing it yourself.
                                                        challenge for you- implement this and code next week. You can check out what went wrong.
                                            </MergeSort>
                                            <QuickSort>
                                                Why Quick? for smaller size programs- merge sort will do a lot of housekeeping! Quick Sort wins.
                                                    also follow divide and conquer.
                                                Use comparisons to partition the set into 2 (using pivot)- maximum gain from a comparison.
                                                    to the left will be less than pivot and right will be greater. Continue on the 2 partitions.
                                                Heart of QuickSort is Partition procedure.
                                                    move i and j from beginning thru end.
                                                    increment j until lesser than pivot- increment i and swap with j.
                                                        so at any point in time, i is demarkating parition till now and j is scanning thru to end.
                                                            to the left of i are smaller than pivot
                                                            between i and j are greater than pivot.
                                                            to its right are not covered
                                                    Implementation- 
                                                        Partition(A,p,r){
                                                            x=A[r];
                                                            i=p-1;
                                                            for(j=p to r)
                                                                if(a[j]<=x){
                                                                    i++;        //i is now at a position that is greater than pivot (since passed thru and not taken to left of i)
                                                                    swap(A[i],A[j]);
                                                                }
                                                            //swap(A[i+1],A[r]);
                                                            return i;
                                                        }
                                                        Another way,
                                                        Partition(A,p,r){
                                                            x=A[r];
                                                            i=p-1;
                                                            j=r+1;
                                                            while(true){
                                                                while(A[j]>x) j--;
                                                                while(A[i]< x) i++;
                                                                if(i< j){
                                                                    swap(&A[i],&A[j]);
                                                                }
                                                                else return j;
                                                            }
                                                        }
                                                        T(n)= O(n)
                                                        After this routine, the left side is all lesser and right side all greater. The pibot has found its deserving place. Now let's apply same routine to left and right side.
                                                        Initial all QuickSort(A,1,length(A))
                                                        QuickSort(A,p,r){
                                                            if(p < r){
                                                                q = partition(A,p,r);   //return demarkating lines for lesser and greater than pivots.
                                                                QuickSort(A,p,q-1);
                                                                QuickSort(A,q+1,r);
                                                            }
                                                        }
                                                        vs Merge Sort- partition is not necessarily equal 
                                                        Recursion Tree- 
                                                        S(n)= depends on how input gets divided- the height of tree=O(logn) if balanced but O(n) otherwise. But average case is O(logn)
                                                        T(n)=O(n)+T(k)+T(n-k); 
                                                            Best case- k=n/2 and T(n)=2T(n/2)+THETA(n); So, T(n) = THETA(nlogn)
                                                                If I am lucky, but I am not lucky, I am Naveen.
                                                                Possible when I always pick median of array (under consideration) as pivot.
                                                            for worst case- k=1, worst case, T(n)=T(n-1)+O(n)=O(n^2)
                                                        Analysis
                                                            Bad Input, Worst Case
                                                                If ascending or descending, the pivot taken in last- will partition in 1 and n-1.
                                                                If descending, then the max and min will toggle and always keep to pivot to extreme.
                                                                If all are same, then also pivot goes to extreme.
                                                                let's take from center, if it is like mountain, then also problem. T(n)=O(n^2)
                                                            Worst Case is less likely to happen
                                                                Imagine if n/10 on one side and 9n/10 on other,
                                                                    work done at every level is cn and maximum levels will be- longest branch- n,9n/10,81n/100,..,1; height=log(n)base(10/9); So, T(n)=nlogn
                                                                    any ratio, 1:99,1:999 will fall in the same category.
                                                                if, it alternates in good and bad case, T(n)=cn+cn+2T((n-2)/2)=THETA(nlogn)
                                                                    T(n) = 2U(n/2)+THETA(n) (lucky); U(n) = T(n-1)+THETA(n) (unlucky); T(n) = 2T(n/2-1)+THETA(n)
                                                                So no worries, it is only consistent bad case that sucks.
                                                            Situ
                                                                If find median in O(n) time, then T(n)=O(n)+O(1)+O(n)+2T(n/2) so O(nlogn)
                                                                    not sort the array and tell the median (that's what we are here for)
                                                                If find (n/4)th element in O(n) time, then T(n)=O(n)+O(1)+O(n)+T(n/4)+T(3n/4)=O(n)+T(n/4)+T(3n/4)<=O(n)+2T(3n/4)=THETA(nlogn)
                                                                In Quick Sort, 1,2,3,4,....takes T1 times and n,n-1,n-2,..,1 takes T2 time, then T1=T2
                                                                Randomized Algorithm- good general tool to improve algos with bad worst-case but good average case (meaning in general algo will behave good over most of inputs/random number chosen)
                                                                    Partition around random elements as pivot (assume all elements distinct)
                                                                    All splits (1:n-1,2:n-2,...n-1:1) equally likely with Probability 1/n.
                                                                    Implementation-
                                                                        Randomized-Partition(A,p,r){
                                                                            i = Random(p,r);    //Last element is not random cuz giving input is in user's hand (situation dependent)- make it situ independent.
                                                                            swap(&A[r],&A[i]);  //partition picks pivot from last element.
                                                                            return Partition(A,p,r);
                                                                        }
                                                                        RandomizedQuickSort(A,p,r){
                                                                            if(p< r){
                                                                                q = Randomized-Partition(A,p,r);
                                                                                Randomized-QuickSort(A,p,q);
                                                                                Randomized-QuickSort(A,q+1,r);
                                                                            }
                                                                        }
                                                                    T(n)- not same as average case analysis (this is expected time by RandomizedQuickSort)
                                                                        Depends on what random element is chosen so it will take variable time- we will analyse average time over all possible (random numbers generated and not all possible inputs)
                                                                            T(n) be number of comparisons.
                                                                            Every element compared once with pivot- n-1 comparisons.
                                                                            If pivot was ith smallest element.
                                                                            Then T(n) = T(i-1)+T(n-i)+n-1 with the probability of every i being 1/n
                                                                                So, expected T(n) is average or expectation- (1/n)*SIGMA(T(i-1)+T(n-i)+n-1) over 1 to n = (2/n)*SIGMA(2T(i)+n-1) over 0 to n-1.
                                                                                    REL if die thrown 1000 times- E(x) = (1000/6*1+1000/6*2+...+1000/6*6)/1000 = 1/6+2*1/6+3*1/6+.. = 3.5
                                                                                    Refer to Binary Trees random height analysis to prove = THETA(nlogn)


                                            </QuickSort>
                                            <RadixSort>
                                                Unlike other methods, radix sort considers the structure of the keys (not comparison)
                                                    keys in basee M (M is radix = 2), keys are represented in binary.
                                                    done by comparing bits in same position!
                                                    Also appliable to alphanumeric strings- names of people, etc.
                                                    Radix Exchange sort- All numbers represented in same same fnumber of bits.
                                                        Divide and conquer paradigm
                                                            Sort array with respect to leftmost bit.
                                                                Partition the array- 
                                                            sort top subarray and bottom subarray- forget the bit used in previous step.
                                                            Recursion- Recursively sort top/bottom subarray, ignoring leftmost bit.
                                                                combine is trivial.
                                                        Performance- T(n) = O(b.n)  //b- no of bits. n is number of numbers; b is not logn.
                                                            T(n,b) = T(i,b-1)+T(n-i,b-1) + n
                                                                Y n? Same partition routine as in quick sort- scan from both sides and swap on exception.
                                                                Solving this thru induction- Suppose, T(n,b) = bn
                                                                substituting it in RHS we get LHS so we are right.
                                                                for all values of i, T(n,b) is same and not different like Quick sort (so no averaging like randomized QS)
                                                        Variants- if we have negative numbers, then first step to partition numbers on sign and then start with bucket sort.
                                                        Modeling it- on graph, x-axis be ith number and y-axis represent the number itself.
                                                            every step we divide our space into 2 halves and greater than 2^(b-1) on right part and lesser on left
                                                            Pictorial representation (see notes)
                                                        vs Quick Sort- Both partition and recurse.
                                                            parition criteria is 2^(b-1) vs pivot and hence the T(n).
                                                            st radix is better, other times quick sort (depending on value of b)
                                                            Eg- comparing small numbers- Radix will do good. Comparing- humungous numbers, QS will take over.
                                                    Straight Radix Sort- 
                                                        uses bucket sort
                                                        Examines bits from right to left-
                                                        PseudoCode
                                                            //Sort on every bit from right to left
                                                            for(k=0 to b-1)
                                                                sort the array in a stable way, looking only at kth bit.
                                                        What is stable sort?
                                                            Relative ordering of equal keys remains unchanged.
                                                            This is crucial for correctness.
                                                        Why Magic?
                                                            rearranging on 1st bit, 2nd bit.
                                                            T(n) = bn.
                                                            Let k be the leftmost bit position where they differ.
                                                                01011 and 01101, k = 2
                                                                At step k, the 2 keys are put in correct relative order
                                                                cuz of stability, the successive steps do not change the relative order of 2 keys.
                                                                subsequent steps preserve the relative ordering on previous lsb cuz of stability.
                                                            Think of eg where from rhs this approach would not have worked.
                                                        Performance
                                                            for number of bits times, no partition here.
                                                            if stable sort (sorting on 1 bit) in O(n) then O(bn)
                                                                using bucket Sort
                                                                T(n) = O(n+m)   // n- no of numbers and m= range of numbers (1 to m)
                                                                Keep appending numbers to the buckets 1 by 1 (using LL or array)
                                                                pull the elements from the buckets into array (maintains stable cuz of appending)    
                                            </RadixSort>
                                            <BucketSort>
                                                Partition using buckets of digits-no comparison so O(n), S(n)=?
                                            </BucketSort>
                                            <HeapSort>Refer PQ</HeapSort>
                                            <LowerBoundToComparisonBasedSorting>
                                                gimme 2 numbers- I know how to compare and you pay me (or ask me for comparison)
                                                    claim- There can be no algo greater than O(nlogn)
                                                    For any algo you design we can make a tree (of execution trace for specific instance) with representations
                                                        internal nodes- comparisons
                                                        External node- permutation
                                                        algo execution- root to leaf path
                                                            1st question compare 2 numbers (algo tells) and based on outcome- compare these 2 and so on.
                                                            we go along a branch of tree- until questions are sufficient to conclude a unique sequence.
                                                            Sorted array is just a permutation of original sequence.
                                                                so all permutations should exist as leaves, based on the input that I give.
                                                                It is a binary tree (not necessarily complete), height of tree >= log (n!) base 2 >= nlogn
                                                                Radix was not comparison based algorithm
                                            </LowerBoundToComparisonBasedSorting>
                                            <Summary>
                                                Insertion, Selection- O(n^2)
                                                Heap Sort- O(nlogn)
                                            </Summary>
                                        </Sorting>
                                    </CaseProblems>
                        </Algorithm>
                        <Program>
                            An implementation of an algorithm in some PL.
                            Program- We run the program and get a P-'Problem!'-process- program under execution. This is our focus in learning programming.
                                computing was approached as syntax in beginning (Programming course)
                                Practice enough so that you are convinced that what you can conceive (logical, algorithm), is writeable in form of a program.
                                Given an algorithm, it is assumed that you can write in PL constructs.
                            <Types>
                                Compiled Languages and Interpreted languages- Java script,ShellScript.
                                <LevelsOfProgramming>
                                    high(middle)
                                    assembly
                                    low
                                </LevelsOfProgramming>
                            </Types>
                        </Program>
                        <Process>
                            Process- This is the code in motion that OS works with. Refer OS.
                        </Process>
                    </ComputationProcess>
                    <Skepticism>
                        Science was depicted as evil may be started from manhattan project.
                        <AxiomaticTruths>
                            Engg truth- within bounds of measurement and error. 
                            Religious truth- written in some scripture/ a standardized authoritative book and it's true.
                            Legal Truth- Balance of probability, beyond reasonable doubt. on civil and criminal merits. Psychological Studies.
                            Mathematical Truth- we can prove it using axioms and proof methods we accept.
                            Linguistic truth- seems beautiful.
                        </AxiomaticTruths>
                        <Eg>
                            monks move the disks and govt searching them . who cares 2^n or n-1,n+1 who cares.
                            moves for towers of hanoi- 10 disks- 2^10- 1 sec to do. like ninja. if it was 2^20, possible- for 100 impossible.
                            1.6 Billion- we can't fathom such big numbers - we tend to take 60 million same as 60 billion.
                            it costs you 150 $ no 149 I'll give . govt scheme 6 billion dollars- they go 'ok'
                            60 million vs 60 billion for Computer scientists- 1 sec vs several mins. 
                            1.6 billion bees in 150 truck- you don't want accident with such truck.
                                    why don't better divide and calculate and tell it was impossible.
                            Book for big number- how to lie on statistics.
                            we switch off for big numbers- 60,000 hrs on study in year- we reduce to number we have intuition for. 4 elephants.
                            it came out 25 hrs a day he worked. that's the engg thing to do. e1 tried that.
                            how to count no of ants- 10^15- count! how could you check these numbers.
                            30% of earth is land and antarktic- 25% inhabitable and diameter of earth- 10,000 and area of sphere- 150 Million square Km. so per square m *10^6.
                                    ants per square meter- ants in happiness of biosphere- bush 100, backyard- crap 1 ant. 10 pessimistic and 50. no ants in active volcanos.
                                    it's just that. we believe that.
                            10^18 I don't believe you. you were pretty busy counting that.
                            Til the universe goes dark 2^63 and 2^9 ops per sec so 2^72 computations possible in universe lifetime.
                                    if exponentiation greater than 2^50- stop thinking about it.
                                    eb laughs at being geek- it is obsessive about world- it's great- so love geeky songs/jokes. we are all geeks.
                        </Eg>
                        <SkepticWithCode>
                            For us big numbers make a difference- 60 million lines vs 60 Billion may say doable or not.
                            Science used skepticism- falsifying the things- this we should devp- don't believe anything we say as truth
                                Scientists can be very methodical at what they do and not randomly doing changes and get it moving!
                                Ordered and systematic. Sth not working- write down what probs were and what gonna do and not randomly changes- st exposed easily but not always.
                            even with program have skepticism- prove hard that it is wrong.
                                I may have not tried hard enough. This is called unit testing methodology.
                                Unit testing- we write many test before hand and test our program against those inputs and outputs.
                                    Solve for different problem instances thru long series of test cases (Inputs)
                                    Run those test versions and hoping to see error somewhere.
                                    Demonstrate failing test case.
                            Each section very thoroughly tested b4 moving ahead.
                                Just generalize, what if I take 3 instead of 2.
                                Eg- Harry Potter got back in time- Oh That's me. With analytical brain what it means?
                                    Look behind him and someone might be watching me.
                        </SkepticWithCode>
                    </Skepticism>
                </DSA>
                <ADT>
                    Some problems may reduce to an "object" of an ADT type
                        REL this problem's data maps to graph ADT (eg- state transition diagram)
                    vs Data Structuring- Some problems may necessitate organization of data- in a certain way
                        to assist easy solving of a problem.
                    <Types>
                        <Ref>https://ece.uwaterloo.ca/~dwharder/aads/Abstract_data_types/No_relation/</Ref>
                        <NoRelation>
                            Local Defn- It may be that objects are being stored where no relevant relation exists between the objects. For example, the Registrar's Office must store information about students and these records must be stored in a particular order; however, there are no relevant relations between the students which will be necessary or useful. For example, if the record of a student who has a UW Student ID Number 20123456 and who was born on January 23rd, 1991 is being accessed, there is neither the need to access the next largest UW Student ID Number nor is there a need to access a student who has birthday on the 24th.
                                Not having a relationship to deal with actually allows some of the most optimal average run times for those operations relevant to objects within a container and no additional memory is required to store the relation.
                            Operations- Operations on a container where no relation exists between the objects being stored are simply the operations on a general container:
                                Accessing the number of objects in the container,
                                Determining if the container is empty,
                                Inserting a new object into the container,
                                Determining if an object is in the container (membership),
                                Removing an object from the container, and
                                Removing all objects from (clearing) the container.
                            Viz - Set, Map
                            Eg - Java - HashSet, HashMap, TreeMap, etc.
                        </NoRelation>
                        <LinearOrdering>
                            Local Defn- A linear ordering on a finite collection of objects may be described as follows: each object has exactly one immediate predecessor object and one immediate successor object with two exceptions: A first object has no predecessor and a last object has no successor.
                                A linear ordering is also known as a total ordering or a simple ordering.
                            Maths Defn- 
                                A binary relationship  a <= b  (read as a precedes or equals b) between two objects is said to be a linear ordering if:
                                    For any  a  and  b , either  a <= b  or  b <= a ,
                                    If both  a <= b  and  b <= a  it follows that  a = b , and
                                    The relationship is transitive: if  a <= b  and  b <= c , this implies that  a <= c .
                                We will say that  a < b  (read as a precedes b) if  a <= b  and  a != b .
                                Given  n  objects which have a linear ordering, we may order them  a1, a2, a3, \ldots, an  such that  a1 <= a2 <= a3 <= ... <= an  
                            Implicit and Explicit Linear Ordering
                                A linear ordering between to objects a and b may be implicitly defined through the operation a <= b which returns a Boolean value. In this case, the relationship depends only on the objects themselves. In C++, the operator<= may be overloaded as is demonstrated in this code block which compares two rational numbers:
                                bool operator<= ( Rational const &p, Rational const &q ) {
                                        return p.numerator*q.denominator <= q.numerator*p.denominator;
                                }
                                For example, if a container has the values 24, 3, 13, 36, 5, 8, 30, 12, 17, and 29, they may be ordered as shown in Figure 2.
                                Figure 2. The ordering of 10 specific integers.
                                Alternatively, the programmer can explicitly define the linear ordering: one object precedes another because it was explicitly placed in that location. The most common example of such an explicit linear ordering is a string: the string "Hello world!" is an ordered sequence of twelve characters.
                            Operations
                                Operations which may be performed on a container with objects which satisfy an equivalence relation include:
                                Additional Operations on Linear Orderings
                                    Access the first or last object in the linear ordering,
                                    More generally, access the kth object in the linear ordering,
                                    Given a reference to an object in the linear ordering, access the next larger or previous smaller object in the container.
                                    Provide a means for stepping through the objects in the container in order.
                                Additional Operations on Implicitly Defined Linear Orderings
                                    //Given an implicit linear ordering, it is possible to pose additional operations:
                                    Given an object tex:$$ a $$, find the preceding or next object in the container (the value tex:$$ a $$ need not be in the container),
                                    Given an object tex:$$ a $$, find the number of objects in the container either preceding or succeeding tex:$$ a $$ (the value tex:$$ a $$ need not be in the container),
                                Additional Operations on Explicitly Defined Linear Orderings
                                    //Given an explicit linear ordering, other operations include:
                                    Insert a new object or replace the object at the kth position,
                                    Given a reference to the kth object, insert a new object either before or after that object; or delete the object before or after the kth object.
                                Any text editor must store the contents of a file in a linear order and any edit to the text will changed the linear ordering.
                            Viz - List,SortedList,Stack,Queue,Deque, String, PriorityQueue
                            Eg - ArrayList, LinkedList.
                        </LinearOrdering>
                        <HierarchicalOrdering>
                            Local Defn-  A hierarchical ordering on a finite collection of objects may be described as follows: each object with exactly one exception has a parent object. The one exception is is an object which has no parent and this exception is called the root.
                                All objects which have the same parent are said to be siblings and those objects are the children of the parent. An object with no children is said to be a leaf.
                            Maths Defn- A binary relationship  a <= b  (read as a precedes or equals b) between two objects is said to be a hierarchical ordering if there is a single root object  r  and:
                                    For all  a ,  a <= a  and  r <= a  and ,
                                    If both  a <= b  and  b <= a  it follows that  a = b ,
                                    The relationship is transitive: if  a <= b  and  b <= c , this implies that  a <= c , and
                                    If  a <= c  and  b <= c , this implies that either  a <= b  or  b <= a .
                                Two objects  a  and  b  are said to be comparable if either  a <= b  or  b <= a ; otherwise, they are said to be non-comparable.
                            Operations- 
                                Hierarchical Orderings and Linear Orderings

                                Note that any linear ordering defines a trivial hierarchical ordering where objects have at most one child.
                                Implicit and Explicit Hierarchical Orderings

                                In general, most hierarchical orderings are explicitly defined by the programmer and the data structure is constructed through explicit definitions.
                                Additional Operations on Hierarchical Orderings

                                    Access the root object;
                                    Provide a means for traversing through the objects in a regular manner (e.g., depth- or breadth-first traversals);
                                    Given a reference to an object in the hierarchical ordering:

                                        Access the parent of the object,
                                        Access the number of children,
                                        Determining if the object is a leaf (no children),
                                        Provide a means of stepping through the children, and
                                        Provide a means of traversing through all the descendants of the object, and
                                        Remove a means of removing the object and all its descendants;
                                    Given two objects, find the deepest common ancestor.

                                Additional Operations on Explicitly Defined Hierarchical Orderings

                                    Given a reference to an object, insert a child.

                            Viz- Tree
                            Eg - Have a look at javax.swing.tree, TreeModel, and TreeNode.
                        </HierarchicalOrdering>
                        <PartialOrdering>
                            Local Defn- A partial ordering on a finite collection of objects may be described as follows: each object can have multiple immediate sucessors; however, it is not possible to start at a any object and following a path from that object to an immediate successor object and ultimately get back to the initial object—there are no loops.
                            Defn- A binary relationship  a <= b  (read as a precedes or equals b) between two objects is said to be a partial ordering if there is a single root  r  and:
                                For all  a ,  a <= a ,
                                If both  a <= b  and  b <= a  it follows that  a = b , and
                                The relationship is transitive: if  a <= b  and  b <= c , this implies that  a <= c .
                            Operations- 
                                Partial Orderings and Linear/Hierarchical Orderings

                                Note that any linear or hierarchical ordering defines a partial ordering where objects is the successor of at most one other object.
                                Implicit and Explicit Partial Orderings

                                In general, most hierarchical orderings are explicitly defined by the programmer and the data structure is constructed through explicit definitions.
                                Additional Operations on Partial Orderings

                                    Access those object which are not the successor of any other object;
                                    Provide a means for traversing through the partial order in a regular manner (e.g., a traversal through a topological sort);
                                    Given a reference to an object in the partial order:

                                        Find the number of successors,
                                        Determining if the object has no successors,
                                        Provide a means of stepping through any successors,
                                        Find the number of objects for which this object is a successor, and
                                        Provide a means for stepping through those objects for which this object is a successor.

                                Additional Operations on Explicitly Defined Hierarchical Orderings

                                    Establish an edge from one object to another.
                                    Given a reference to an object, insert a successor.

                                Abstract Data Types Based on Partial Orders

                                There most common abstract data structure associated with a partial ordering is the Directed Acyclic Graph (DAG).
                            Viz- DAG (Directed Acyclic Graph)
                            Eg - org.jgrapht.graph.DirectedAcyclicGraph
                        </PartialOrdering>
                        <EquivalenceRelation>
                            A binary relationship ~ between two objects is said to be an equivalence relation if:
                                Each object is related to itself: a ~ a
                                The relationship is symmetric: a ~ b if and only if b ~ a
                                The relationship is transitive: a ~ b and b ~ c implies that a ~ c
                            Operations-
                                Implicit and Explicit Relationships

                                An equivalence relationship between two objects a and b may be implicitly defined through a function related(a, b) or member function a.related(b) which returns a Boolean value. The relationship is implicit to the objects.

                                Alternatively, the programmer can explicitly define an equivalence relation by defining the equivalence classes and where two objects are related if they fall within the same equivalence class.
                                Operations

                                Operations which may be performed on a container with objects which satisfy an equivalence relation include:
                                Additional Operations on Equivalence Relations

                                    Given an object in the container, retrieve a representative entry of the corresponding equivalence class, and
                                    Find all objects in the container which are equivalent to a given object, and
                                    Determine the size of an equivalence class.

                                Operations on Explicitly Defined Equivalence Relations

                                If the equivalence classes are explicitly defined by the programmer, there is no object-related member function which can return whether two objects are related, and therefore there is an addition operation:

                                    Determine if two objects in the container are related.

                            Viz- Partition
                            Eg - ??
                        </EquivalenceRelation>
                        <AdjacencyRelation>
                            Viz- abstractGraph
                                DS- using dense matrix, array of linked list, sparse matrix
                            Eg - JAVA - JGraphT, JGraph, etc.
                        </AdjacencyRelation>
                        <WeakOrdering></WeakOrdering>
                        <VectorSpaces></VectorSpaces>
                        <MathematicalTypes></MathematicalTypes>
                    </Types>
                    Abstract Data Types- is a mathematically specified entity that defines a set of its instances (objects) with:
                        class of objects whose logical behavior is defined by a set of values and a set of operations
                        Mathematical model for data types (user's view where a data type is defined by)
                                its behavior (semantics) of possible values, 
                                possible operations on data of this type
                                the behavior of these operations. 
                                Eg- Tree- many real life problem scenarios reduce to visualising data (by user) data in form of a tree (their implementation can be anything)
                                    any real life problem- let's reduce it to Tree ADT.
                            vs Data structures- concrete representations of data, and are the point of view of an implementer, not a user.
                        interface- a collection of signatures of operations, that can be invoked on the instance.
                            Eg- New():ADT, Insert(s:ADT,v:element):ADT, Delete(s:ADT,v:element):ADT, IsIn(s:ADT,v:element):boolean.
                        Axioms (precondition,postcondition)- semantics of operations (what and not how)
                            IsIn(New(),v)=false, IsIn(Insert(S,v),v)=true, IsIn(Insert(S,u),v)=IsIn(S,v) if v != u, etc.
                        Exceptions- Powerful Programming Construct- on exceptional case(error), throw an exception meaning- the flow of control goes to calling method (Responsibility Delegated)
                            throws on a method informs that this delegates the exception to calling method.
                            vs try catch block- listens to exceptions, addresses them thru operations.
                            finally- 
                            If u never catch them, they propagate upwards until user sees it.
                        Eg- Stack- It's instance can have a set of operations like push,pop with signatures and what they do.
                        Types of Operations
                            Constructors
                            Access Functions- Retrieval related.
                            Manipulation Functions- CRUD\R
                        Serve as building blocks of algo (soln of prob)- requirements for Data Structures course.
                        These are Data Structures but on higher level of abstraction for language to talk.
                            encapsulates Data Structure and Algorithms (implementations)
                            separating concerns of correctness and efficiency.
                    Stack- is a container of objects which does CRUD following LIFO (Last-In-First-Out) Principle.
                        "built-in" class of Java- java.util package.
                        Push- Inserting into a stack.
                        Pop- Removing the item (last item) from the stack.
                        @Stack of plates
                        Operations Supported- 
                            New(),Push(s:ADT,v:element),Pop(s:ADT):ADT,top(s:ADT):element
                            Also- Size(s:ADT):integer, isEmpty(s:ADT):boolean.
                        Axioms- Pop(Push(S,v)) = S, Top(Push(S,v))=v.
                </ADT>
            </LLD>
            <IO>
                <ConfigurationFiles> mainly for reading not for writing
                    aka PropertyFiles or tools for end user to configure the system 
                    design time - what the system looks like.
                        Eg - object type codes (or of items) in our system (not open to end user to add)
                        REL NW
                    run time - how the system should behave
                        Eg - reading text files which tag should mean PO.
                        REL BC
                </ConfigurationFiles>
                <Persistence>
                    <Files>
                        All regex, reading through context free grammar, CUP Parser, Lex Parser, Yacc - comes under this.
                    </Files>
                    <DBMS>
                        <FileRepresentations>
                            <XML></XML>
                            <JSON></JSON>
                        </FileRepresentations>
                        <SQL>
                            <DDL></DDL>
                            <DML></DML>
                            <DCL></DCL>
                        </SQL>
                        <NoSQL>
                            About - When will you want to use it also comes under this.
                        </NoSQL>
                    </DBMS>
                </Persistence>
                <Console></Console>
            </IO>
            <Integrations>
                External Libraries - JARs
                ?Web Services 
                    REST - ODATA
                    SOAP
                    RFC, RPC, RMI
                Tool Extensions - Excel based, Adobe Document Server.
            </Integrations>
        </Design>
        <CodingImplementation>
            Coding/Implementation- rollup sleeves, get down to work.
                DDL of database. Then apps, DML of DB, etc.
                IDE is used in this.
            <Programming>
                What?
                    PL is utilized to convey ideas (or logics or action plan) to the machine.
                Why? 
                    engage them to build applications for real world scenarios for services (then they get their worth)
                        @Language is rock bottom necessity to convey your ideas but giving a seminar is utilization of language for the purpose.
                            Language:Seminar::PL:Application (with logics)
                How?
                    Choose effective framework
                <ProgrammingParadigms>
                    Different Languages with their constructs (grammar, capabilities, world views, jargons) to express your algorithm.
                    @You know a language is good but it takes contents (logic,purpose) to make a seminar.
                    <ImperativePL>
                        tell the computer what to do. "Computer, add x and y," or "Computer, slap a dialog box onto the screen."
                        And (usually) the computer goes and does it. 
                        Criteria - Statements for Control flow support - can be block-controlled or spaghetti (goto)
                            This is where most of us spend our lives, in looping structures and if-then-else statements and the like.
                        Eg- Assembly PL
                        <StructuredPL>
                            Criteria - Program composed of a set of blocks - function, control statement blocks.
                            functionality is divided into block structure (for, while, if) units (reusable piece of code)
                            ~ Modular PL- create a physical form of package which are fairly general purpose and re-usable
                            1 can be converted to other easily.
                            Eg- C, JAVA, etc
                            vs Imperative PL- tells the procedure but may have spaghetti code full of goto.
                            <Types>
                                <ProceduralPL>
                                    Structured code where functions (or procedures) dominant over data is called procedural.
                                    Criteria - Procedures, also known as routines, subroutines, or functions, simply contain a series of computational steps to be carried out.
                                        it's all a set of functions or procedures and execution starts from 1 procedure.
                                    Eg- C, Pascal, COBOL, Fortran.
                                    <C>
                                        <Thereja>
                                                //TODO- Types of errors,memory
                                                <ProgrammingLanguages>
                                                        Language designed to express computation/operations.
                                                                has vocabulary/ semantics for instructing specific task.
                                                        <ChoosingCriteria>
                                                            Type of computer for execution
                                                            Type of program/ software
                                                            expertise of programmers
                                                        </ChoosingCriteria>
                                                        <ProgrammingGenerations>
                                                            <MachineLanguage>
                                                                1GL- Machine Language (type- imperative)
                                                                        1st stored program, commands expressed in 0's and 1's. So Fast and Efficient.
                                                                        Not portable because all machines different in their architecture and hence instructions.
                                                                        Focus less on Logic
                                                                        Typically represented as Octal or Hexadecimal format(0 or 0X)
                                                                                difficult to Learn-> read,write,debug and edit.
                                                                                        Editting- to insert 1 instruction may adversely affect a program's branching hardcoded.
                                                                        Problems- why M/C Codes not Feasible?
                                                                                    Difficult to debug/maintain- Understand.
                                                                                            Inserting a statement can mess for braching statement
                                                                                    Difficult to remember the instruction in binary.
                                                                                    Less focus on logic and more on machine level thinking.
                                                                                            Need to know machine specific details- so no portability.
                                                                        Our abstraction with VLSI is using of Instruction Set which they implement.
                                                                        System calls is our abstraction with OS (done by embedded people)- IOT comes under embedded.
                                                            </MachineLanguage>
                                                            <AssemblyLanguage>
                                                                in b/w LLL,HLL- expressed using symbols and mneumonics but at h/w level (type- imperative language)
                                                                2GL- Assembly Language
                                                                        Symbolic notation to represent MLL instructions.
                                                                                A leap forward in 1955
                                                                                Eg- ADD a,b -mneumonic and symbols in place of instruction and addresses.
                                                                                Consists of 
                                                                                        Labels for jumping- id's and references used
                                                                                        Operation Codes/Opcode- Mneumonic For operation to be performed.
                                                                                        >=1 Operands- register / location in MM where data is located.
                                                                                So need a translation- called ASSEMBLER.	
                                                                        Closely connected to machine language-> Efficient but Machine dependent.
                                                                                So used only when speed is critical consideration.
                                                                        Thinking still on machine level.
                                                                                But brought logic in focus.
                                                                        Introduced Macros for repetitive statements
                                                            </AssemblyLanguage>
                                                            <HLL>
                                                                3GL- High Level Language (type- structured Language)
                                                                        Already Logical level+ Make more user friendly.
                                                                                1960-70 spurred data processing
                                                                                1:Many mapping. 1 instruction expands into several machine language instruction.
                                                                                ->less prone to errors- easy to program, more like natural languages while still think in machine terms, not specific to a machine.
                                                                                Widespread in use- convenient, English-like, client's problems addressed.
                                                                                Reduced Flexiblity- machine contact as of ASL. But C,FORTRAN middle-level Language- they have both the features( Logical thinking and maintaining flexibility)
                                                                        so called? because not closely related to internal characteristics of computer. 
                                                                        Portable because compilers are for all platforms specific- logical rules/grammar kept intact.
                                                                        Used for creating robots,graphics,compilers.
                                                                <ExecutionProcess>
                                                                        <MakeAProgram></MakeAProgram>
                                                                        <Compiler>
                                                                        Compiler- Idea came from Macros in Assembly Language Programming paradigm.
                                                                                Source code in a PL(HLL) fixed by programmer- platform independent.
                                                                                Attempt by Compiler to check for syntactic "Grammatic" correctness- Pertaining to grammar/rules.
                                                                                        while(Errors) Programmer gets back to source code and corrects it.
                                                                                                machine language (0,1) target/object/machine code (Instructions for CPU) made available (machine specific).
                                                                        </Compiler>
                                                                        <Interpreter>
                                                                        Interpreter- HLL program->Intermediate form->Executes line by line, hence slower.
                                                                                Better at debugging.
                                                                        </Interpreter>
                                                                        <Linker>
                                                                        Linker- Link Editor Binder
                                                                                For Modular Programming- Simplified programming for huge software and tasks distributable.
                                                                                        Leads to- Many Modules with some dependencies on other modules and libraries.
                                                                                        every module compiles and makes object code but not executable
                                                                                                Y? Some dependency related branching- unsettled!
                                                                                        Linking settles dependencies and places library object codes in there.
                                                                                Makes executable by resolving dependencies(branching) and putting all object codes in 1 place and stores in HDD.
                                                                        </Linker>
                                                                        <Loader>
                                                                            Loader- Loads the program(executable) thus made into MM for execution
                                                                                Becomes process!										
                                                                        </Loader>
                                                                </ExecutionProcess>
                                                                        VIZ
                                                                                C
                                                                                        <Intro>

                                                                                                Invented by Dennis Ritchie in 1970 for system software implementation by UNIX but later for applications also.
                                                                                                        used for several different software platforms.
                                                                                                        Purpose- breaking the monopoly of systems with hardware and software in 1 package.
                                                                                                so Called? Came after B.
                                                                                                <History>
                                                                                                    <Need>
                                                                                                        Open systems now but closed systems then. IBM made h/w,s/w and no look inside.
                                                                                                                High efficiency because designers no it all, no patch up solution
                                                                                                                    my OS,my s/w => utilize functionality to fullest.
                                                                                                                1 vendor to run to- for the customer.
                                                                                                                    (-)- Monopoly- Vendor locking.
                                                                                                        Notion came to break it up- genesis of UNIX. How to do it?
                                                                                                            UNIX and C went hand in hand.
                                                                                                            Keep is simple and so minimalistic high-level--> keywords and operators.
                                                                                                        No language for systems devp(only biz,etc). So, Developed C.
                                                                                                            tools were created- Yacc compiler- to make compiler we need a compiler and Lex- for lexical analysis.
                                                                                                    </Need>
                                                                                                    <Evolution>
                                                                                                    ALGOL->BCPL->B->C->Traditional C->k&R C-> ANSI C89-> ANSI/ISO C90 -> C95 -> C99
                                                                                                            algol- 
                                                                                                                    used block structure
                                                                                                                    structured programming approach
                                                                                                                    famous in UK not in US.
                                                                                                            BCPL- Basic Combined Programming Language
                                                                                                                    typeless- no data types
                                                                                                                    Direct memory access
                                                                                                            B- By Ken Thompson to devp first version of UNIX.
                                                                                                            C- All concepts combined + Data Types
                                                                                                                    UNIX and C strongly correlated
                                                                                                                    Academics to Progessional popularity.
                                                                                                            K&R C- Book published by Ken and Ritchie became so famous (standardized C)
                                                                                                            ANSI- several versions so standardized (more firm)
                                                                                                            C99- additions/ updations.
                                                                                                                    Allowed // single line comment
                                                                                                                    char type increased
                                                                                                                    integer data type extended
                                                                                                                    type declaration in 'for' statement allowed.
                                                                                                    </Evolution>
                                                                                                </History>
                                                                                                <Characteristics>
                                                                                                        Middle Level Language- best features of ASL and HLL- used for system s/w and business packages.
                                                                                                                Quick language- fast and efficient to other languages.
                                                                                                                Always 2nd best language for program task.
                                                                                                        Only 32 keywords so easy to learn.
                                                                                                        Functions
                                                                                                                Rich Library functions and operators to make a robust and complex program
                                                                                                                User can add his own function to C library.
                                                                                                                Structured Programming- Think of problem in terms of fn,modules to make a complete program															
                                                                                                                        easy to create,maintain,debug,test.
                                                                                                        Data Types- Loose Typing- Unlike Pascal, char to int easy.
                                                                                                        Pointers- for generic programming, refering to memory location, array, function, struct.
                                                                                                                Sensitive- Error proned- memory leak,dangling pointer problems.
                                                                                                        Stable Language- accepted standard since 1983.
                                                                                                                Core Language as many PL based on C- JAVA,C++,PERL.
                                                                                                        Highly Portable
                                                                                                            meaning source code- not execution code. because of compiler made for all systems and platforms.
                                                                                                            try now that we have ubuntu environment also.
                                                                                                </Characteristics>
                                                                                                <Errors>
                                                                                                    META- misplaced tag.
                                                                                                    You write correct code, I give correct code and amazing speed. But wrong then core dumped.
                                                                                                    Core dumped- Magnetic tapes in those days called core so in that context but usage went on.
                                                                                                </Errors>
                                                                                                <Why>
                                                                                                        Has been around for long time so lot of information available.
                                                                                                        will help learn C++,Java
                                                                                                        Middle Level Language- used for system s/w and business packages. best features of ASL and HLL.
                                                                                                        <Uses>
                                                                                                                OS- Primarily used for system programming. because portable, Efficient, accesses hardware address, low routine demands.
                                                                                                                Compilers and Interpreters.
                                                                                                                Intermediate Language for portability
                                                                                                                End User applications implementation.
                                                                                                        </Uses>
                                                                                                </Why>
                                                                                                Why study B4 core subjects
                                                                                                    Ease of understanding them- technical look
                                                                                                    Bring e1 on same level
                                                                                                Why Better Program on Ubuntu
                                                                                                    not production here but working so work at roots so as to understand how things are working.
                                                                                        </Intro>
                                                                                        <StructureOfAProgram>
                                                                                                <PreProcessorCommands>
                                                                                                        <What>
                                                                                                            Instructions to compiler on how to prepare program for compilation
                                                                                                            b4 compiler, the source code is given to preprocessor program which takes action based on preprocessor directives
                                                                                                            preferably at the top of the program but can be anywhere.
                                                                                                        </What>
                                                                                                        <Why>
                                                                                                            Readable, Understandable code
                                                                                                            Portable code- printf,etc- machine specific functions can be laid in standard library functions.
                                                                                                            More Efficiency- Macro- Takes lesser time that function call- as a lot of things are to be done there, stack, remember instruction,passing arguments
                                                                                                            Easy modify and update- to make changes visible thru the code which burden of track of all references.
                                                                                                        </Why>
                                                                                                        How?
                                                                                                            these are not C statements (not program part) so NO SEMICOLON.
                                                                                                            start with #(task)
                                                                                                            to extend to newline- use \
                                                                                                            <Types>
                                                                                                                    <Unconditional>
                                                                                                                    Some well-defined task
                                                                                                                            <define>
                                                                                                                                <Constant>
                                                                                                                                    What? symbolic names for constants for blind replacement of former with latter
                                                                                                                                    Why? useful in generic program- to replace all data types with int or float at once.
                                                                                                                                    How?
                                                                                                                                        be alert else syntax error and diffl to detect bugs
                                                                                                                                            Eg- #define PI 3.14; so when inserted into formula- area = PI * r*r;
                                                                                                                                                //this is syntax error- observe the semi-colon
                                                                                                                                        eg- 
                                                                                                                                            #define PI 3.14	//macros written in capital cases as good practice so that easily identifiable
                                                                                                                                                    in the C program code- a statement- area = PI*r*r; will become area = 3.14*r*r; b4 compilation.
                                                                                                                                            #define EQUALS ==	//if(a EQUALS b){} in C code.
                                                                                                                                            #define PRINT printf("Krishna");	//imagine so useful in debugging the code for logical errors.
                                                                                                                                            #define START main(){
                                                                                                                                            #define END getch();\
                                                                                                                                            return 0;}
                                                                                                                                            #define INPUT printf("Enter a number);scanf("%d",&num);		//mind keeping track of variables in code
                                                                                                                                            #define DATATYPE int
                                                                                                                                            in code-
                                                                                                                                                    START
                                                                                                                                                    DATATYPE num;
                                                                                                                                                    INPUT
                                                                                                                                                    if(num EQUALS 100)
                                                                                                                                                            PRINT
                                                                                                                                                    END
                                                                                                                                            Some predefined MACROs
                                                                                                                                                    _FILE_- string literal tells source file being worked on.
                                                                                                                                                    _LINE_- current line of source code being compiled-help in debugging.
                                                                                                                                                    _DATE_- date of compilatioin- mmddyyyy
                                                                                                                                                    _STDC_- specifies full conformances to ANSI C
                                                                                                                                                    _TIMESTAMP_- DddMmmDatehh:mm:ss yyyy of modification to source file.
                                                                                                                                                    Use anywhere in your code in printf or so.
                                                                                                                                </Constant>
                                                                                                                                <Function>
                                                                                                                                    What? macro defn replaces the fn call and params replaced by arguments before compile time
                                                                                                                                    Why? no overhead of fn call->time saved.
                                                                                                                                    How?
                                                                                                                                        #define SPACE* fn(ar1,arg2,..) SPACE* fnDef
                                                                                                                                        no space in params list.
                                                                                                                                        should match No of args in invocation(<=31)
                                                                                                                                        except ellipsis exceed- trailing arguments
                                                                                                                                        multispaces by 1 space. 1st and last ignored
                                                                                                                                        A'\' means 1 more '\' inserted b4 this.
                                                                                                                                        A'"'means ...
                                                                                                                                        avoid use semicolon
                                                                                                                                        prefer keeping args in bracket in formula
                                                                                                                                            eg-
                                                                                                                                                #define square(x) ((x)*(x))
                                                                                                                                                    Because in call- (square(2+3) or an expression) can mess with our plans
                                                                                                                                                        because of operator precedence- it is replacement not evaluate expression and call the method.
                                                                                                                                        nesting of macros allowed
                                                                                                                                            #define cube(x) (square(x)*(x))
                                                                                                                                            sequence not important
                                                                                                                                        Macro can be defined anywhere (local,global) but before usage in a program
                                                                                                                                    Operators
                                                                                                                                            Convert to String
                                                                                                                                                # for replacement convert the thing into string literal
                                                                                                                                                eg- #define MAC(x) #x	//MAC(10) become "10"
                                                                                                                                            Merge
                                                                                                                                                ##- merge operation or concatenate 2 tokens
                                                                                                                                                eg
                                                                                                                                                    #define JOIN(A,B)A##B
                                                                                                                                                    main(){
                                                                                                                                                            i=1;
                                                                                                                                                            printf("\nHi JOIN(USER,i));	//Hi User1
                                                                                                                                                    }
                                                                                                                                            Used for error codes as macro
                                                                                                                                </Function>
                                                                                                                            </define>
                                                                                                                            <undef>
                                                                                                                                    What? removes macro created with #define name sth
                                                                                                                                        together with #define it makes a region for the macro.
                                                                                                                                        can pair with #if to conditionally close the macro.
                                                                                                                                    eg-
                                                                                                                                            #define MAX 10
                                                                                                                                            ...
                                                                                                                                            #undef MAX
                                                                                                                            </undef>
                                                                                                                            <include>
                                                                                                                                    What? contents of specified file included in the code- blindly!
                                                                                                                                            can lead to redefinition of some variable or struct- so use ifndef- later!!
                                                                                                                                    Why?
                                                                                                                                        All function declarations in there .h 
                                                                                                                                            so that the functions invoked in program don't give unidentified symbol error.
                                                                                                                                        can add .c file also but not advisable
                                                                                                                                            as redeclaration of main fn error can come.
                                                                                                                                    How
                                                                                                                                        file format
                                                                                                                                            < file >
                                                                                                                                                    for system header files searches in std lib of system directory.
                                                                                                                                                    can set our own fn in there also.
                                                                                                                                            "file_name(path)"
                                                                                                                                                    searches in directory containing files- absolute path
                                                                                                                                                    searces in quote directories- it is path.
                                                                                                                                                    then system directories.
                                                                                                                                        eg-
                                                                                                                                            #include "C:\stud\my_header.h"
                                                                                                                                        files inclusion can be nested
                                                                                                                                            file1 includes file2 which includes file3 in its defn.//file1 become grandparent.
                                                                                                                            </include>
                                                                                                                            <line>
                                                                                                                                    errors compiler tells filename, line no to rectify
                                                                                                                                    this directive controls the line No and filename that appears
                                                                                                                                    gives more meaningful messages
                                                                                                                                    main()
                                                                                                                                    {
                                                                                                                                            #line 10 "error.c"
                                                                                                                                            int a = 10:	//colon not semi-colon
                                                                                                                                            #line 20
                                                                                                                                            printf("%d",a);
                                                                                                                                    }	//error in file error.c, lines 10 & 20.	note the error line reported for the error.
                                                                                                                            </line>
                                                                                                                            <pragma>
                                                                                                                                    instruction to compiler. Ignored during pre-processing.
                                                                                                                                    effect of pragma applied from where included to end of compilation
                                                                                                                                    format #pragma string
                                                                                                                                            #pragma COPYRIGHT_DATE "2014-2015"
                                                                                                                                            #pragma COPYRIGHT "Krishna Software"
                                                                                                                                                    string place in object code copyright Krishna Software; 2014-2015	//w/o date, current year is used.
                                                                                                                                            #pragma OPTIMIZE ON	//or OFF
                                                                                                                                                    a cc +02 prog.c set optimization level to 2.
                                                                                                                                                    #pragma OPTIMIZE OFF	//turned off
                                                                                                                                                    #pragma OPTIMIZE ON	//restore to 2.
                                                                                                                                            #pragma HP_SHLIB_VERSION ["]data["]
                                                                                                                                            versionid
                                                                                                                                            locality
                                                                                                                                            pragma once- a file with such pragma is included once.
                                                                                                                                            customize warnings and error messages	//TODO
                                                                                                                                            //TODO- read internet
                                                                                                                            </pragma>
                                                                                                                    </Unconditional>
                                                                                                                    <Conditional>
                                                                                                                    Conditional- Whether or not include chunk of code.
                                                                                                                            vs 'if' in code- statement works differently for diffn data while running a program
                                                                                                                                as situation at compile time, allows diffn code included.
                                                                                                                                Modern compiler removes the conditional part of code as in if(constant){}
                                                                                                                            Why? A program needs different code depending on OS and machine.
                                                                                                                                the excluded code is kept commented for future use.
                                                                                                                            VIZ
                                                                                                                                    ifdef- check existence of macro
                                                                                                                                            eg-
                                                                                                                                                    #ifdef MACRO
                                                                                                                                                            controlled text		//included only if macro is defined. validity check done
                                                                                                                                                    #endif
                                                                                                                                            ifndef- 
                                                                                                                                                What? check if macro not defined already. can also be in #else part of previous.
                                                                                                                                                Why? saves programmer from redefinition error- in big project- similar objects are used by multiple source files- but final integrated code should have it once.
                                                                                                                                                How? 
                                                                                                                                                    #ifndef MACRO
                                                                                                                                                            controlled text
                                                                                                                                                    #endif
                                                                                                                                    #if- control compilation of portions of source file.
                                                                                                                                                    condition can be any expression
                                                                                                                                                            using const and macro, can't use sizeof,typecast,enum- these are C lang constructs.
                                                                                                                                            #elif- ~else if
                                                                                                                                            #else
                                                                                                                                            #endif
                                                                                                                                                    eg-
                                                                                                                                                            #define MAX 10
                                                                                                                                                            #if option ==1
                                                                                                                                                                    int stack[MAX];
                                                                                                                                                            #elif option ==2
                                                                                                                                                                    float stack[MAX];
                                                                                                                                                            #else
                                                                                                                                                                    printf("invalid input");
                                                                                                                                    #defined
                                                                                                                                            defined MACRO or defined(MACRO)
                                                                                                                                            ~
                                                                                                                                                    #ifdef MACRO1
                                                                                                                                                    #ifdef MACRO2
                                                                                                                                                            Controlled text
                                                                                                                                            Usage
                                                                                                                                                    #if defined(MACRO1) && defined(MACRO2)
                                                                                                                                                            controlled text...
                                                                                                                                    #error
                                                                                                                                            compile time error messages
                                                                                                                                                    detect programming inconsistencies
                                                                                                                                                    violation of constraints checking
                                                                                                                                            #error "string"
                                                                                                                                            on encounter- compilation terminates and message in string given in reports,stderr
                                                                                                                                            eg
                                                                                                                                                    #ifndef SQUARE
                                                                                                                                                            #error macro not defined	//preprocessor reports a fatal error
                                                                                                                                            important
                                                                                                                                                    whether a given line is completed or not
                                                                                                                                                    ensuring that macro is defined
                                                                                                                                            ~#warning also
                                                                                                                    </Conditional>
                                                                                                            </Types>
                                                                                                </PreProcessorCommands>
                                                                                                Comments- covered later in functions.
                                                                                                <GlobalDeclarations>
                                                                                                        Visible Throughout program
                                                                                                        Lifespan and scope is thru the program.
                                                                                                        Generally functions declarations, structures (struct, union, enum) are kept global.
                                                                                                        The scope can be restricted to a file using static keyword.
                                                                                                </GlobalDeclarations>
                                                                                                <Functions>
                                                                                                        <Function>
                                                                                                        Function- a group of C statements sequenced logically for specific task performed- executes together
                                                                                                                <itself>
                                                                                                                    return type-
                                                                                                                    identifier- 
                                                                                                                    formal arguments- 
                                                                                                                </itself>
                                                                                                                <Declaration>
                                                                                                                        Naming Identifiers- A symbol assigned by Programmer to program elements to uniquely identify data or objects in there.
                                                                                                                                Rule
                                                                                                                                        Participating characters- alphabets (lowercase and uppercase separate),numbers,NO special characters except Underscore (_)
                                                                                                                                                Eg- rNo is different from RNo.
                                                                                                                                        Any permutation of characters
                                                                                                                                                with no of char <=31
                                                                                                                                                1st char be be an alphabet
                                                                                                                                                Should not be a keyword of C PL.
                                                                                                                                Good Practices
                                                                                                                                        Give meaningful names to identifier- descriptive of what it does
                                                                                                                                                Abbreviations a good idea
                                                                                                                                                Camel-casing (you see the hump),Underscore to separate parts.
                                                                                                                                                        Eg- deptName-preferable for struct or dept_name- preferable for local variables.																		
                                                                                                                        Identifiers for
                                                                                                                                <DataIdentifiers>
                                                                                                                                        <DataTypes>
                                                                                                                                                Y? Different types of data need to be represented in memory differently and assigned different memory space
                                                                                                                                                Very few in C																				
                                                                                                                                                Have their variants or modifiers- like long,short,unsigned.
                                                                                                                                                VIZ
                                                                                                                                                        The space in terms of chunks of memory is dependent on machine- 16-bit,32,64.
                                                                                                                                                        for 16-
                                                                                                                                                                int- Integer number.
                                                                                                                                                                        2 Bytes--> 2^n representations- half (2^(n-1)-1) for positive and 1 for zero and remaining 2^(n-1) for negative.
                                                                                                                                                                        Big and Little Endian formats so data not portable to machine with different architecture of storing.
                                                                                                                                                                float- Decimal number
                                                                                                                                                                        Mantissa and exponential form
                                                                                                                                                                                5.32decimal to binary- 5 to 101 in binary and 32 for .0101 so 101.0101 represented as 1.010101 * 2^(10)	
                                                                                                                                                                                Biasing done for?
                                                                                                                                                                        4 Bytes
                                                                                                                                                                double- Bigger decimal number.
                                                                                                                                                                        8 Bytes
                                                                                                                                                                char- any Text( alphabet,symbols,digit numerals.)
                                                                                                                                                                        1 Byte- same as Int only size so char i for loop range restricted and non-negative.
                                                                                                                                                                        in memory, stored as their ASCII codes- 65 is taken as 'A'
                                                                                                                                                                                so internally it is nothing but an integer.
                                                                                                                                                                        unsigned char for portability
                                                                                                                                                                                use only when special need.																					
                                                                                                                                                                void- valueless- used in pointers and functions
                                                                                                                                        </DataTypes>
                                                                                                                                        <MemoryAllocated>                                                                                                                                        
                                                                                                                                                Memory is nothing but a large array of bytes- index called as address. Byte-addressable just means each address stores one bytes.
                                                                                                                                                To store 4 bytes but every address can store 1 byte so split 4 byte representation in 4 parts- physically place them in Big or little endian format. Doesn't apply to register of 32 bits size.
                                                                                                                                                        Great problem in communication over networks- HTML web pages.
                                                                                                                                                Data storage Location-important to compiler, is given a name- alias- important to programmer. Using name we refer to memory address Location.
                                                                                                                                                Memory Types
                                                                                                                                                        Stack
                                                                                                                                                        Heap
                                                                                                                                                        Text
                                                                                                                                                        Global
                                                                                                                                        </MemoryAllocated>
                                                                                                                                        <ConstantIdentifiers>
                                                                                                                                        Constants Identifiers whose values don't change
                                                                                                                                                eg- value of PI- even by mistake should not change
                                                                                                                                                        use #define, or ?const, or hard-coded.
                                                                                                                                                                const float PI=3.14f
                                                                                                                                                                        scope of PI within fn
                                                                                                                                                                #define PI 3.14
                                                                                                                                                                        before compilation, PI is replaced blindly by 3.14
                                                                                                                                                Best practices- keep in capital letters to distinguish.
                                                                                                                                                        int-
                                                                                                                                                                int- 1234
                                                                                                                                                                long int- 1234l or 1234L
                                                                                                                                                                unsigned int- 1234u,123lu,1234ul
                                                                                                                                                                unsigned long int- even limit exceeds.?eg- 1234567890
                                                                                                                                                                octal- 0123
                                                                                                                                                                Hexadecimal- 0X123
                                                                                                                                                        float- Integer and decimal part or fractional and exponent field e or E.
                                                                                                                                                                +123.456E-27 treated as double by default
                                                                                                                                                                3.14f or .2F for float.
                                                                                                                                                                3.14L- long double.
                                                                                                                                                        character- single character in quotes- 'A' or '\n'- is a single character represented as this.
                                                                                                                                                        string- In double quotes- address of first character is recorded and NULL is appended at end.
                                                                                                                                        </ConstantIdentifiers>
                                                                                                                                        <Variables>
                                                                                                                                                Alias for the data
                                                                                                                                                Local Variables Stored on Stack.
                                                                                                                                                <TypesBasedOnDataType>
                                                                                                                                                        numeric
                                                                                                                                                                int
                                                                                                                                                                float
                                                                                                                                                        Char
                                                                                                                                                                alphabets
                                                                                                                                                                Digits(0-9) ASCII from 46 to 56? thus '2'!=2 in memory representation.
                                                                                                                                                                Special symbols
                                                                                                                                                        <Arrays>
                                                                                                                                                                pre-requisite: knowledge of looping
                                                                                                                                                                <Idea>
                                                                                                                                                                when we need a lot of variables to store a similar and related information- 
                                                                                                                                                                        like 60 data elements to store marks of students in class.
                                                                                                                                                                        !Y Imagine 1000 students names and details through scanf and 1000 independent memory locations taken and alias decided.
                                                                                                                                                                                No of times we need to write scanf to input data into individual data elements
                                                                                                                                                                                can't use loop to automate input process of similar instructions and can't generalize address of storage for every iteration.
                                                                                                                                                                                This is a headache for programmer.
                                                                                                                                                                        VS Let's keep 1000 data location (of data type size) reserved
                                                                                                                                                                                remember 1 location the starting address of such array with an alias
                                                                                                                                                                                refer to any data member through its index/subscript/offset- distance from start s.t. at index 0 sits 1st data element, k sits k+1 and n-1 sits n. All are exhausted.
                                                                                                                                                                                        To refer to 1000th from array will be segmentation fault- OS doesn't allow you to mess with memory beyond your scope.
                                                                                                                                                                                        address of any data element, a[k] = base_address(a)+sizeof(data_type_of_a)*k, we talking about (k+1)th element
                                                                                                                                                                </Idea>
                                                                                                                                                                <NumberArrays>
                                                                                                                                                                        data_type array_Name [size]	//square brackets compulsory.																								
                                                                                                                                                                                size should be constant- can be assigned through MACRO.
                                                                                                                                                                                        size can't be an expression or local variable- as their value can't be ascertain before execution for compiler to ask for required space.
                                                                                                                                                                                        accessing beyond bound gives error.
                                                                                                                                                                        Access any element is easy- assign value to all of them though a loop which runs from index location 0 thru n-1.
                                                                                                                                                                        <StoringValuesInArrays>
                                                                                                                                                                                Initialize the array
                                                                                                                                                                                        data_type array_name[size] = {value1,value2,..}
                                                                                                                                                                                                size is optional
                                                                                                                                                                                                All values comma separated go into the array in sequence so index 0 has value1 and 1 has value2 so forth
                                                                                                                                                                                                        and if size > no of data values then remainder data elements get value 0
                                                                                                                                                                                Assignment values to individual elements
                                                                                                                                                                                        array is not first class object- meaning can't be assigned as lvalue being a constant (address).
                                                                                                                                                                                        marks[3]=100;	//4th element gets the value.
                                                                                                                                                                                            it means lvalue of *(marks+3)- lvalue goes with the address of memory location- to be stored at the address.
                                                                                                                                                                                        I/P values from User
                                                                                                                                                                                            Use loop to get index variable to vary from 0 to n-1 and access all the data locations though that.
                                                                                                                                                                        </StoringValuesInArrays>
                                                                                                                                                                        <InterFunctionCommunication>
                                                                                                                                                                                Passing individual elements
                                                                                                                                                                                        by values
                                                                                                                                                                                                eg- fn(a[3]);
                                                                                                                                                                                        by address
                                                                                                                                                                                                eg- fn(&a[3]);
                                                                                                                                                                                Passing entire array
                                                                                                                                                                                        Array name represents the address of 1st data element. that is being passed as a pointer.
                                                                                                                                                                                                eg- fn(a);
                                                                                                                                                                                                        fn defn for this will look sth like- void fn( int *a) or fn(int a[]);
                                                                                                                                                                                                if you don't want array to change in the process- declare a constant array with const modifier.
                                                                                                                                                                        </InterFunctionCommunication>
                                                                                                                                                                        <DifferentOperations>
                                                                                                                                                                                Traversal- may use counting,printing,etc
                                                                                                                                                                                Insertion- 
                                                                                                                                                                                        for unsorted go to the index= current_size of array and store there.
                                                                                                                                                                                        for sorted, find the location of insertion, move all elements to the right starting from rightmost to avoid data loss
                                                                                                                                                                                                fill thus emptied location.
                                                                                                                                                                                Deletion
                                                                                                                                                                                        from last, just reduce the current_size of array- other elements just contain garbage and are not of relevance.
                                                                                                                                                                                        from middle, we shift all the element on the right to shift left one by one starting from the left.
                                                                                                                                                                                <Merge>
                                                                                                                                                                                        2 unsorted arrays- just take current_size of one in which we are going to merge.
                                                                                                                                                                                                and start storing all elements of array2 using index2 in loop until current_size2 is exhausted.
                                                                                                                                                                                                just make sure the size is sufficient with array1 else define a new array.
                                                                                                                                                                                        for sorted arrays
                                                                                                                                                                                                while(i< M && j< N )
                                                                                                                                                                                                {
                                                                                                                                                                                                        if(a1[i] < a2[j])
                                                                                                                                                                                                                a3[k++] = a1[i++];
                                                                                                                                                                                                        else
                                                                                                                                                                                                                a3[k++] = a2[j++];
                                                                                                                                                                                                }
                                                                                                                                                                                                if(i==M)
                                                                                                                                                                                                        while(j< N)
                                                                                                                                                                                                                a3[k++] = a2[j++];
                                                                                                                                                                                                else if( j==N)
                                                                                                                                                                                                        while(i< M)
                                                                                                                                                                                                                a3[k++] = a1[i++];
                                                                                                                                                                                </Merge>
                                                                                                                                                                                <Searching>
                                                                                                                                                                                        <Linear>																									
                                                                                                                                                                                                for(i=0;i< N;i++)
                                                                                                                                                                                                {
                                                                                                                                                                                                        if(a[i] == k)
                                                                                                                                                                                                                //do something
                                                                                                                                                                                                }
                                                                                                                                                                                        </Linear>
                                                                                                                                                                                        <Binary>
                                                                                                                                                                                                like searching in telephone directory or dictionary without indices.
                                                                                                                                                                                                problem space reduced to half every iteration.
                                                                                                                                                                                                while(beg <= end)
                                                                                                                                                                                                {
                                                                                                                                                                                                        mid = (beg + end)/2;
                                                                                                                                                                                                        if(arr[mid] == k)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                //print found
                                                                                                                                                                                                                found = 1;
                                                                                                                                                                                                                break;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if(arr[mid] > num)
                                                                                                                                                                                                                end = mid - 1;
                                                                                                                                                                                                        else
                                                                                                                                                                                                                beg = mid + 1;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (found ==0 && beg > end) //print not found
                                                                                                                                                                                        </Binary>
                                                                                                                                                                                </Searching>																						
                                                                                                                                                                                <Sorting>
                                                                                                                                                                                        <BubbleSort>
                                                                                                                                                                                                smallest number bubbles to the front or bigger numbers bubble towards other end thru the process
                                                                                                                                                                                                for(i=0;i< n;i++)																									
                                                                                                                                                                                                        for(j=0;j< n-i-1;j++)
                                                                                                                                                                                                                if(arr[j]>arr[j+1])
                                                                                                                                                                                                                        swap(arr[i],arr[j]);
                                                                                                                                                                                        </BubbleSort>
                                                                                                                                                                                        <SelectionSort>
                                                                                                                                                                                                simplicity and advantageous in certain situations
                                                                                                                                                                                                inefficient for larger data sets.
                                                                                                                                                                                                find position of smallest value and swap it with first element then go for 2nd smallest and smap with 2nd element and so on.
                                                                                                                                                                                                for(i=0;i< n;i++)
                                                                                                                                                                                                        for(j=0;j< n;j++)
                                                                                                                                                                                                                if(a[i]>a[j])
                                                                                                                                                                                                                        swap(a[i],a[j]);
                                                                                                                                                                                                OR
                                                                                                                                                                                                selection_sort(int arr[],int n)
                                                                                                                                                                                                {
                                                                                                                                                                                                        for(k=0;k< n;k++)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                pos = smallest(arr,k,n);
                                                                                                                                                                                                                swap(arr[k],arr[pos]);
                                                                                                                                                                                                        }
                                                                                                                                                                                                }
                                                                                                                                                                                                smallest(int arr[],int k,int n)
                                                                                                                                                                                                {
                                                                                                                                                                                                        pos=k;small=arr[k];
                                                                                                                                                                                                        for(i=k+1;i< n;i++)
                                                                                                                                                                                                                if(arr[i]< small)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        pos=i;
                                                                                                                                                                                                                        small=a[i];
                                                                                                                                                                                                                }
                                                                                                                                                                                                }
                                                                                                                                                                                        </SelectionSort>
                                                                                                                                                                                        <InsertionSort>
                                                                                                                                                                                                works like sorting in playing cards.pass 1 element thru alreay arranged set until it finds its right place.
                                                                                                                                                                                                easy to implement
                                                                                                                                                                                                efficiency > other 2 before.
                                                                                                                                                                                                requires lesser memory.
                                                                                                                                                                                                Best works when working on already sorted data.
                                                                                                                                                                                                for(i=1;i< n;i++)
                                                                                                                                                                                                {
                                                                                                                                                                                                        temp=arr[i];
                                                                                                                                                                                                        j=i-1;
                                                                                                                                                                                                        while(j>=0 && temp< arr[j])	// no segmentation fault as for j=-1, the 1st check failure will ignore 2nd relational expression
                                                                                                                                                                                                        {
                                                                                                                                                                                                                arr[j++] = arr[j];	//keep moving array elements to the right with every check 
                                                                                                                                                                                                                j--;			//rather than at last using another loop to shift no to right until space is vacated for desired location.
                                                                                                                                                                                                        }
                                                                                                                                                                                                        arr[j++] = temp;
                                                                                                                                                                                                }
                                                                                                                                                                                        </InsertionSort>
                                                                                                                                                                                        <BucketSort>
                                                                                                                                                                                                aka Radix Sort
                                                                                                                                                                                                Place numbers into buckets as per their radix. No comparisons- so best time complexity- O(n) but takes a lot of space.
                                                                                                                                                                                                then sort all numbers based on 1's digits.
                                                                                                                                                                                                repeat for 10's digit and sort on 10's digit. OR like for dictionary we keep 26 buckets and sort on 1st letter and then 2nd letter and so forth.
                                                                                                                                                                                                //Decide no of passes which will be no of digits in largest number
                                                                                                                                                                                                large =  largest(arr,n);
                                                                                                                                                                                                while(large>0)
                                                                                                                                                                                                {
                                                                                                                                                                                                        NOP++;
                                                                                                                                                                                                        large/=10;
                                                                                                                                                                                                }

                                                                                                                                                                                                //initialize buckets for every pass
                                                                                                                                                                                                divisor = 1;	// set to extract the unit digit to start with.
                                                                                                                                                                                                for(pass=0;pass< NOP;pass++)
                                                                                                                                                                                                {
                                                                                                                                                                                                        for(i=0;i< 10;i++)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                bucket_count[i]=0;	//resetting all buckets for fresh iteration.
                                                                                                                                                                                                                for(i=0;i< n;i++)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        rem = (arr[i]/divisor)%10;	//extract specific digit. depending on cycle no.
                                                                                                                                                                                                                        bucket[rem][bucket_count[rem]++]=arr[i];
                                                                                                                                                                                                                }
                                                                                                                                                                                                                //rewriting the numbers in updated sequence
                                                                                                                                                                                                                i=0;
                                                                                                                                                                                                                for(k=0;k<10;k++)
                                                                                                                                                                                                                        for(j=0;j< bucket_count[k];j++)
                                                                                                                                                                                                                                arr[i++] = bucket[k][j];
                                                                                                                                                                                                                divisor*=10;	// for next iteration we will extract the next more significant digit.
                                                                                                                                                                                                        }
                                                                                                                                                                                                }
                                                                                                                                                                                        </BucketSort>
                                                                                                                                                                                        <ShellSort>
                                                                                                                                                                                                Generalization of insertion sort.
                                                                                                                                                                                                moves smaller items by taking grant steps to final pos.
                                                                                                                                                                                                gap_size =  n;
                                                                                                                                                                                                while(gap_size>1)
                                                                                                                                                                                                {
                                                                                                                                                                                                        gap_size = (gap_size + 1)/2;
                                                                                                                                                                                                        for(i = 0 ; i < n - gap_size ; i++ )
                                                                                                                                                                                                                if(arr[i+gap_size] < arr[i])
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        temp = arr[i+gap_size];
                                                                                                                                                                                                                        arr[i+gap_size] = arr[i];
                                                                                                                                                                                                                        arr[i] = temp;
                                                                                                                                                                                                                }
                                                                                                                                                                                                }
                                                                                                                                                                                        </ShellSort>
                                                                                                                                                                                        <MergeSort>
                                                                                                                                                                                                merge_sort(int arr[],int beg,int end)
                                                                                                                                                                                                {
                                                                                                                                                                                                        int mid;
                                                                                                                                                                                                        if(beg< end)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                mid=(beg+end)/2;
                                                                                                                                                                                                                merge_sort(arr,beg,mid);	//extended to sort half part //no instruction b4 so reach to the end with smaller array till last and then build up.
                                                                                                                                                                                                                merge_sort(arr,mid+1,end);
                                                                                                                                                                                                                merge(arr,beg,mid,end);		//combine 2 sorted arrays
                                                                                                                                                                                                        }																										
                                                                                                                                                                                                }
                                                                                                                                                                                                merge routine done b4.
                                                                                                                                                                                        </MergeSort>
                                                                                                                                                                                        <QuickSort>
                                                                                                                                                                                                quick_sort(int a[],int beg,int end)
                                                                                                                                                                                                {
                                                                                                                                                                                                        int loc;
                                                                                                                                                                                                        if(beg < end)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                loc = partition( a, beg,end);	//partion the array a from beg to end index and return the index on which left and right sections exist.
                                                                                                                                                                                                                quick_sort(a,beg,loc-1);	// loc has found its right position, now we repeat the process for left side of the array
                                                                                                                                                                                                                quick_sort(a,loc+1,end);	//solve the right side of subproblem
                                                                                                                                                                                                        }
                                                                                                                                                                                                }
                                                                                                                                                                                                partition(int a[],int beg,int end)	//beg and end are indices																									
                                                                                                                                                                                                {
                                                                                                                                                                                                        int x = a[beg],i=beg,j=end;	//leftmost taken as pivot. counters initiated from i and j to trace from left and right resp.
                                                                                                                                                                                                        while(i >= j)
                                                                                                                                                                                                        {																											
                                                                                                                                                                                                                while(a[i] <= x && i < end)	//find 1st number from left that exceeds pivot.
                                                                                                                                                                                                                        i++;
                                                                                                                                                                                                                while(a[j] >= x && j > beg)	//don't disturb equal values as it doesn't matter which side they remain- ultimately they will sit to leftmost of right side of array.
                                                                                                                                                                                                                        j--;
                                                                                                                                                                                                                if(i < j)	//if they have crossed each other means we are done.
                                                                                                                                                                                                                        swap(a[i],a[j]);		//swap the elements so that i and j can continue hunting for greater and smaller number than pivot respectively assuming that all number crossed meet the requirement. Pivot remains same as x.	
                                                                                                                                                                                                        }
                                                                                                                                                                                                        return j;	//the partition point- could well have been i or any number between them because- we know for certain that all number from j+1 to end are greater than pivot AND numbers from beg to i-1 are smaller than pivot.
                                                                                                                                                                                                }
                                                                                                                                                                                        </QuickSort>
                                                                                                                                                                                </Sorting>
                                                                                                                                                                        </DifferentOperations>
                                                                                                                                                                        <TwoDimensionalArray>
                                                                                                                                                                        2D Array- Stored data not linear but in form of table (conceptually)- idea of 1-D extended.
                                                                                                                                                                                we want array of 1-D array so as to conceive of it as a table- so we will need 2 subscripts
                                                                                                                                                                                <Declaration>
                                                                                                                                                                                        data_type array_name[rows][cols];
                                                                                                                                                                                                eg- int marks[5][10];	it is like say [5]array of temp[10] and call that marks. OR like saying int[10] marks[5];
                                                                                                                                                                                                the storage is linear- in row major format- a[0][0] then a[0][1] and so forth.
                                                                                                                                                                                                        address of any data element= base_address(a)+r*rows*sizeof(data_type)+c*sizeof(data_type)
                                                                                                                                                                                                        a[0],a[1],a[2] represnt addresses of 1-D array whose array we have in here. 1 row is 1 array.
                                                                                                                                                                                                                REL if a in a[i] represented the base address ~ a[i] in a[i][j] represents base address for the array.
                                                                                                                                                                                        Initialization-
                                                                                                                                                                                                arr[][5]={{1,2,3,4,5},{2,3},{1,2,3}};
                                                                                                                                                                                                        //rows no can remain unspecified because compiler can count that.
                                                                                                                                                                                        Accessing or assignment
                                                                                                                                                                                                nested for loop
                                                                                                                                                                                                        for(i=0;i< rows;i++)
                                                                                                                                                                                                                for(j=0;j< cols;j++)
                                                                                                                                                                                                                        scanf("%d",a[i][j]);
                                                                                                                                                                                                arr[1][0] = 35;		//*(*(arr+1)+2) arr+1 makes it increment by size of a row- no of cols * size of data_type of 1 unit. so the address of the row of 2D array
                                                                                                                                                                                                                        //dereference- change the reference of array/ ptr from array of 1D array to array of int's or so. and now +2 makes it increment by 2 units of size of data_type in every column, still the address of desired location
                                                                                                                                                                                                                        dereferencing again  makes the data in the cell available.
                                                                                                                                                                                                                        Here since we are using lvalue- left hand side- the address of the variable is used to say- store at this memory address- so address given by &of this- is where storage is done.
                                                                                                                                                                                </Declaration>
                                                                                                                                                                                <Operations>
                                                                                                                                                                                        Transpose
                                                                                                                                                                                                a[i][j]=b[j][i];
                                                                                                                                                                                        Sum/Difference
                                                                                                                                                                                        Product
                                                                                                                                                                                                for(i=0;i< M;i++)
                                                                                                                                                                                                        for(j=0;j< N;j++)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                prod[i][j]=0;
                                                                                                                                                                                                                for(k=0;k< N;k++)
                                                                                                                                                                                                                        prod[i][j]+= a[i][k]*b[k][j];
                                                                                                                                                                                                        }
                                                                                                                                                                                </Operations>
                                                                                                                                                                                <InterFunctionCommunication>
                                                                                                                                                                                        Pass individual elements
                                                                                                                                                                                                by value- fn(a[3][2]);
                                                                                                                                                                                                by address-  fn(&a[2][1]);
                                                                                                                                                                                        Pass a row
                                                                                                                                                                                                eg- fn (arr[2]); received by fn definition void fn(int *a) or fn(int a[]);// base address of 1-D is being passed.
                                                                                                                                                                                        Pass entire 2D array
                                                                                                                                                                                                eg- fn(arr); received as fn(int **a) or fn( int *a[]) or fn(int a[][])
                                                                                                                                                                                </InterFunctionCommunication>
                                                                                                                                                                        </TwoDimensionalArray>
                                                                                                                                                                        Multi-dimensional array
                                                                                                                                                                </NumberArrays>
                                                                                                                                                                <Strings>
                                                                                                                                                                Strings- working with character array
                                                                                                                                                                        widely used for word processing- insert,update,delete, replacing a pattern in text.
                                                                                                                                                                        Prob- Array declared for a fixed size and strings have variable length ( names of people)
                                                                                                                                                                                soln- keep length for all arrays- cumbersome.
                                                                                                                                                                                soln- keep a delimiter which can't be in a string.
                                                                                                                                                                                        NULL or ascii 0 ('\0') is taken as string stopper- this is not C syntax just a practice- can be sth else also. but string fn's won't be supported.
                                                                                                                                                                                        So, to store word of size k, we will need array of size at least k+1, 1 for NULL.
                                                                                                                                                                        <Declaration>
                                                                                                                                                                                char str[] = {'K','r','s','n','a','\0'};	//never forget to terminate the string else garbage will be read until end of array- 
                                                                                                                                                                                        char str[10] = {'K','r','s','n','a'};		?//if we have given size of array, not a prob here because remaining elements anyway get 0 or NULL.
                                                                                                                                                                                        char str[] = {'K','r','s','n','a'};		?//this may not work because arraysize is determined by no of chars in declaration.
                                                                                                                                                                                char str[] = "Krsna";		//such assignment automatically appends '\0' to the end of string so not a prob.
                                                                                                                                                                                        char str[5] = "Krsna";	//this is a problem and you know why. A string constant is defined and it is given str allias? Are the remaining elements truncated and physical all transfer or just allias str gets the address value of string constant?
                                                                                                                                                                                        char str[3] = "Krsna";	//consider all the mischief we can do but if you know internal working- it's a cake walk.
                                                                                                                                                                                        str = "Krsna"; or str[3] = "Krsna";	// this can't be done anywhere other than declaration like arrays.																							
                                                                                                                                                                        </Declaration>
                                                                                                                                                                        <ReadingStrings>
                                                                                                                                                                                Reading character-
                                                                                                                                                                                scanf("%s",&str);	// scanf stops when space or tab or newline is encountered.
                                                                                                                                                                                gets(str);	//needs starting address from which to start writing into.
                                                                                                                                                                                        //pitfalls- using uninitialized pointer str- because str contains garbage and OS can't allow writing into any address.
                                                                                                                                                                                strcpy(str,"Krsna");	//such "assignments" needs functions declared in string.h and string.o is automatically included in compilation.
                                                                                                                                                                                <CharacterOperations>
                                                                                                                                                                                        ?getch- waits for keypress and immediately returns control to next instruction
                                                                                                                                                                                        ?getche- same as getch but echoes the output on screen.
                                                                                                                                                                                        ?getchar()- waits for cariage return (enter key).																									
                                                                                                                                                                                        getchar(ch);	//reads a character into ch memory location. PITFALL- after reading thru scanf("%d",c) the index refered to is a space or newline- so unexpected character can come- so do gets() or scanf(" "); to take care of that.
                                                                                                                                                                                                Used to read any number of inputs
                                                                                                                                                                                                        Code- to read any number of input in characters and Look into it later- this is just copy pasted.
                                                                                                                                                                                                                k=0;		//ints no for every case study
                                                                                                                                                                                                                ch = getchar();
                                                                                                                                                                                                                                                        //reading num as char, subtract by 46
                                                                                                                                                                                                                while( ch == '\n' || ch == ' ' )	//get to relevant char for every case
                                                                                                                                                                                                                        ch = getchar();

                                                                                                                                                                                                                while(ch!='\n' && ch!=EOF)		//till end of a case
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        c[0]=ch;
                                                                                                                                                                                                                        j=1;	//index for char array						//place them right			
                                                                                                                                                                                                                        while( ch!=' ' && ch!='\n' && ch!=EOF)
                                                                                                                                                                                                                        {

                                                                                                                                                                                                                                c[j++]=ch;
                                                                                                                                                                                                                                ch=getchar();												
                                                                                                                                                                                                                        }					//first no read
                                                                                                                                                                                                                        c[j]='\0';									//string means terminate them
                                                                                                                                                                                                                        //puts(c);
                                                                                                                                                                                                                        a[k++]=atoi(c);		//k for no of elements of ints
                                                                                                                                                                                                                        printf("A-%d ",a[k-1]);
                                                                                                                                                                                                                        while( ch == '\n' || ch == ' ' || ch == EOF )	//get to next relevant char
                                                                                                                                                                                                                                ch = getchar();
                                                                                                                                                                                                                }
                                                                                                                                                                                                                //putchar(ch);
                                                                                                                                                                                                                arrLength=k;
                                                                                                                                                                                                                for(j=0;j< arrLength;j++)
                                                                                                                                                                                                                        printf("%d ",a[j]);
                                                                                                                                                                                                Used to read large integer numbers- like adding ~1000digit input numbers
                                                                                                                                                                                                        Code- using getchar
                                                                                                                                                                                                        //TODO-
                                                                                                                                                                                                        Code- using scanf("%1d",&a[i]);	//this will work but need a delimited to stop the reading process. can't be ' ' or '\n' or '-1'.only 1-9 digits which is not possible.
                                                                                                                                                                                                using getchar to transfer data element from 1 array to another- to remember to append '\0' to destination string.
                                                                                                                                                                                </CharacterOperations>
                                                                                                                                                                                        <Scanf>
                                                                                                                                                                                                Suppress inputs
                                                                                                                                                                                                        scanf("%d*c%d",&hr,&min);
                                                                                                                                                                                                        using scanset- what to read and what not- 
                                                                                                                                                                                                                scanf("%[aeiou]",str);	//only vowels accepted.
                                                                                                                                                                                                                        whitespaces accepted if part of scanset.
                                                                                                                                                                                                                        width field still holds
                                                                                                                                                                                                                scanf("[a-z]",str);
                                                                                                                                                                                                                        if hyphen is required to be read- make it first or last character.
                                                                                                                                                                                                                scanf("[^aeiou]",str);	//only consonents accepted.
                                                                                                                                                                                                                        if caret is required to be read, it should not be first character.
                                                                                                                                                                                                sscanf
                                                                                                                                                                                                        string from which to read i/p and not from keyboard( standard input)
                                                                                                                                                                                                                eg- sscanf(str,"%d",&num);
                                                                                                                                                                                        </Scanf>
                                                                                                                                                                        </ReadingStrings>
                                                                                                                                                                        <WritingOutputs>
                                                                                                                                                                                printf("%20.15s",str);
                                                                                                                                                                                        width- 20 here. no of characters to print- helps present like a table.
                                                                                                                                                                                        precision- 15 here- maximum no of char to write.
                                                                                                                                                                                puts- get start address & write all chars till '\0'. Then takes console to newline.
                                                                                                                                                                                putchar- while(str[i]) putchar(str[i++]);	//Logical error of incrementing i in while loop!! Loop functions as long as NULL doesn't come across.
                                                                                                                                                                                sprintf(char *buffer,const char *,variable comma separated);	//to write into buffer or memeory area not screen.
                                                                                                                                                                                        eg- char buf[100];
                                                                                                                                                                                                sprintf(buf,"num = %d",10);
                                                                                                                                                                                Working of prints
                                                                                                                                                                                        int printf( const char * fmt, ... ) 
                                                                                                                                                                                        {
                                                                                                                                                                                            int d;  /* Used to store any int arguments. */
                                                                                                                                                                                            va_list args;  /* Used as a pointer to the next variable argument. */

                                                                                                                                                                                            va_start( args, fmt );  /* Initialize the pointer to arguments. */
                                                                                                                                                                                            while (*fmt) {
                                                                                                                                                                                                if ('%' == *fmt){
                                                                                                                                                                                                    fmt ++;
                                                                                                                                                                                                    switch (*fmt){
                                                                                                                                                                                                         case 'd':  /* Format string says 'd'. */
                                                                                                                                                                                                                    /* ASSUME there is an integer at the args pointer. */
                                                                                                                                                                                                             d = va_arg( args, int);
                                                                                                                                                                                                             /* Print the integer stored in d... */
                                                                                                                                                                                                             break;
                                                                                                                                                                                                     }
                                                                                                                                                                                                }
                                                                                                                                                                                                else 
                                                                                                                                                                                                   /* Not a format character, copy it to output. */
                                                                                                                                                                                                fmt++;
                                                                                                                                                                                            }
                                                                                                                                                                                            va_end( args );
                                                                                                                                                                                        }
                                                                                                                                                                        </WritingOutputs>
                                                                                                                                                                        <StringOperations>
                                                                                                                                                                                char manipulation as int- finding ascii of A- int i='A'; printf("%d",i);
                                                                                                                                                                                Length- strlen(str);	//counts from the data value of str (address)- till '\0' is encountered- excluded.
                                                                                                                                                                                Convert cases of strings
                                                                                                                                                                                        while( str[i] != 0)	//Zero or NULL- comparison is not with '0' but all zero bits. Typeconversion done
                                                                                                                                                                                                if(str[i]>'a' && str[i]< 'z')
                                                                                                                                                                                                        str[i] += 32;
                                                                                                                                                                                Concatenate
                                                                                                                                                                                        concat(str1,str2);
                                                                                                                                                                                        start adding from len1 until len2 is exhausted- till '\0'																									
                                                                                                                                                                                Append
                                                                                                                                                                                Compare
                                                                                                                                                                                        while(str1[i] == str2[i])
                                                                                                                                                                                        {
                                                                                                                                                                                                if(str1[i]=='\0' || str2[i] == '\0')																										
                                                                                                                                                                                                        return (str1[i]-str2[i]);
                                                                                                                                                                                                i++;
                                                                                                                                                                                        }
                                                                                                                                                                                        return (str1[i]-str2[i]);
                                                                                                                                                                                Reversing String
                                                                                                                                                                                        find length
                                                                                                                                                                                        i = 0;
                                                                                                                                                                                        while(i< len/2)
                                                                                                                                                                                                swap(str[i],str[len-i+1]);
                                                                                                                                                                                Extract substring from beginning/ middle 	//TODO
                                                                                                                                                                                Insert a text at given location of string	//TODO
                                                                                                                                                                                Indexing - find str location in text ~ corollary, find all indices in text
                                                                                                                                                                                        max = strlen(text) - strlen(str) + 1;	//figure out till which index in text we have to go
                                                                                                                                                                                        while(i <= max)				//traverse thru the text till end 1 by 1 and check for match with str from that i.
                                                                                                                                                                                        {
                                                                                                                                                                                                //flag = 1;
                                                                                                                                                                                                for(k=0;k< strlen(str);k++)
                                                                                                                                                                                                {
                                                                                                                                                                                                        if( str[k] != text[i+k] )	//we need to do it with i+k so that i remains same else we may miss out 1 string- say  "hello" in "hkhello"
                                                                                                                                                                                                        {
                                                                                                                                                                                                                i++;
                                                                                                                                                                                                                flag = 0;
                                                                                                                                                                                                                break;
                                                                                                                                                                                                        }																											
                                                                                                                                                                                                }
                                                                                                                                                                                                if(k == strlen(str))	// or check on flag!! meaning that whole string was traversed for index i on equality. we have got our index.
                                                                                                                                                                                                {
                                                                                                                                                                                                        flag = 1;
                                                                                                                                                                                                        index = i;
                                                                                                                                                                                                        break;
                                                                                                                                                                                                }																										
                                                                                                                                                                                        }
                                                                                                                                                                                        if(flag == 1)
                                                                                                                                                                                                printf("%d",index);
                                                                                                                                                                                Deletion- delete str from text- we use copy_loop index to copy character into array new_text at n and generally, they increment together.
                                                                                                                                                                                        for(i=0; text[i];i++)	//we can go with max as in prev eg
                                                                                                                                                                                        {
                                                                                                                                                                                                j = 0;
                                                                                                                                                                                                k = i;
                                                                                                                                                                                                while( text[k] == str[j] && str[j] != '\0')	//look if match exists at i.
                                                                                                                                                                                                {
                                                                                                                                                                                                        k++;
                                                                                                                                                                                                        j++;
                                                                                                                                                                                                }
                                                                                                                                                                                                if(str[j] == 0)		//strings matched at the i.																										
                                                                                                                                                                                                        copy_loop = k;	//update the value of copy_loop.
                                                                                                                                                                                                new_text[n++] = text[copy_loop++];
                                                                                                                                                                                        }
                                                                                                                                                                                Replacement- 
                                                                                                                                                                                        1. pos = index(text,str);
                                                                                                                                                                                        2. set text = delete(text,pos,length(str));
                                                                                                                                                                                        3. insert (text,pos,str);
                                                                                                                                                                                        for(i=0;text[i];i++)
                                                                                                                                                                                        {
                                                                                                                                                                                                j = 0;
                                                                                                                                                                                                k = i;
                                                                                                                                                                                                while(text[k] == str[j] && str[j])
                                                                                                                                                                                                {
                                                                                                                                                                                                        k++;
                                                                                                                                                                                                        j++;
                                                                                                                                                                                                }
                                                                                                                                                                                                if(str[j] == '\0')
                                                                                                                                                                                                {
                                                                                                                                                                                                        copy_loop = k;		//next index in new_str to write at after string copy.
                                                                                                                                                                                                        while(rep_pattern[rep_index])
                                                                                                                                                                                                                new_str[n++] = rep_pattern[rep_index++];
                                                                                                                                                                                                        rep_index = 0;	//for match in some next iteration																											
                                                                                                                                                                                                }
                                                                                                                                                                                                else
                                                                                                                                                                                                        new_str[n++] = str[copy_loop++];
                                                                                                                                                                                                new_str[i] = '\0';
                                                                                                                                                                                                puts(new_str);
                                                                                                                                                                                        }																								
                                                                                                                                                                        </StringOperations>
                                                                                                                                                                        <CharacterManipulationFunction>
                                                                                                                                                                        Character Manipulation Fn and string fn
                                                                                                                                                                                Character manipulation
                                                                                                                                                                                        isalnum(int c);	//alphanumeric character
                                                                                                                                                                                        isalpha(..)
                                                                                                                                                                                        iscntrl- control character
                                                                                                                                                                                        isdigit
                                                                                                                                                                                        isgraph
                                                                                                                                                                                        islower
                                                                                                                                                                                        ispunct
                                                                                                                                                                                        isspace
                                                                                                                                                                                        isxdigit- hexadecimal digit
                                                                                                                                                                                        toupper(int c);
                                                                                                                                                                                        tolower(..)
                                                                                                                                                                                String fn
                                                                                                                                                                                        strlen
                                                                                                                                                                                        strcmp
                                                                                                                                                                                        strcat
                                                                                                                                                                                        strcpy
                                                                                                                                                                                                //make sure pointers are initialized.
                                                                                                                                                                        </CharacterManipulationFunction>
                                                                                                                                                                        <PointersAndStrings>
                                                                                                                                                                                char str[]= "Krsna";
                                                                                                                                                                                char *pstr = str; === char *pstr; pstr = str = "Krsna";
                                                                                                                                                                                while(*pstr){printf("%c",*pstr);pstr++;}	//here original pstr is lost so puts(pstr) will be folly. So, assign to another ptr b4 start.
                                                                                                                                                                                puts(pstr);	//just wants address to start printing from until NULL. eg- puts(&s[5]); make sure pstr still holds the start of array address and not garbage or changed value due to pointer operations.
                                                                                                                                                                                                ~make sure gets(pstr);	// pstr is initialized pointer- else write into [garbage] address is segmentation fault.
                                                                                                                                                                                so, char str[100];char *ptr=str; gets(ptr);
                                                                                                                                                                        </PointersAndStrings>
                                                                                                                                                                </Strings>
                                                                                                                                                        </Arrays>
                                                                                                                                                        <Pointers>
                                                                                                                                                        Pointers- Holds the address of a memory location
                                                                                                                                                                <Properties>
                                                                                                                                                                        can't be hardcoded
                                                                                                                                                                        allows pointer operations
                                                                                                                                                                                can't multiply or divide a pointer var
                                                                                                                                                                                addition with pointer increment the pointer in units of data_type it points to.
                                                                                                                                                                                        int *ptr; ptr++; means 1000 to 1002 if int size is 2 byte for 16 bit machine.
                                                                                                                                                                        //A LOT MORE	//TODO
                                                                                                                                                                </Properties>
                                                                                                                                                                //A lot more //TODO
                                                                                                                                                                <PointersAndFunctions>
                                                                                                                                                                    //TODO
                                                                                                                                                                </PointersAndFunctions>
                                                                                                                                                                <ArraysOfPointers>
                                                                                                                                                                        int arr1[]={1,2,3},arr2[]={12,34,56,78},arr3[]={3,4};
                                                                                                                                                                        eg-
                                                                                                                                                                                int *parr[3] = {arr1,arr2,arr3};	//read as *(parr[3])- array of pointers each pointing to int type.
                                                                                                                                                                                printf("%d",*parr[2]);	//careful while changing pointers. here it will be 3
                                                                                                                                                                                parr[2] is arr3. parr[2]++ will take us to arr3 + 2 (16-bit machine)																							
                                                                                                                                                                        eg- 
                                                                                                                                                                                char *ptr[3]= {"Krishna","Ram","Hari"};	//no wastage of space.
                                                                                                                                                                                puts(ptr[0]);	//Krishna.
                                                                                                                                                                        eg- 
                                                                                                                                                                                Print day of week given day No.
                                                                                                                                                                                        char *day[]={"Monday",...};
                                                                                                                                                                                        int day_num = 5;
                                                                                                                                                                                        if( day_num > 7 && day_num < 1)
                                                                                                                                                                                                puts(day[day_num-1]);
                                                                                                                                                                        int **ptr !=== int mat[5][5];
                                                                                                                                                                                ptr+i= ptr+i*(sizeof(int*))
                                                                                                                                                                                mat+i= mat+i*(sizeof(int)*cols);
                                                                                                                                                                        extended idea- int *parr[5][5];
                                                                                                                                                                </ArraysOfPointers>
                                                                                                                                                                <PointerToArray>
                                                                                                                                                                        int (*arr)[5];	//arr is pointer to an array of 5 elements each of type int.
                                                                                                                                                                                arr+i is arr + sizeof(int)*5*i;
                                                                                                                                                                </PointerToArray>
                                                                                                                                                                <FunctionPointer>
                                                                                                                                                                    GOTO: Function_Pointer
                                                                                                                                                                </FunctionPointer>
                                                                                                                                                                <Precautions>
                                                                                                                                                                        Wild Pointer- forgetting to initializing a pointer and using
                                                                                                                                                                        Keeping track- pointer value is changed and we expect to behave in way of original value- like *str2 = '\0'; the puts(str2) or puts(str2-strlen(str2));
                                                                                                                                                                        Memory Leak- Allocated but not released- means no longer available to anyone.
                                                                                                                                                                                but application continues to consume it unnecessary- means lesser space for other apps.
                                                                                                                                                                                Hence slow speed or crashing of app but resources touch the limit.																								
                                                                                                                                                                        Dangling Pointer-
                                                                                                                                                                                Object is deleted but pointer variable exists and attempt to derefernce it.
                                                                                                                                                                                Dereferences will give wrong results and leads to silent corruption/bugs extremely diffl to find- memory corruption
                                                                                                                                                                                        as sth else comes as sits in the region of deleted object.
                                                                                                                                                                                        very difficult to trace as source is far apart the cause- can't correlate.
                                                                                                                                                                                        eg- char* fn(void)
                                                                                                                                                                                                {
                                                                                                                                                                                                        char ch = 'A';	//ch being variable on stack of fn is gone and lost with the function
                                                                                                                                                                                                        return &ch;	//ch is lost but address lives which is returned so anything eventually will overwrite ch as program doesn't recognize this alias at all or memory loc at all.																										
                                                                                                                                                                                                }
                                                                                                                                                                                        eg-
                                                                                                                                                                                                fn(void)
                                                                                                                                                                                                {
                                                                                                                                                                                                        char *ptr1,*ptr2=malloc(190);
                                                                                                                                                                                                        ptr1 = ptr2;
                                                                                                                                                                                                        free(ptr2);	//object is lost but ptr1 reference remains and can be used later on.																											
                                                                                                                                                                                                }
                                                                                                                                                                                Solution- set the pointers to NULL after use is over.
                                                                                                                                                                        Going beyond allocated memory- buffer overflow.
                                                                                                                                                                        Faulty Deallocation
                                                                                                                                                                        Using unowned memory
                                                                                                                                                                        working with uninitialized pointers.
                                                                                                                                                                </Precautions>                                                                                                                                                                
                                                                                                                                                        </Pointers>
                                                                                                                                                        <Struct>
                                                                                                                                                                <Intro>
                                                                                                                                                                About
                                                                                                                                                                        Entity has i/f related to 1 another
                                                                                                                                                                        storing i/f about entities- records.
                                                                                                                                                                        ~array in storing related data field but struct can store heterogenous data.
                                                                                                                                                                        Collection of variables under one name~ arrays.
                                                                                                                                                                Need
                                                                                                                                                                        In real life we need to store different information/ attributes of 1 object- which are all related.
                                                                                                                                                                        we can have separate array for all of them but the intrisic connection of data is lost. 
                                                                                                                                                                                any deletion or operation- that swaps or updation like sort can mess up whole system.
                                                                                                                                                                </Intro>
                                                                                                                                                                <Declaration>
                                                                                                                                                                        This doesn't allocate memory for structure- only creates the data-type telling compiler the layout in memory for any structure variable of this type.
                                                                                                                                                                        struct struct_name{		//making a user-defined data type
                                                                                                                                                                                data_type var_name;	//member of structure- [structure] memory variable
                                                                                                                                                                                ..
                                                                                                                                                                                ..
                                                                                                                                                                        };	//note the semicolon
                                                                                                                                                                </Declaration>
                                                                                                                                                                <Definition>
                                                                                                                                                                        eg-
                                                                                                                                                                                struct Student{
                                                                                                                                                                                        int rNo;
                                                                                                                                                                                        float fees;
                                                                                                                                                                                        char name[20];
                                                                                                                                                                                };
                                                                                                                                                                                struct Student stud1;	//structure variable name
                                                                                                                                                                                OR club them together in 1-
                                                                                                                                                                                struct Student{
                                                                                                                                                                                        int rNo;
                                                                                                                                                                                        float fees;
                                                                                                                                                                                        char name[20];
                                                                                                                                                                                } stud1;
                                                                                                                                                                        Compiler doesn't have any difficulty in storing or retrieving
                                                                                                                                                                                as it knows the sequence of data elements and number of bytes from structure variable reference address it needs to store anything.
                                                                                                                                                                        eg-
                                                                                                                                                                                struct point,customer,date,book,inventory;
                                                                                                                                                                        TYPEDEF- We can give an alternate name to data type- we can typedef any data type, here we can typedef struct so that we don't have to define structure variable like that.
                                                                                                                                                                                typedef int age;
                                                                                                                                                                                typedef struct STUDINFO{
                                                                                                                                                                                        int rNo;
                                                                                                                                                                                        char name[50];
                                                                                                                                                                                } student;	//structure is typecasted into student
                                                                                                                                                                                student stud1;
                                                                                                                                                                </Definition>
                                                                                                                                                                <Usage>
                                                                                                                                                                        Assignment/Initialize- 
                                                                                                                                                                                struct student s[10] = {{1,"Krishna"},{2,"Hari"}};
                                                                                                                                                                                struct_var are 1st class objects
                                                                                                                                                                                        stud1=stud2;	//valid
                                                                                                                                                                                But can't compare 2 structs directly- we need to compare only components.
                                                                                                                                                                                        if(s1.rNo==s2.rNo)...


                                                                                                                                                                        //TODO
                                                                                                                                                                        Accessing the structure elements
                                                                                                                                                                                using dot operation(.) as struct_variable.struct_member
                                                                                                                                                                                        has highest priority- .,->,(),[]- so stud1.rNo++ === (stud1.rNo)++;
                                                                                                                                                                                eg- 
                                                                                                                                                                                        stud1.rNo= 11;
                                                                                                                                                                                        scanf("%s",stud1.name);	
                                                                                                                                                                        Comparison- But can't compare 2 structs directly- we need to compare only components.
                                                                                                                                                                                        if(s1.rNo==s2.rNo)...
                                                                                                                                                                        eg- 
                                                                                                                                                                                multiply 2 complex no- c2,c1.
                                                                                                                                                                                mul.x= c1.x*c2.x-c1.y*c2.y;
                                                                                                                                                                                mul.y= c1.x*c2.y+c1.y*c2.x;
                                                                                                                                                                </Usage>
                                                                                                                                                                <NestedStructures>
                                                                                                                                                                        Structure placed within a structure
                                                                                                                                                                                thru its variable inside the struct 
                                                                                                                                                                                declare 1 in other declaration- not recommended though.
                                                                                                                                                                        eg- typedef struct {char first[20]; charlast[20];} NAME;
                                                                                                                                                                                typedef struct {int dd,mm,yy;} date;
                                                                                                                                                                                typedef struct {int rNo;NAME name;date dob;} student;
                                                                                                                                                                                student stud1;
                                                                                                                                                                                        strcpy(stud1.name.first,"Krishna");	

                                                                                                                                                                </NestedStructures>
                                                                                                                                                                <ArrayOfStructures>
                                                                                                                                                                        Idea- same as with arrays- image 1000 students' information to save- 1000 variables- nay, so array.
                                                                                                                                                                        eg- 
                                                                                                                                                                                struct student{
                                                                                                                                                                                        int rNo;
                                                                                                                                                                                        char name[30];
                                                                                                                                                                                }s[10];
                                                                                                                                                                                OR struct student s[10] = {{1,"Krishna"},{2,"Hari"}};
                                                                                                                                                                        while(i< n)
                                                                                                                                                                                scanf("%d",s[i].rNo);																	
                                                                                                                                                                </ArrayOfStructures>
                                                                                                                                                                <StructureAndFunction>
                                                                                                                                                                        Pass by Member
                                                                                                                                                                                eg- display(p1.x,p1.y);
                                                                                                                                                                        Pass Entire structure by value- copies each memeber- but costly
                                                                                                                                                                                eg- POINT p;...
                                                                                                                                                                                        display(p);
                                                                                                                                                                        Pass pointer or address of structure
                                                                                                                                                                                eg-
                                                                                                                                                                                        call by reference
                                                                                                                                                                                        struct student *ptr = &stud1;
                                                                                                                                                                                        (*ptr).rNo === ptr->rNo		//rather than writing left again.
                                                                                                                                                                </StructureAndFunction>
                                                                                                                                                                <SelfReferentialStructures>
                                                                                                                                                                        structure that contains a reference to data of its same type (as structure).
                                                                                                                                                                                it can't be the same structure as its size is and can not be known- for compiler to make a layout
                                                                                                                                                                                we use pointer to the structure- thus, compiler knows the size of pointer to spare for memory layout and its value comes in run-time.
                                                                                                                                                                        eg- struct node{int val;struct node* next;};
                                                                                                                                                                        <LinkedList>
                                                                                                                                                                                Idea-
                                                                                                                                                                                        We waste memory by declaring big array and not using and we sometimes fall short.
                                                                                                                                                                                        with idea of DMA, can we think of dynamically growing our array data element, 
                                                                                                                                                                                                we take the approach of self-referencing structures and add elements thru the refernce 1 by 1.
                                                                                                                                                                                Linear collection of data elements called nodes
                                                                                                                                                                                        each node contains reference to the next node and first one is known thru a variable ptr, say start and last has its reference set to NULL, macro defined in stdio.h
                                                                                                                                                                                        Memory layout- sth like- conceptual- they are scattered across RAM as such.
                                                                                                                                                                                                0 4 2	//Read as address data next_address	//let's say start node is 0.
                                                                                                                                                                                                1 3 3
                                                                                                                                                                                                2 1 1
                                                                                                                                                                                                3 8 N
                                                                                                                                                                                                See diagrams.
                                                                                                                                                                                        Do not try to store such a structure in files or database- because current addresses of next nodes- won't hold in next loading process.
                                                                                                                                                                                Vs Arrays- //TODO- should we discuss this after Linked list implementation code?
                                                                                                                                                                                        Elements are not consecutive- scattered throughout RAM.
                                                                                                                                                                                        No Random Access (only sequential access)- so take more time in retrieving info w/o DS.
                                                                                                                                                                                        No upper limit- to number of nodes (elements)
                                                                                                                                                                                                New node? ask for free space through malloc and fix it.
                                                                                                                                                                                        High efficiency for insertion and deletion- imagine shifting all the element in sorted arrays OR maybe, setting another validity field.
                                                                                                                                                                                                New node? ask for free space through malloc and fix it.	
                                                                                                                                                                                                Deletion- remove referencing and adjust pointers. and free the pointer to avoid memory leakage
                                                                                                                                                                                                        OS returns area to free list pool which is also stored like linked list for its obvious benefits
                                                                                                                                                                                                                collect all cells used by processes & others return to the free pool structure.
                                                                                                                                                                                Types{
                                                                                                                                                                                        Singly{-
                                                                                                                                                                                                struct node *create(struct node *start)		// we may want to pass by pointer /address- if start is going to change in the fn- so double indirection
                                                                                                                                                                                                {
                                                                                                                                                                                                        printf("enter -1 to end");	//assuming -1 is invalid input for the LL.
                                                                                                                                                                                                        scanf("%d",&num);
                                                                                                                                                                                                        while(num != -1)		// sentinel value.
                                                                                                                                                                                                        {
                                                                                                                                                                                                                new_node = (struct node*) malloc( sizeof( struct node*));
                                                                                                                                                                                                                new_node->data = num;
                                                                                                                                                                                                                if(start == NULL)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        new_node->next = NULL;
                                                                                                                                                                                                                        start = new_node;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                else
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        new_next->next = start;	//fix the node at the beginning.
                                                                                                                                                                                                                        start = new_node;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                printf("enter -1 to end");	//assuming -1 is invalid input for the LL.
                                                                                                                                                                                                                scanf("%d",&num);
                                                                                                                                                                                                        }
                                                                                                                                                                                                        return start;		//check for a memory leak or dangling ptr.
                                                                                                                                                                                                }
                                                                                                                                                                                                //insert at the end
                                                                                                                                                                                                        new_node = malloc..
                                                                                                                                                                                                        new_node -> data = num;
                                                                                                                                                                                                        new_node -> next = NULL;
                                                                                                                                                                                                        ptr = start;	//traversal pointer.
                                                                                                                                                                                                        if(ptr == NULL)		//LL not started yet.
                                                                                                                                                                                                                start = new_node;	//pass start by double indirection as start is already a pointer whose value changes.
                                                                                                                                                                                                        //assuming there is at least 1 element in the list.
                                                                                                                                                                                                        while(ptr -> next)	//is not null and until pointer variable ptr holds the address of last node- else we willhave lost the track of LL totally- ptr is just a reference.
                                                                                                                                                                                                                ptr = ptr -> next;
                                                                                                                                                                                                        ptr -> next = new_node;		//start address still holds. use double indirection for start or return start.
                                                                                                                                                                                                //insert before stated value
                                                                                                                                                                                                        while(ptr -> data < val && ptr -> next != NULL)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                preptr = ptr;		//since we want the address of node previous to 1 containing data so that we can change the reference variable's values in there.
                                                                                                                                                                                                                ptr = ptr -> next;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if(..)		//if last node of LL is less than val. inculcate into if condn accordingly.//TODO
                                                                                                                                                                                                        {
                                                                                                                                                                                                                new_node -> next = ptr;		//never keep only traversal reference as lvalue- as changing traversal reference doesn't change the structure
                                                                                                                                                                                                                preptr -> next = new_node;	//mind the sequence- here no problem
                                                                                                                                                                                                        }
                                                                                                                                                                                                //insert after stated value
                                                                                                                                                                                                        //consider case of no element in the LL also.
                                                                                                                                                                                                        while( ptr -> data < val && ptr -> next != NULL)
                                                                                                                                                                                                                ptr = ptr -> next;
                                                                                                                                                                                                        new -> next = ptr->next;	//first make new node qualified to fit in LL- else we will lose our current addresses
                                                                                                                                                                                                        ptr -> next = new;		// adjust LL to accept new node in the family
                                                                                                                                                                                                //delete at beginning
                                                                                                                                                                                                        ptr= start;
                                                                                                                                                                                                        start = start ->next;
                                                                                                                                                                                                        free(ptr);
                                                                                                                                                                                                //delete at end
                                                                                                                                                                                                        //traverse to the end- till last node and second last node is kept
                                                                                                                                                                                                                set second last node's next variable to NULL
                                                                                                                                                                                                                free the memory refered by the last node- else memory leak.	//seq is important- else risk of dangling pointer.
                                                                                                                                                                                                //delete the value node
                                                                                                                                                                                                        //consider all cases- NULL Linked list, LL with 1 element and 1 with many and val not found- val found in middle and last.
                                                                                                                                                                                                                traverse to end with 2 references- previous and 1 with value- so that set preptr->next = ptr -> next; and free(ptr);
                                                                                                                                                                                                //delete after the value node.
                                                                                                                                                                                                        preptr = start, ptr = start -> next;
                                                                                                                                                                                                        while(preptr -> data < val)	// keep reference pointers ahead of the data referred to
                                                                                                                                                                                                        {
                                                                                                                                                                                                                preptr = ptr;
                                                                                                                                                                                                                ptr = ptr -> next;	// else use ptr ->next ->next.
                                                                                                                                                                                                        }
                                                                                                                                                                                                //delete list
                                                                                                                                                                                                        ptr = start;
                                                                                                                                                                                                        while(ptr -> next)
                                                                                                                                                                                                        {
                                                                                                                                                                                                                printf("Confirm");...
                                                                                                                                                                                                                start = delete_beg(ptr);
                                                                                                                                                                                                                ptr = start;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        free(ptr);	//free the last node currently pointed.
                                                                                                                                                                                                //sorting the list	
                                                                                                                                                                                                        //through pointers- //TODO
                                                                                                                                                                                                        swapping the data elements and not the pointers
                                                                                                                                                                                                        exchange sort
                                                                                                                                                                                                                while(ptr1 ->next)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                        ptr2 = ptr1 ->next;
                                                                                                                                                                                                                        while( ptr2 != NULL)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                if(ptr2 -> data < ptr1->data)
                                                                                                                                                                                                                                        swap(ptr1 -> data, ptr2 -> data);
                                                                                                                                                                                                                                ptr2 = ptr2 -> next;																								
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        ptr1 = ptr1 -> next;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                return start;
                                                                                                                                                                                                //Reversing LL- //TODO
                                                                                                                                                                                                Merging 2 sorted LL-
                                                                                                                                                                                                        Done already- check in ubuntu file system. //TODO.
                                                                                                                                                                                        }-Singly
                                                                                                                                                                                        Doubly
                                                                                                                                                                                                3 data members in structure- data, previous pointer and next node pointer.
                                                                                                                                                                                                        prev of 1st node and next of last nodes set to NULL
                                                                                                                                                                                                More space, more costly but searches twice as efficiently.
                                                                                                                                                                                                Use
                                                                                                                                                                                                        Used by OS for task maintenance purposes
                                                                                                                                                                                                                eg- Browsing history- moving to earlier page and next page any time you want.
                                                                                                                                                                                                        ?search for more
                                                                                                                                                                                        Circular
                                                                                                                                                                                                How can you know if a LL is circular?
                                                                                                                                                                                                        traverse through the LL- if at any time- a pointer doesn't become NULL and becomes equal to 1 started with.
                                                                                                                                                                                                Use																					
                                                                                                                                                                                        Circular Doubly
                                                                                                                                                                                                Use
                                                                                                                                                                                        Header
                                                                                                                                                                                                1st node is kept aside for statistical storage.
                                                                                                                                                                                                1st node is called header. and last node can be grounded or circular.
                                                                                                                                                                                }-Types
                                                                                                                                                                                Overflow and Underflow conditions on LL
                                                                                                                                                                                        OVerflow?- can't insert anymore
                                                                                                                                                                                        Underflow?- can't delete.
                                                                                                                                                                        </LinkedList>
                                                                                                                                                                </SelfReferentialStructures>
                                                                                                                                                        </Struct>
                                                                                                                                                        <Union>
                                                                                                                                                        Union- Useful for generic programming
                                                                                                                                                                Collection of different data type variables but memory layout of 1 largest field only and stores the value of 1 of the members.
                                                                                                                                                                        so that chunk of memory can hold different var at diffn times.
                                                                                                                                                                Purpose
                                                                                                                                                                        Save memory
                                                                                                                                                                        we may not have values of all the field- like for some students rNo is not known but their unique names are.
                                                                                                                                                                typedef can be used.
                                                                                                                                                                eg-
                                                                                                                                                                        typedef union point{
                                                                                                                                                                                int x;
                                                                                                                                                                                int y;
                                                                                                                                                                        }POINT;
                                                                                                                                                                        POINT p;
                                                                                                                                                                        p.x=4;
                                                                                                                                                                        p.y=5;
                                                                                                                                                                        printf("%d,%d",p.x,p.y);	//5,5
                                                                                                                                                                Used in Structures- that's when they are useful
                                                                                                                                                                        Enter rNo or Name- not both
                                                                                                                                                                        struct student {
                                                                                                                                                                                int marks;
                                                                                                                                                                                union{
                                                                                                                                                                                        char name[20];
                                                                                                                                                                                        int rNo;
                                                                                                                                                                                };
                                                                                                                                                                                int id_type;
                                                                                                                                                                        }
                                                                                                                                                                        while storing we take as input the type of identity user wants to enter- name or rNo and is stored for structure and retrieved later accordingly																
                                                                                                                                                        </Union>
                                                                                                                                                        <EnumeratedDataTypes>
                                                                                                                                                                user defined type based on standard integer type.
                                                                                                                                                                symbolic name to make program readable- a set of named integer constants
                                                                                                                                                                        //like for return different error codes from a function- than to remember them, it is better to use a name there.
                                                                                                                                                                definition
                                                                                                                                                                        enum enumerator_name{	//enumerator_name becomes new data_type
                                                                                                                                                                                red,blue,black;	//use these constants anywhere- get the values 0,1,2.																																								
                                                                                                                                                                        }
                                                                                                                                                                        //default is 0 to 1st element and 1 incremented fornext and so forth
                                                                                                                                                                                or be explicit and tell the values?
                                                                                                                                                                                may contain duplicate values
                                                                                                                                                                anonymous enum types
                                                                                                                                                                        eg- enum{OFF,ON};	?
                                                                                                                                                                Enum variables
                                                                                                                                                                        enum constants are basically integers so
                                                                                                                                                                                int fore_color = red;
                                                                                                                                                                        declare a variable
                                                                                                                                                                                enum colors bgcolor;	// can merge in declaration also like struct.
                                                                                                                                                                                typedef enum_color color; color foreground = red;
                                                                                                                                                                        Type-Casting
                                                                                                                                                                                enum colors c= black + white;
                                                                                                                                                                                        =2+6;
                                                                                                                                                                                        =8 (error)
                                                                                                                                                                                        // c expects enum type. Either declare c to be int or typcase the result to colors type.
                                                                                                                                                                                eg- enum colors c = (enum colors)2;
                                                                                                                                                                        Comparing enum types
                                                                                                                                                                                They are integer types so can be used as case labels in switch block/statement.
                                                                                                                                                                                bg_color = (enum colors)6;
                                                                                                                                                                                if(bg_color == white)
                                                                                                                                                                                        fore_color = blue;
                                                                                                                                                                        I/O on enumerated types
                                                                                                                                                                                These are derived types so can't be used for i/o fn in c.
                                                                                                                                                                                for read/write as integers- compiler does implicit typeconversion.
                                                                                                                                                                                        eg- enum colors c; 
                                                                                                                                                                                                scanf("%d",&c);
                                                                                                                                                                                        eg-
                                                                                                                                                                                                enum colors{red,blue;black;white};
                                                                                                                                                                                                main()
                                                                                                                                                                                                {
                                                                                                                                                                                                        enum_colors c;
                                                                                                                                                                                                        char *color_name[]= {"red","blue","black","white"};
                                                                                                                                                                                                        for(c=red,c<=white;c++)		//red and white are taken to mean integers constants.
                                                                                                                                                                                                                puts(color_name[c]);
                                                                                                                                                                                                        return 0;
                                                                                                                                                                                                }
                                                                                                                                                        </EnumeratedDataTypes>
                                                                                                                                                </TypesBasedOnDataType>
                                                                                                                                                Usage
                                                                                                                                                        preferably in beginning as data_type name1[,name2[=k]*]*;	//k is constant or variable defined before.
                                                                                                                                                        Apply operations on variables.
                                                                                                                                                        what if data value should come from user and not programmer? goto: I/O statements.																			
                                                                                                                                                <Operations>
                                                                                                                                                        Declaration- Informed compiler about a symbol																					
                                                                                                                                                        Definition- Memory allocated to a variable and garbage or default value used.
                                                                                                                                                                eg- int a;
                                                                                                                                                        Initialization- Memory allocated and given a value to start with.
                                                                                                                                                                int a=5;
                                                                                                                                                        Assignment- Memory already exists just overwriting some value to it.
                                                                                                                                                                a=5;
                                                                                                                                                </Operations>
                                                                                                                                                <TypesBasedOnVisibilityAccessibilityScope>
                                                                                                                                                Types based on scope (visibility and accessibility)
                                                                                                                                                        Block scope- inside statement block  and nearest overrides outsider.
                                                                                                                                                        function scope- visible from beginning to end of function. eg- goto.
                                                                                                                                                            Also called Local Variables.
                                                                                                                                                            Also, Formal parameter- Declared in fn definition but memory assignment on invocation and within fn access.
                                                                                                                                                        file scope- accessible only within file- eg- static int a=6; as global variable.
                                                                                                                                                        program scope- Global variables accessible throughout program (outside of function)
                                                                                                                                                </TypesBasedOnVisibilityAccessibilityScope>
                                                                                                                                                <StorageClass>
                                                                                                                                                Types of variables based on storage class- determines the part of memory where storage space is allocated , with what value and how long- its scope,visibility and lifetime. any linkages.
                                                                                                                                                        Auto- default also. Automatic storage. deleted when block is exited.
                                                                                                                                                                Stored in RAM. Garbage value by default.
                                                                                                                                                        Register- Stored in CPU register not RAM - can't use & as no meaning, no memory.
                                                                                                                                                                quick access to var.
                                                                                                                                                                Only suggests to compiler but no restriction/ obligation on CPU.																						
                                                                                                                                                        Extern
                                                                                                                                                                separate smaller programs shared global data- but can't redefine at another place- it's error.
                                                                                                                                                                so to make sure that such compiler error doesn't come- we use extern to indicate that this is global variable and whose value comes from other program.
                                                                                                                                                                reference resolved at time of linking.
                                                                                                                                                        Static- lifetime of entire program as global or local.
                                                                                                                                                                within a fn- initialized once at runtime. retains values between the calls.
                                                                                                                                                                default is zero.
                                                                                                                                                </StorageClass>
                                                                                                                                                <TypesOfMemoryAllocation>
                                                                                                                                                        <StaticMemoryAllocation>
                                                                                                                                                            Statically allocated memory- compiler knows how much memory to ask for in advance.
                                                                                                                                                        </StaticMemoryAllocation>
                                                                                                                                                        <DynamicMemoryAllocation>
                                                                                                                                                                Dynamically Memory Allocation (DMA)- allocate memory at execution /run-time
                                                                                                                                                                Need?- WE need to define fixed length array- large enough to keep safe side and only 10% used. So, wastage.
                                                                                                                                                                <How>
                                                                                                                                                                        4 functions- defined in stdlib.h so need to include it. also, malloc.h, alloc.h in windows?
                                                                                                                                                                        <malloc>
                                                                                                                                                                        malloc- memory allocation
                                                                                                                                                                                allocates specified memory in bytes and return 1st byte's address in void* type which can be stored in a specific pointer variable for reference.
                                                                                                                                                                                we use sizeof(..) operator to make program platform independent and keep safe side.
                                                                                                                                                                                eg- malloc(10) on 16 bit m/c 
                                                                                                                                                                                but keep safe side- so malloc(sizeof(int)*5); 
                                                                                                                                                                                and it return address in void* type(meant for any pointer variable)
                                                                                                                                                                                without that pointer variable we can't operate on memory allocated to us.
                                                                                                                                                                                So- int *p = (int*) malloc(sizeof(int)*5);	//sets aside those many bytes for us- which we can use as array or hetergenous data.
                                                                                                                                                                                        all memory blocks contain garbage
                                                                                                                                                                                        doing this instruction twice makes the previous memory area to get lost- no access- used by current program but can't access (memory leak)
                                                                                                                                                                        </malloc>
                                                                                                                                                                        <calloc>
                                                                                                                                                                        calloc- contiguous memory allocation?
                                                                                                                                                                                same as malloc but specifies number of indices in array, size of every index.
                                                                                                                                                                                Also, sets every element in the array to 0;
                                                                                                                                                                                eg- //TODO
                                                                                                                                                                                risk of memory leak.
                                                                                                                                                                                Usage
                                                                                                                                                                                        ptr = (int*) calloc(n,sizeof(int));	//CAN well be sizeof(float) or sizeof(var) but avoid confusion. malloc just wants a number as input.
                                                                                                                                                                                                //hence forth use ptr as an array of size n- with mild precautions- dealing with pointers.
                                                                                                                                                                        </calloc>
                                                                                                                                                                        <free>
                                                                                                                                                                        free- can't free unallocated area. so make sure we don't free twice- it is an error.
                                                                                                                                                                                free(p);	//frees the area pointed to by p- records are kept with the system.
                                                                                                                                                                                        free(&p[1]);	//nope. doesn't tally with system record- can well be a different variable but same address.?
                                                                                                                                                                                The responsibility is on us to release the resource. Do remember to set reference variable back to NULL else if used later- it is DANGLING POINTER.																									
                                                                                                                                                                        </free>
                                                                                                                                                                        <realloc>
                                                                                                                                                                        realloc- if system demands change in middle, we use realloc to resize or reallocate with data shifted the memory allotted.
                                                                                                                                                                                ptr = realloc(ptr,newsize);	//pointer reference memory old and given new name.
                                                                                                                                                                                        //maybe same region extended or different with data copied.
                                                                                                                                                                                it is a heavy operation so use with precaution.
                                                                                                                                                                        </realloc>
                                                                                                                                                                </How>
                                                                                                                                                                <Allocate2DArrayUsingDMA>
                                                                                                                                                                        int **arr;
                                                                                                                                                                        arr = (int **) malloc( rows*sizeof(int*));
                                                                                                                                                                        if(!arr)
                                                                                                                                                                                {printf("error");exit();}
                                                                                                                                                                        for(i=0;i< rows;i++)
                                                                                                                                                                        {
                                                                                                                                                                                arr[i] = (int*) malloc ( cols * sizeof(int));
                                                                                                                                                                                if(arr[i]==NULL)
                                                                                                                                                                                        printf...
                                                                                                                                                                                //use array as normal- arr[i][j] means- *(*(a+i)+j); so works as effectively.																								
                                                                                                                                                                        }
                                                                                                                                                                        //of course, inthe end never forget to free memory- else your process size will keep building until application crashes- no more space or burdening RAM unnecessarily.
                                                                                                                                                                        for(i=0;i< rows;i++)
                                                                                                                                                                                free(arr[i]);
                                                                                                                                                                        free(arr);	//both need to be separately deallocated and that too in this sequence else once arr is inaccessible can't deallocate the memory under refernce with indices.																							
                                                                                                                                                                </Allocate2DArrayUsingDMA>
                                                                                                                                                        </DynamicMemoryAllocation>
                                                                                                                                                </TypesOfMemoryAllocation>
                                                                                                                                        </Variables>
                                                                                                                                </DataIdentifiers>
                                                                                                                                Functions- void print(int,int a); 	//just giving the signature and no memory is assigned to data elements
                                                                                                                                        included in header files are declarations so that compiler doesn't complain as unidentified symbols- and set a branch statement on a function call with address to jump to- not available at the moment.
                                                                                                                </Declaration>
                                                                                                                <StatementTypes>
                                                                                                                                <AssignmentsStatements>
                                                                                                                                    Declaration- (dataType) (identifier);
                                                                                                                                        Variable- alias of a memory location.
                                                                                                                                        DataType- specifies #bytes and internal representation.
                                                                                                                                        by default garbage value is written.
                                                                                                                                    Assignment- replace garbage value with a constant/expression value.
                                                                                                                                            lvalue- use address of the variable.
                                                                                                                                            rvalue- uses the contents of the variable. Can have a constant.
                                                                                                                                            TypeMismatch
                                                                                                                                                type-conversion- implicitly happens.
                                                                                                                                                        from lower to higher happens easily- no loss of data
                                                                                                                                                                order- c,d,ud,ld,ud,f,lf,Lf
                                                                                                                                                        from higher to lower?
                                                                                                                                                        float p=.7 and later if(p==.7) will be false because by typecasting double to float some decimal changes happen.
                                                                                                                                                                don't use float for equality. take the difference and that should be low.
                                                                                                                                                typecasting- when dividing int by int- we should typecast 1 of them to float to get decimal.
                                                                                                                                                        3700*3700- can't be fitted in int so typecasted to long int is advised here.
                                                                                                                                    Definition- Declaration + assignment.
                                                                                                                                </AssignmentsStatements>
                                                                                                                                <InputOutputStatements>
                                                                                                                                Input/Output statements- Interaction with user- getting input or informing user of output.
                                                                                                                                        how- using invocation of library function.
                                                                                                                                        <Output>
                                                                                                                                                Monitor generally/Standard Output{
                                                                                                                                                        printf("Hi There %d",a);	//used for displaying i/f and values of user's interest.
                                                                                                                                                                2 types of parameters-{
                                                                                                                                                                        Control String- {																								
                                                                                                                                                                                String data laid into a text stream for o/p console- monitor.
                                                                                                                                                                                        That's why in double quotes.
                                                                                                                                                                                Conversion specifiers- { laid within the control string
                                                                                                                                                                                        How the data is to be accepted or interpreted by the system.
                                                                                                                                                                                        corresponding to all data elements in variable list to lay data values into the text stream for std o/p	
                                                                                                                                                                                                ?Mismatch?
                                                                                                                                                                                                        no specifier but data variables
                                                                                                                                                                                                        in numbers
                                                                                                                                                                                                        in types
                                                                                                                                                                                        Format{
                                                                                                                                                                                                %[flags][width][.precision][length]specifier
                                                                                                                                                                                                        flags- output justification
                                                                                                                                                                                                                -left justification
                                                                                                                                                                                                                +right justification
                                                                                                                                                                                                                0 0 right justify.
                                                                                                                                                                                                        width- max chars to print after padding (alignment, no compromise on accuracy)
                                                                                                                                                                                                        precision- ?Maximum number of chars to print
                                                                                                                                                                                                                int- min for int- pad / no truncate
                                                                                                                                                                                                                char- read only specified characters
                                                                                                                                                                                                                float- after decimal to print
                                                                                                                                                                                                        length?-hd and variable huge
                                                                                                                                                                                                                h-short
                                                                                                                                                                                                                l-long
                                                                                                                                                                                                                L-Long double
                                                                                                                                                                                                        specifier- 
                                                                                                                                                                                                                c-char
                                                                                                                                                                                                                d-decimal
                                                                                                                                                                                                                f-float
                                                                                                                                                                                                                E-exponent
                                                                                                                                                                                                                G-? related to e
                                                                                                                                                                                                                o-octal
                                                                                                                                                                                                                s-string
                                                                                                                                                                                                                x-hexadecimal
                                                                                                                                                                                                        Eg- printf("%5d",23);	//on console-   23(3white spaces)
                                                                                                                                                                                                                %1d- 23
                                                                                                                                                                                                                printf("%x,%#x",1234,1234);	//EA,0X EA
                                                                                                                                                                                        }
                                                                                                                                                                                }
                                                                                                                                                                        }
                                                                                                                                                                        Variable Lists- memory locations from which data is to be fetched and laid into control string at specified locations.
                                                                                                                                                                }																						
                                                                                                                                                                Escape Sequence{Given for outcome on console. factually a character stored in memory.																					
                                                                                                                                                                        \n- newline character
                                                                                                                                                                        \t- tab
                                                                                                                                                                        \a- audible signal
                                                                                                                                                                        \b- Backspace																					
                                                                                                                                                                        \v- vertical tab
                                                                                                                                                                        \f- new page
                                                                                                                                                                        \r- carriage return
                                                                                                                                                                        \?- question mark
                                                                                                                                                                        \\- backslash
                                                                                                                                                                        \'- single quote
                                                                                                                                                                        \"- double quote	//useful even in making strings constants of this type
                                                                                                                                                                        \o- Octal constant
                                                                                                                                                                        \x- Hexadecimal constant
                                                                                                                                                                        \0- terminating the string- ascii 0- NULL (standardized in string.h)
                                                                                                                                                                }
                                                                                                                                                }-Monitor- Standard Output
                                                                                                                                                redirection to output file
                                                                                                                                                        ./a.out > 1.txt
                                                                                                                                                File o/p through functions{
                                                                                                                                                        Storing i/f into permanent storage- Secondary device and access it later.
                                                                                                                                                }
                                                                                                                                        </Output>
                                                                                                                                        <Input>
                                                                                                                                                used to supply input to the program from user and printing output results to the user
                                                                                                                                                <Sources>
                                                                                                                                                        <STDIN>
                                                                                                                                                                Keyboard generally
                                                                                                                                                                scanf("%d",&n);		//value assigned by user at run-time. scan formatting.
                                                                                                                                                                        Returns no of fields read
                                                                                                                                                                        scanf(","); or scanf("%2d,%d");	//meaning
                                                                                                                                                                        says that read the stream of data from standard Input device (keyboard) until an input of decimal format is encountered and stop reading when over.
                                                                                                                                                                                take that input and interpret it in the specified format and store at the address of n (specified variable) in MM.
                                                                                                                                                                        counter on chunk adjacent to last read char.
                                                                                                                                                                        Interpret the read text as if it was an integer.
                                                                                                                                                                                ?what if we give very large input for integer.
                                                                                                                                                                Conversion specifier{
                                                                                                                                                                        %[*][width][modifier]type
                                                                                                                                                                                *- to skip a char
                                                                                                                                                                                width- max no of char to be read- can be less if space and newline is encountered
                                                                                                                                                                                modifier- h,l-ld,lf,L
                                                                                                                                                                                type- same as before. also, s- for inputting a string- until space or newline encounterd.
                                                                                                                                                                                Any mark between conversioin specifier?- user will have to enter that.
                                                                                                                                                                Mismatch between conversion specifier and variables
                                                                                                                                                                        in numbers- last variable keeps the garbage or doesn't work- ?
                                                                                                                                                                        in types- misbehaves?
                                                                                                                                                                eg- scanf("%2d %4d",&a,&b);	//for input 1234 5678- the variable values will be 12 and 34.
                                                                                                                                                                }
                                                                                                                                                        </STDIN>
                                                                                                                                                        <FileRedirection>
                                                                                                                                                                ./a.out < 1.txt
                                                                                                                                                                helps in testing.
                                                                                                                                                        </FileRedirection>
                                                                                                                                                        <FileReading>
                                                                                                                                                            xml- Parsing using saxon
                                                                                                                                                            Parsing using parsing tools- yacc, cup, etc
                                                                                                                                                        </FileReading>
                                                                                                                                                        <ThruCommandLine></ThruCommandLine>
                                                                                                                                                        <ThruFunctions>
                                                                                                                                                                Retrieving information from permanent resource.
                                                                                                                                                                File- Collection of data stored on secondary storage; combine whole data into file and read from file.
                                                                                                                                                                Imagine using keyboard over & over again for huge data inputs.
                                                                                                                                                                        Time consuming
                                                                                                                                                                        data lost when program or computer turns off.
                                                                                                                                                                Works very similar to i/o instruction with filename and some specifications.
                                                                                                                                                        </ThruFunctions>
                                                                                                                                                        <Databases>
                                                                                                                                                                Covered under DBMS
                                                                                                                                                        </Databases>
                                                                                                                                                </Sources>
                                                                                                                                        </Input>
                                                                                                                                </InputOutputStatements>
                                                                                                                                <ArithmeticAndLogicalInstruction>
                                                                                                                                Arithmetic/logical Instruction- To perform arithmetic/Logical operations between constants and variables.
                                                                                                                                        Operators- symbol that specifies operation (mathematical,logical and relational)
                                                                                                                                                Arithmetic- *,/,%,+,-,+=,-=
                                                                                                                                                        left to right association.
                                                                                                                                                        %only for integers and retains sign of numerator.
                                                                                                                                                        /- int by int gives int truncates the decimal. so typecast if decimal answer.
                                                                                                                                                        unary- ++,-- (pre and post)
                                                                                                                                                                Careful with pre or post- are you sure?
                                                                                                                                                        In case of operation between different types- type-conversions happens.
                                                                                                                                                Relational- compares 2 values and returns true or false as (1 or 0)
                                                                                                                                                        <,<=,>,>=,== (space not allowed)
                                                                                                                                                        association left to right.
                                                                                                                                                        Priority 2nd to arithmetic.																					
                                                                                                                                                Logical- AND,OR,NOT as &&,||,!
                                                                                                                                                        association left to right.
                                                                                                                                                        operates in shortcut if answer becomes obvious- 2nd expression may not be evaluated at all.
                                                                                                                                                                be sensitive with that. 2nd expression may contain a write into memory like increment or assignment.
                                                                                                                                                Unary operators- Minus,Pre and post- increment,decrement- can be applied to variable not constant or expression.
                                                                                                                                                        pre- first increment then use
                                                                                                                                                        post- first use then increment.
                                                                                                                                                        precedence- greaer than binary.
                                                                                                                                                Conditional/ternary- ?:- exp?exp2:exp3; check exp and use exp2 if true and exp3.
                                                                                                                                                Bitwise operator- &,|,^(XOR),shift operator (<<), NOT (~)
                                                                                                                                                        association is left to right in nesting.																					
                                                                                                                                                Comma operator- 1st expression evaluated and discarded then 2nd. for(i=0;i<2,j<5;j++) here j<5 is the criteria.
                                                                                                                                                sizeof(int)- to get size of datatype or a declared variable in bytes.

                                                                                                                                                Priority- (),.,->,++,sizeof(),&,!,~,*,/,%,+,-,<<,>>,<=,==,&,^,|,&&,||,?:,=,,
                                                                                                                                                Associativity- all left to right except sizeof(int),&,=,?=

                                                                                                                                </ArithmeticAndLogicalInstruction>
                                                                                                                                <ControlInstruction>
                                                                                                                                    Control Instruction- To control the sequence of execution of various statements.
                                                                                                                                        <Sequential>
                                                                                                                                        Sequential flow of control generally.
                                                                                                                                        </Sequential>
                                                                                                                                        <ConditionalBranching>
                                                                                                                                                <Selection>
                                                                                                                                                Decision control
                                                                                                                                                Also known as forward branching- jumps a few instructions to execute ahead.
                                                                                                                                                st selected statements are to be executed in a situation and not in the other.
                                                                                                                                                no semicolon after this- because condition check + statement block makes a statement.
                                                                                                                                                we indent the dependent statements as a good practice.
                                                                                                                                                VIZ
                                                                                                                                                        if(codition expression){block of code}..- execute block of code that follows if true/non-zero and continue with end of block. or jump to end of the block directly, if 0.
                                                                                                                                                                pitfalls- assignment in place of equality operator if(x=10) is always true condition.
                                                                                                                                                                        using floating data in comparison- it is risky- representation is approximation and typecast also.
                                                                                                                                                                                high chances of 1 bit to differ. use subtraction and cmp with low number.
                                                                                                                                                        if(c){} else {}- jump to else block if condition becomes false.
                                                                                                                                                                pitfalls- dangling-else- which one does this else correspond to- nearest is taken by default- can lead to logical errors, if not so intended.
                                                                                                                                                        ?if else if...- if false, jump to check the next condition and so forth																					
                                                                                                                                                        switch- switch (expr){case 1: ...;break; case2: ...break; default:...break}
                                                                                                                                                                expression should become an integral value after computation. and so with case- char or int.
                                                                                                                                                                multi-way decision statements based on evaluation of one variable or expression. good help to programmer- than to write them over and again. easy to read, understand,debug.
                                                                                                                                                                case act like labels. braces not used because labels are remembered- implies time saved also in re-condition check vs direct jump.
                                                                                                                                                                if none of cases match- then default label is used wherever it is(need not be last)
                                                                                                                                                                break statement is used to break out of switch statement- otherwise, next statement of following cases gets executed.
                                                                                                                                                                        can be harnessed in similar instructions for multiple cases and statement in last with a break.
                                                                                                                                                                                eg- printing it is a vowel for vowels- let cases of all vowels be contiguous and with no breaks and print statement in last and then break.
                                                                                                                                                                nesting is allowed.
                                                                                                                                                </Selection>
                                                                                                                                                <Iterative>
                                                                                                                                                    Also known as backward branching (sequential flow makes them repeat)
                                                                                                                                                Iterative or repetition or loop control
                                                                                                                                                        What? to repeat the execution of a list of statements depending on value of integer expression- it is just jump backwards at end of iterative block in ASL [and conditional jump in beginning or break in middle ] unlike selection statement which is jump forward.
                                                                                                                                                        VIZ
                                                                                                                                                                while(){} or pre-test or entry-controlled loop-
                                                                                                                                                                        check in beginning and condition variables should get updated in the block so that st condition will be false else infinite loop.
                                                                                                                                                                        blunder to put semi-colon after condition check.
                                                                                                                                                                        sentinel value- using user's value to stop the loop. like press -1 to stop.infinite loop otherwise.
                                                                                                                                                                                eg- cumulative addition from m to n.
                                                                                                                                                                        Test N+1 times for N times executioins.
                                                                                                                                                                        eg- count avg of positive numbers entered by user, count no of lowercases in a string from user.
                                                                                                                                                                do{}while(); or post-test or exit-controlled loop-
                                                                                                                                                                        code gets executed at least once.
                                                                                                                                                                                eg- Menu-driven programs.
                                                                                                                                                                for([initialize];[condition check];[update]){}; or definite loop or deterministic loop or counter-controlled loop
                                                                                                                                                                        initialize- one or more loop variables- assignment expected can be from expression but discouraged- round-off or truncation.
                                                                                                                                                                        condition check- connected with relation operator generally and decides branching.
                                                                                                                                                                        update- makes condition approachable
                                                                                                                                                        break or continue- skipping all statements that follow in loop block, break goes out of the loop and continue goes back to the next iteration of loop.																				
                                                                                                                                                                avoid them and goto as they break structured programming principles
                                                                                                                                                                        Better use break and continue but not goto.
                                                                                                                                                                break- on sentinel value
                                                                                                                                                                continue- on wrong value- unexpected value inputed by user.
                                                                                                                                                        Nesting
                                                                                                                                                                can be done any desired times.
                                                                                                                                                                break and continue effects the nearest loop.
                                                                                                                                                                        just need to reArrange code
                                                                                                                                                                                Replace break- while(1){if(num==99) break; sum+=num;} === while (flag==1){if(num!=99) sum+=num;else flag=0;}
                                                                                                                                                                                Eliminate continue- while(flag==1){if(num<0) continue; else...} === while (flag==1){if(num>=0)...}
                                                                                                                                                        Eg- prime no, generate table,calendar,patterns,add series,convert in number systems.
                                                                                                                                                </Iterative>
                                                                                                                                        </ConditionalBranching>
                                                                                                                                        <UnconditionalBranching>
                                                                                                                                            unconditional- label,goto was found culprit of spaggetti code- crazy branching- difficult to keep track of.
                                                                                                                                                    internally that's what happens- labelName: statement and jump to this lable from any part of code thru goto labelName;
                                                                                                                                                    jump forward or backward- for selection or iteration.
                                                                                                                                                    complicates analysing, verifying correctness of program and unstructured.
                                                                                                                                                    Not Necessary- Structured program theorem- combination of sequence, selection and repetition constructs are sufficient to perform any computation.
                                                                                                                                                            just need to reArrange code
                                                                                                                                                            Replace break- while(1){if(num==99) break; sum+=num;} === while (flag==1){if(num!=99) sum+=num;else flag=0;}
                                                                                                                                                            Eliminate continue- while(flag==1){if(num<0) continue; else...} === while (flag==1){if(num>=0)...}
                                                                                                                                        </UnconditionalBranching>
                                                                                                                                </ControlInstruction>
                                                                                                                        Ended by a semi-colon ;	//not after block of statements (compound statement)
                                                                                                                </StatementTypes>
                                                                                                                <DebuggingEase>
                                                                                                                    <Comments>
                                                                                                                        Internal program documentation for readability to programmer and others (now and later) thus saving time
                                                                                                                                Doesn't account for speed- use liberally for help in debugging.
                                                                                                                                        helps find out logical bugs- by giving comment for a block or section and making sure it does it's job																	
                                                                                                                        Compiler is programmed to ignore them for compilation- so anything written there is non-executable
                                                                                                                        Types
                                                                                                                                Block- Enclosed /* and */- across lines and doesn't allow nesting. Becase 1st */ encountered stops the comment making code syntactically incorrect.
                                                                                                                                Line- // needs no end and eth following this for the line is taken as comment.
                                                                                                                    </Comments>
                                                                                                                    <Indentation>
                                                                                                                        Good looks for easy understand and debug
                                                                                                                            so maintain indentation.
                                                                                                                            Use comments where necessary
                                                                                                                                    for others- to understand what it was for.
                                                                                                                                    for self- later visit or sub-tasks completeness.
                                                                                                                    </Indentation>
                                                                                                                </DebuggingEase>
                                                                                                                Execution starts from main function
                                                                                                                        Parameters- Argc,argv- can be passed through command line arguments.
                                                                                                                        int main{}
                                                                                                                                this function returns an integer value to OS- indicating success or error-codes (0 and either of error-codes)
                                                                                                        </Function>
                                                                                                        <MoreFunctions>
                                                                                                                We break program into multiple (more or less) independent segments/ functions that do well-defined tasks
                                                                                                                        They work like interfaces to outside world by getting specific information and transmitting back the results.
                                                                                                                                thus achieving encapsulation- need not know its code but only fn signature.
                                                                                                                                a fn is invoked by fn call- control jumps to function definition, there can be any number of fn calls.
                                                                                                                <WhyFunctions> 
                                                                                                                        written and tested separately- get individual modules working and integrate working modules easier a task.
                                                                                                                                Planning- workload divided.
                                                                                                                                Coding- 
                                                                                                                                        Same set of instructions repeating themselves but not at a stretch. so Repeat same code over & again.
                                                                                                                                        easy to understand,code,test,maintain.
                                                                                                                                        Readymade fn in C library- use them directly and need not code those things over and again.
                                                                                                                                                OR make our own function and use it many times.

                                                                                                                                Execution- Memory space is limited so making assemblies may be a good idea and keep only necessary components in MM.
                                                                                                                                Testing- Debug becomes easy and logical steps division of code- encapsulation.
                                                                                                                </WhyFunctions>
                                                                                                                <UsingFunctions>
                                                                                                                        OS calls main function- entry point of execution and main function returns success report to OS.
                                                                                                                        main function may further give calls to other functions which act like black box- takes input called arguments(values),actual parameters, as formal parameters work on them and returns a result.
                                                                                                                        function declaration and definition is given
                                                                                                                                function declaration- declaration statement that identifies fn wit its name, list of arguments it accepts and type of data that it returns.
                                                                                                                                        also fn prototype so that compiler can check against the signature- the fn call and take identifier in that sense.
                                                                                                                                        return_data_type fn_name([data_type [var1][,data_type [var2]]*]/[void]);
                                                                                                                                                void return type means no return. void parameter means no input argument accepted.
                                                                                                                                                default return_data_type is int. so if unspecified return integer value is expected.
                                                                                                                                                return_data_type can be a pointer to a data_type.
                                                                                                                                                        eg- int* fn(int); or int *fn(float*); This is different from function pointer- discussed later.
                                                                                                                                function definition- fn header that identifies fn with its name, list of arguments it accepts, type of data it returns and block containing a set of statements to process the data.
                                                                                                                                        memory is created for fn in memory.
                                                                                                                                        header should match in types and number with fn declaration- names of var can change.
                                                                                                                                        definition and declaration can be clubbed if before done before main fn.
                                                                                                                                        ellipsis- when no of args not known at compile time- variable numbers- eg- printf.
                                                                                                                                function call- invoke the fn- checks for No and type of args and return type of called fn to execute
                                                                                                                                        passes the arguments to formal parameter- assignment																				
                                                                                                                                                pass by value- only a copy of actual arguments get passed so no change to original variable in calling function but to their copy.So, call when we don't want to change passing values but just use them and return a result if at all.
                                                                                                                                                pass by pointer/address- we pass the address of variable and the changes and done through the value which denotes the address of the variable so change become visible- so like multiple returns.																					
                                                                                                                                        syntax- fnName([e1[,e2]*]);	//e1-expression or constant or variables.1st evaluated then passed.
                                                                                                                                                Mismatch between either of 3??
                                                                                                                                                        in number
                                                                                                                                                        in type- from front or back? error.
                                                                                                                                        Return value
                                                                                                                                                error to declare return type as void and then return. of different type-error
                                                                                                                                                Can be rvalue- if returns something and then return value replaces the call and regular assignment happens.
                                                                                                                                                return a; return (expression/var/const) or return; if void retn type.
                                                                                                                                                when return statement the var alias loses existence so only value remains.
                                                                                                                                                fn can have >=1 return statements but 1 gets executed.
                                                                                                                                        after done, control comes back to calling function from where call was made- so address needs to be remembered.
                                                                                                                </UsingFunctions>
                                                                                                                <Types>
                                                                                                                        Nesting- for information hiding we can define a function inside a function.
                                                                                                                        <Recursion>
                                                                                                                                when a function calls itself.
                                                                                                                                approach to solve problems
                                                                                                                                        very effective as it is similar to mathematical expression/formula.
                                                                                                                                                very time saving for the programmer.
                                                                                                                                        2 steps-
                                                                                                                                                express the problem solution in terms of smaller version of problem.- recursive case
                                                                                                                                                And smallest version of the problem is simple enough to have a solution- base case - written before the former as conditional statement.
                                                                                                                                        eg- fact(n)=n*fact(n-1); if n>1 and 1 for n=1;
                                                                                                                                                fact(5) solution calls for fact(4),saves all var values on stack and waits for its response to compute the expression, statements ahead.
                                                                                                                                                        fact(4) for its solution calls fact(3)- all the functions keep storing their variables on stack for refering to corresponding variable values after func call returns.
                                                                                                                                        eg- finding gcd using formula- gcd(a,b)={b if b%a otherwise, gcd(b,a%b);}
                                                                                                                                <TYPES>
                                                                                                                                        Based ON Calls itself directly/indirectly
                                                                                                                                                Direct- calls itself explicitly
                                                                                                                                                Indirect- A Calls a function B which calls A again.
                                                                                                                                        Based ON Operation remains pending or not (tail recursive or not)
                                                                                                                                                Tail- The result is tailed thru the calling process. so no pending operations. Lesser information stored on stack. When called fn returns calling fn also returns. 
                                                                                                                                                1 more parameter is passed which carries the result till then. f(int res,int n){if (){} return f(n*res,n-1);}
                                                                                                                                                        pending operation is incorporated into the result.
                                                                                                                                                Non-tail- return n*f(n-1); after result is returned multiplication is remainting
                                                                                                                                        Based ON Structure of calling pattern (linear or tree)
                                                                                                                                                Linear- When pending operation doesn't make a recursive call.
                                                                                                                                                Tree- Pending operation makes a recursive call.
                                                                                                                                                        eg- Fibonacci Series- as we do it "normally"
                                                                                                                                </TYPES>
                                                                                                                                <Eg>
                                                                                                                                Eg- Towers of Hanoi
                                                                                                                                        if you can solve problem for case having n-1 elements, you can solve nth case by expressing it in terms of n-1th case.
                                                                                                                                        Moving n-1 rings from A to B through C is known, how can we move n rings from A to B through C S.t. the heavier never comes under lighter.
                                                                                                                                                Move n-1 rings from A to C through B.
                                                                                                                                                Move 1 ring from A to B.
                                                                                                                                                Move n-1 rings from C to B through A.
                                                                                                                                        Code- 
                                                                                                                                                main()
                                                                                                                                                {
                                                                                                                                                        int n;
                                                                                                                                                        scanf("%d",&n);
                                                                                                                                                        move(n,'A','C','B');
                                                                                                                                                        return 0;
                                                                                                                                                }
                                                                                                                                                void move( n, char source,char destination, char spare)
                                                                                                                                                {
                                                                                                                                                        if(n==1)
                                                                                                                                                                printf("Move %c to %c"\n",source,destination);
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                                move(n-1,source,spare,destination);
                                                                                                                                                                move(1,source,destination,spare);
                                                                                                                                                                move(n-1,spare,destination,source);
                                                                                                                                                        }
                                                                                                                                                }
                                                                                                                                </Eg>
                                                                                                                                <vsIteration>
                                                                                                                                        Recusion-
                                                                                                                                                works similar to original formula- divide and conquer philosophy. Easy for programmer for quick coding.
                                                                                                                                                Clear and easier to use and shorter code.
                                                                                                                                                Stack overflow risk exists.
                                                                                                                                        Iteration-
                                                                                                                                                Recursion is a difficult concept.
                                                                                                                                                Global variables, if used, difficult to debug.
                                                                                                                                                More memory- System Stack keeps filling.
                                                                                                                                                System stack is small will imply Deeper levels of recursion impossible.
                                                                                                                                </vsIteration>
                                                                                                                        </Recursion>
                                                                                                                        <ConvertIterative2Recursive>
                                                                                                                            Gives you tail recursive outcome from iteration.
                                                                                                                                Convert Loop part into a function
                                                                                                                            Eg- 
                                                                                                                            foo_iterative(params){
                                                                                                                                header
                                                                                                                                while(condition){
                                                                                                                                    loop_body
                                                                                                                                }
                                                                                                                                return tail
                                                                                                                            }


                                                                                                                            foo_recursive(params){
                                                                                                                                header
                                                                                                                                return foo_recursion(params, header_vars)
                                                                                                                            }

                                                                                                                            foo_recursion(params, header_vars){
                                                                                                                                if(!condition){
                                                                                                                                    return tail
                                                                                                                                }

                                                                                                                                loop_body
                                                                                                                                return foo_recursion(params, modified_header_vars)
                                                                                                                            }
                                                                                                                            breaks and continues in the loop body will still have to be replaced with return tail and return foo_recursion(params, modified_header_vars) as needed
                                                                                                                        </ConvertIterative2Recursive>
                                                                                                                        <ConvertRecursive2Iterative>
                                                                                                                            Mimick Program Stack by your own stack- the parameters should be stored on stack
                                                                                                                                if multiple calls in a function- push on stack in reverse order.
                                                                                                                                Desirable to convert to tail recursive before converting to iterative.
                                                                                                                            Eg- 
                                                                                                                                void quicksort(int* array, int left, int right)
                                                                                                                                {
                                                                                                                                    if(left >= right)
                                                                                                                                        return;

                                                                                                                                    int index = partition(array, left, right);
                                                                                                                                    quicksort(array, left, index - 1);
                                                                                                                                    quicksort(array, index + 1, right);
                                                                                                                                }

                                                                                                                                Here's how we could make it iterative by keeping our own stack:

                                                                                                                                void quicksort(int *array, int left, int right)
                                                                                                                                {
                                                                                                                                    int stack[1024];
                                                                                                                                    int i=0;

                                                                                                                                    stack[i++] = left;
                                                                                                                                    stack[i++] = right;

                                                                                                                                    while (i > 0)
                                                                                                                                    {
                                                                                                                                        right = stack[--i];
                                                                                                                                        left = stack[--i];

                                                                                                                                        if (left >= right)
                                                                                                                                             continue;

                                                                                                                                        int index = partition(array, left, right);
                                                                                                                                        stack[i++] = left;
                                                                                                                                        stack[i++] = index - 1;
                                                                                                                                        stack[i++] = index + 1;
                                                                                                                                        stack[i++] = right;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            Eg-
                                                                                                                                // tail-recursive
                                                                                                                                int factorial (int n, int acc = 1)
                                                                                                                                {
                                                                                                                                  if (n == 1)
                                                                                                                                    return acc;
                                                                                                                                  else
                                                                                                                                    return factorial(n - 1, acc * n);
                                                                                                                                }

                                                                                                                                // iterative
                                                                                                                                int factorial (int n)
                                                                                                                                {
                                                                                                                                  int acc = 1;
                                                                                                                                  for (; n > 1; --n)
                                                                                                                                    acc *= n;
                                                                                                                                  return acc;
                                                                                                                                }

                                                                                                                        </ConvertRecursive2Iterative>
                                                                                                                </Types>
                                                                                                        </MoreFunctions>
                                                                                                        <FunctionPointer>
                                                                                                                <Intro>
                                                                                                                Purpose
                                                                                                                        generic programming
                                                                                                                                Code clutter avoided- 1 name for similar functions
                                                                                                                        Enables features like callbacks.
                                                                                                                        Enable plug-ins & extensions to a software/update- eg- openGL get a fn in ptr.
                                                                                                                Idea
                                                                                                                        Every function has space in memory hence a starting address.
                                                                                                                        We can pass the address and use the function inside another function.
                                                                                                                </Intro>
                                                                                                                <Usage>
                                                                                                                        return_type (*fn)(int a,float b) !=== return_type *fn(int a, int b);
                                                                                                                                //fn is a pointer to a function which returns return_type data.
                                                                                                                        fn can be assigned with different fn names at different times but similar signature
                                                                                                                                eg- fn=add; or fn= &add;
                                                                                                                        check if fn is initialized right- if(fp>0) or if(fp == func)
                                                                                                                        fn call- (*fn)(1,2f) or just fn(2,3.4f);
                                                                                                                        eg-
                                                                                                                                int add(int a,int b){return a+b;}
                                                                                                                                int sub(int a,int b){return a-b;}
                                                                                                                                int operate(int (*operate_fn(int,int),int,int));	//declaration. This function is going to take a function as input parameter.
                                                                                                                                                                        //generic programming- to invoke sort routine from book,contact and student structs, we will pass their own compare methods as fn parameter.
                                                                                                                                main()
                                                                                                                                {
                                                                                                                                        result = operate(add,7,3);

                                                                                                                                }
                                                                                                                                int operate(int (*operate_fn(int ,int),int a,int b))
                                                                                                                                {
                                                                                                                                        return (*operate_fn)(a,b);	//* not compulsory
                                                                                                                                }																
                                                                                                                </Usage>
                                                                                                                <ArrayOfFunctionPointer>
                                                                                                                        typedef int (*fp)(int,int);
                                                                                                                        fp func_Arr[10] = {NULL}; or int (*fp[10])(int,int)
                                                                                                                        eg-
                                                                                                                                int sum(int a,int b){return a+b;}
                                                                                                                                int diff(int a,int b){return a-b;}
                                                                                                                                int (*fp[4])(int a,int b);
                                                                                                                                main()
                                                                                                                                {
                                                                                                                                        fp[0] = sum;
                                                                                                                                        fp[1] = diff;...
                                                                                                                                        scanf("%d",&op);
                                                                                                                                        result = (*fp[op])(a,b);
                                                                                                                                }
                                                                                                                </ArrayOfFunctionPointer>
                                                                                                        </FunctionPointer>
                                                                                                </Functions>
                                                                                        </StructureOfAProgram>
                                                                                        <ExecutionInCommandLine>
                                                                                        How to execute in Command Line
                                                                                                Primitive
                                                                                                        Write program all statements using text editor and save with .c extension to HDD
                                                                                                        in cmd prompt, go to the directory where file is located and write command- gcc or cc 1.c or gcc *.c or gcc 1.c 2.c
                                                                                                                a.out file is made which is executable.
                                                                                                                Options
                                                                                                                        -o - this makes 1.o object code file and saves it in disk under same directory (changeable).
                                                                                                                        gcc -c 1.c will only compile and not link and gcc 1.o 2.o will link the object files or gcc *.c- to compile and link in 1 shot.
                                                                                                                        ?-E - To write pre processed code.
                                                                                                        Execute- the file is loaded and executed by call. 
                                                                                                                Under current folder and not registered for file a.out, we invoke this application as ./a.out- file under current directory.
                                                                                                                ./app_name
                                                                                                IDE
                                                                                                        The same process can be done through GUI.
                                                                                                        With capabilities of editor added- like spell-check, response of return key press.
                                                                                                        UI- for invoking a compiler, linker and execution from within (under the surface).
                                                                                        </ExecutionInCommandLine>
                                                                                        <FilesInCProgram>
                                                                                        Files in C Programs
                                                                                                Source Files
                                                                                                        .c file contains source code. 
                                                                                                        start from main fn and use other fn after successful compilation
                                                                                                        other source files without main function in them- make library files/assembly.
                                                                                                Header Files
                                                                                                        WHY? 1 function/ subroutine desired by another program.
                                                                                                                Copying the code can be error proned and mundane.
                                                                                                                copying for all of the code of various functions from different programs for a program at hand is cumbersome task.
                                                                                                                changes made in 1- will make them all inconsistent and further problems
                                                                                                                        changing all of them is very difficult.
                                                                                                                soln- Store sub-routines in a file and include the file wheneer reqd.
                                                                                                                        ->Compile once and link any time to resulting object files.
                                                                                                                        ->changes made to the header file will be reflected in all. just recompile the subroutine and relink.
                                                                                                        TYPES
                                                                                                                Standard Library- refered in the beginning of the program. code already there. 
                                                                                                                        written in angular braces.
                                                                                                                        we need to read their specification
                                                                                                                                eg- strcpy(char*,char*)	//both ptr have to be initialized.
                                                                                                                VIZ
                                                                                                                        stdio.h- for all i/o related statements
                                                                                                                        string.h- for all string handling functions
                                                                                                                        stdlib.h- misc func,DMA
                                                                                                                        malloc.h,alloc.h- DMA
                                                                                                                        etc
                                                                                                                User-Defined- mentioned in Double quotes.																
                                                                                                Object Files
                                                                                                        Result of compiling source code- binary code of all fn defn (1 source code file makes 1 object code file)
                                                                                                        Linker combines all .o files in unix;.obj for windows to make .exe- the executable file.
                                                                                                Executable Files
                                                                                        </FilesInCProgram>
                                                                                        <ConceptualMemoryView>
                                                                                        while execution
                                                                                                done by system designers and handled by OS.
                                                                                                Types
                                                                                                        Program Memory- in text segment of memory.
                                                                                                                main fn
                                                                                                                other fn
                                                                                                        Data Memory
                                                                                                                Global- Global variables
                                                                                                                Stack- all local variables in fn.
                                                                                                                Heap- all DMA memory.														
                                                                                        </ConceptualMemoryView>				
                                                                                        <Viz>								
                                                                                        HLL- BASIC,C,C++,FORTRAN,Pascal,Ada,COBOL.
                                                                                            COBOL- Common Business Oriented Language.
                                                                                            FORTRAN- Formula Translator- 
                                                                                                    for scientists- used for numerical data, 
                                                                                                    Can't organize large programs
                                                                                            Pascal- Well Structured.
                                                                                            C- Flexible
                                                                                            C++- Flexible and OOPS but diffl and complex.
                                                                                        </Viz>
                                                                </HLL>
                                                                <VHLL>
                                                                4GL- Very High Level Language
                                                                        inc ease of use- More natural language- English like sentences precisely worded.
                                                                                non-procedural
                                                                                        concentrate on what and not how. no Seq of steps.
                                                                                        Query as DB interface and hides the details of DB.
                                                                                                easier syntax rules and logic to remember.													
                                                                                Easier to maintain
                                                                                Fewer lines of code- inc productivity- 10 times.
                                                                        Not Efficient use of machine resources ( but ease & speed outweighs costs of running it).
                                                                </VHLL>
                                                                <AI>
                                                                5GL- Solve probs using constraints
                                                                        AI- declarative languages.
                                                                                eg- Prolog, Mercury.
                                                                        using visual tools (LISP) to define a problem and deriving efficient algo is very diffl task. eg- Japan- insight of programmer is necessary.
                                                                </AI>
                                                        </ProgrammingGenerations>
                                                </ProgrammingLanguages>
                                        </Thereja>
                                        <UnitTesting>
                                            <GDB>
                                                gdb- genome debugger
                                                    1. Bogu pointerdeferencing
                                                    2. null pointer dereferencing- segmetation fault.
                                                    3. giving index out of range
                                                gcc -g a_seg_gault2.c -o a_seg2
                                                gdb a_seg2
                                                        you are in gdb and unix commands will not work
                                                                break 5// line 5 putting a breakpoint
                                                                        run
                                                                        it's at line 6exec done till 6.watch k- step to next function. exec path
                                                                                next- in same file- function skipped
                                                                                fire next
                                                                                list to see the program.and currently at which line
                                                                                if not line by line then continue command in gdb command line.
                                                ./a_seg2- core dumped directly
                                                clear to clear the screen

                                                // to load gdb related debuggers will be loaded.

                                            </GDB>
                                        </UnitTesting>
                                    </C>
                                    <CPP>
                                        C++ supports object-oriented programming, but OO is not intrinsic to the language. 
                                        In fact, the main function isn't a member of an object. 
                                            vs smalltalk or Java- you can't tie your shoes (or write "Hello, world") without at least one class.
                                        in cpp, freely make folders, but code organization is based on namespaces
                                            don't worry paths while using folders- nowhere in source code you need to specify anything except that we need external api.
                                            although object files go in respective folder after build but exe works seamless.
                                            code organization is based on namespaces.
                                            during compilation- gcc f1.cpp d1/f2.cpp or -c which yields .o in same directory.
                                            cpp doesn't work with gcc but g++ accepts c syntax with a minor exceptions- int main, etc
                                    </CPP>
                                </ProceduralPL>
                                <OOPL>
                                    Criteria - Interplay of objects solve a problem. Objects is real world entities (mapping of concrete objects, docs, people) templated or abstracted as classes.
                                        4 pillars - new concepts unknown to procedural paradigm (functions based)
                                            Abstraction
                                            Encapsulation
                                            Inheritance
                                            Polymorphism
                                    Eg- C++, Java
                                    <Java>
                                        <Installation>
                                            Refer to shell scripts
                                            update /etc/profile or ~/.profile or ~/.bashrc (difference?)
                                            sudo update-alternatives --install "/usr/bin/java" "java" "/usr/local/java/jdk1.8.0_131/bin/java" 1
                                            apt-get
                                                sudo apt-get install openjdk-7-jdk
                                                export
                                                uninstall
                                                        sudo apt-get remove openjdk-7-jdk
                                            rpm
                                                Become root by running su and entering the super-user password.
                                                Uninstall any earlier installations of the Java packages.
                                                        rpm -e package_name
                                                Change to installation dir
                                                        cd directory_path_name
                                                        Eg- cd /usr/java
                                                Install the package. 
                                                        rpm -ivh jre-8u73-linux-i586.rpm
                                                Upgrade a package
                                                        rpm -Uvh jre-8u73-linux-i586.rpm
                                                No need of reboot
                                                Delete the .rpm file if you want to save disk space.
                                        </Installation>
                                        <CLASSPATH>
                                        https://en.wikipedia.org/wiki/Classpath_(Java)
                                                java -classpath D:\myprogram org.mypackage.HelloWorld
                                                        java -cp /home/user/myprogram org.mypackage.HelloWorld
                                                set CLASSPATH=D:\myprogram or better CLASSPATH=%CLASSPATH%;D:\myprogram (confirm)
                                                        LINUX- export CLASSPATH="$CLASSPATH:foo.jar:../bar.jar" or mess avoid mess of global change by using cp as java -cp (path) mainClass
                                                        java org.mypackage.HelloWorld
                                                        overrides the CLASSPATH environment variable- remember it says .;javaLibraries;.. (they are included by default also- confirm!)
                                                        default is current directory is taken as classpath- so in case you don't specify classpath- current directory is taken
                                                using jars
                                                        java -classpath D:\myprogram;D:\myprogram\lib\supportLib.jar org.mypackage.HelloWorld
                                                                OR set CLASSPATH=D:\myprogram;D:\myprogram\lib\supportLib.jar
                                                                        java org.mypackage.HelloWorld
                                                        adding all jars
                                                                java -classpath ".;c:\mylib\*" MyApp- using wildcards and separate file paths separated by semi-colon (";")
                                                                        LINUX- java -classpath '.:/mylib/*' MyApp- separate file paths separated by a colon (":").
                                                jar containing main method- open manifest file and add-
                                                        Main-Class: org.mypackage.HelloWorld (path to main method from root of jar contained in current directory)
                                                        Class-Path: lib/supportLib.jar (this path is wrt location of helloWorld.jar's location, i.e lib is in same folder as that)
                                                                if more class-paths then separate by spaces- Class-Path: lib/supportLib.jar lib/supportLib2.jar
                                                                absolute path not permitted unlike -classpath
                                                java -jar D:\myprogram\helloWorld.jar [app arguments]
                                        Java classpath
                                                https://docs.oracle.com/javase/tutorial/essential/environment/paths.html
                                                https://en.wikipedia.org/wiki/Classpath_(Java)#Setting_the_path_of_a_Jar_file
                                        </CLASSPATH>
                                        <CLIExecution>
                                                Run the following command to compile your .java file in src and put them in bin (create it)
                                                        javac -d bin/ -cp folderContainingAllCodes /pathToMainClass/fromCurrentLocation
                                                                Eg- javac -d bin/ -cp src src/cs5223/Server.java
                                                        java -cp bin JAVA_CLASS
                                                                Eg- java -cp bin cs5223.Server
                                                        JUnit Test Cases
                                                                javac -cp junit-4.8.1.jar:src -d test/ \
                                                                        test/cs5223/GameTest.javacva \
                                                                        test/cs5223/PlayerTest.java
                                                                java -cp test:bin:junit-4.8.1.jar orrg.junit.runner.JUnitCore \
                                                                        cs5223.GameTest \
                                                                        cs5223.PlayerTest
                                                Making jar
                                                        javac -d bin adder/* subtractor/*
                                                        jar cvf arithmetic.jar -C bin .
                                                        http://skife.org/java/unix/2011/06/20/really_executable_jars.html
                                                Uncat
                                                        javac give path for all .java -d directory to guide .class
                                                        java fullyQualifiedName- respecting packageName.pa.. and directory structure where you ought to be while running the command.
                                                        command line arguments must be given as string array- but String[] args or String args[]- both work for 1.8 version.
                                                        http://stackoverflow.com/questions/18093928/what-does-could-not-find-or-load-main-class-mean
                                                        Killing a java application running on command Ctrl+C not working
                                                                ps -fC java; select the process using command column and fire kill -9 PID
                                        </CLIExecution>
                                        <IDE>
                                        Eclipse- version Neon- 4.6 stable version
                                                <CommandLineInstallation>
                                                Download the Eclpse IDE for Java EE developers. 
                                                tar -xvzf eclipse-standard-luna-R-macosx-cocoa-x86_64.tar.gz
                                                Change directory to ~/eclipse and run ./eclipse
                                                Install maven plugin
                                                        Help > Install New Software- Add - Add Repository- Name- Sonatype M2Eclipse & location- http://download.eclipse.org/technology/m2e/releases- Select the Maven Integration for Eclipse.
                                                </CommandLineInstallation>
                                                <Shortcuts>
                                                        call stack- which method calls current method- ctrl+alt+H
                                                        import- ctrl+[shift+]?o (import), ctrl+shift+p (pair finding for brace), setters, getters (ctrl+shift+s, r), last run (ctrl+f11), more workspaces (new instance eclipse), more projects- openable, f3 for open declaration
                                                        dynamic method invokation- ctrl+hover (view implementation)
                                                        ctrl+l in eclipse to jump to line
                                                        configured shift+f3 to take to implementation.
                                                        ctrl+shift+r- open a resource; ctrl+shift+t- open a external resource (org...)
                                                        ctrl+shift+f- formatting- indentation properly.
                                                        Package view- Package Explorer option > package presentation > hierarchical
                                                        double click .bat file- drag, open with > editor.
                                                        Eclipse Shortcuts	
                                                                Ctrl+shift+f to for proper indentation in eclipse
                                                                CTRL + SHIFT + r will search each for any "Resource" (file), anywhere in your project
                                                                CTRL + SHIFT + e will search for a specific open file (ie. your buffers)
                                                                CTRL + SHIFT + PageUp/PageDown will navigate to the next/previous open buffer
                                                                CTRL + SHIFT + Left/Right will navigate backward/forward in your browsing history
                                                                See, change key- general > tabs > filter, binding textbox- swapped f3 and shift+f3 for implementation (ensure 'edit java source' is in 'when' drop down)
                                                                Ref- https://dzone.com/articles/effective-eclipse-shortcut-key
                                                                Eclipse convert cases
                                                                    Lower case: CTRL+SHIFT+Y
                                                                    Upper case: CTRL+SHIFT+X
                                                                In Eclipse, next occurence by ctrl+k (shift also for prev)
                                                                mark toggle all occurence icon like edit wala - alt_shift_o
                                                        Notepad++
                                                            Ctrl+L shall be able to cut the current line and Ctrl+Shift+L shall be able to remove the current line.
                                                            Ctrl+B to match paranthesis
                                                            Notepad++ - abap made readable more.
                                                                \n(\s+)if  replaced with \n$1if{ and endif with } (but comments are also included so use same as if). That's it!!!
                                                                But elseif ain't findable!! - so, replace all elseif with /{ }elseif{ /}
                                                                \n(\s+)LOOP with \n$1LOOP { and ENDLOOP with }. (not only loop cuz endloop also contains loop)
                                                                Can I apply these set of replacements through code cuz there are more than 1 so mundane it gets - yes, languages support that.
                                                        Netbeans shortcuts
                                                                Collapse Fold	Ctrl+Minus	Collapse a fold. Depends on the current caret position.
                                                                Expand Fold	Ctrl+Plus	Expand a fold. Depends on the current caret position.
                                                                Collapse All Folds     	Ctrl+Shift+Minus     	Collapse all existing folds in the document.
                                                                Expand All Folds	Ctrl+Shift+Plus	Expand all existing folds in the document.
                                                                shift+delete on netbeans IDE for deleting the line
                                                                Ctrl + Curly brace for matching paranthesis
                                                        Eclipse uses different colors for reading and writing
                                                        Parallel Executions in Eclipse
                                                                Make a new configuration- run configuration - Name the configuration tell main class path and args and run from there
                                                                count_table 'your.table', { COLUMNS => 'your.family' }
                                                                We can run multiple consoles- by configuring thru run configuration.
                                                                we can avoid switching to console view on change thru a button on console view pane.
                                                </Shortcuts>
                                                <Others>
                                                https://www.security-plus.co/OpenSSH.txt
                                                CPP addition to eclipse
                                                        add repo path
                                                        add g++ to envt variables
                                                        choose compiler while opening project
                                                        if make not found- then choose cdt in project properties > c++ > Tools > CDT from drop down.
                                                        build and then run local application.
                                                        Remove launchbar- Windows -> Preferences -> Run/Debug -> Launching -> Launch Bar and uncheck Enable the Launch Bar
                                                printf was not printing as hoped- cuz using sysout type concatenation!- it was eating chars.
                                                Python plugin
                                                        download from https://sourceforge.net/projects/pydev/files/
                                                        drop contents into dropins folder of eclipse.
                                                        restart eclipse and give it python path for interpreter.
                                                        make a file inside project- give extension name.py- execute it, build not reqd.
                                                </Others>
                                        </IDE>
                                        <ObjectOriented>
                                            <Concepts>
                                                <Exception>
                                                            An exception object is created when a run-time error occurs like 5/0 instruction.
                                                            The system will crash in ugly way. Process will be killed.
                                                            It tells you what error occurred- 
                                                                    Java makes provision to avoid brute shutdown
                                                            Programmer programs steps to be taken (like giving apt error-message- informing failure to user) to deal with such situation.
                                                    <TryCatchFinally>
                                                        <try>
                                                            Try- by placing the vulnerable code within try block- your responsiblity entirely.
                                                        </try>
                                                        <catch>
                                                        Run time error? Exception is thrown- it gets captured by 1 of many catch blocks.
                                                                the sequence of which should follow specific to generic- else it's compile time error
                                                                        why? generic on top will hide specific to ever see light of the day.
                                                                        catch multiple exception types at once 
                                                                                catch(IOException | ArithmeticException ex)
                                                                        Ignore the Exception if you want
                                                                                catch (Exception e) {}
                                                                        This will catch any exception (This should always be last)
                                                                                catch (Exception e)
                                                                                {
                                                                                        System.out.println("I catch every exception");
                                                                                }
                                                                If none matches- process gets killed.
                                                                Addressal ways
                                                                        Your custom error message
                                                                                System.out.println("You can't divide by zero");
                                                                        Java's error message for this exception
                                                                                System.out.println(e.getMessage());
                                                                        Prints the exception name and error message
                                                                                System.out.println(e.toString());
                                                                        Prints the standard error stack trace
                                                                                e.printStackTrace();
                                                        </catch>
                                                        <finally>
                                                                gets executed in any case- exception happens,captured,notcaptured.
                                                                It is used for clean up work like closing files and database connections
                                                        </finally>
                                                    </TryCatchFinally>
                                                    <throws>
                                                        Escalate the Exception to the calling process to deal with it.
                                                                Place code that calls the method inside try block.
                                                                set called method throws IOException[,FileNotFoundException[,..]] (or specific)
                                                                The calling method gets to give more generic error message because of working at higher layer.
                                                                        Catch from the calling method- eg- Something went Wrong!!catch(IOException e){},catch(File.)
                                                    </throws>
                                                    <exceptionsViz>
                                                                    java.lang.RuntimeException
                                                                            exceptions that can be thrown during the normal operation of the Java Virtual Machine. These exceptions are your responsibility as a programmer

                                                                    ArithmeticException, ArrayStoreException, BufferOverflowException,

                                                                    BufferUnderflowException, CannotRedoException, CannotUndoException,

                                                                    ClassCastException, CMMException, ConcurrentModificationException,

                                                                    DOMException, EmptyStackException, IllegalArgumentException,

                                                                    IllegalMonitorStateException, IllegalPathStateException,

                                                                    IllegalStateException, ImagingOpException, IndexOutOfBoundsException,

                                                                    MissingResourceException, NegativeArraySizeException, NoSuchElementException,

                                                                    NullPointerException, ProfileDataException, ProviderException,

                                                                    RasterFormatException, SecurityException, SystemException,

                                                                    UndeclaredThrowableException, UnmodifiableSetException,

                                                                    UnsupportedOperationException

                                                                    java.lang.Exception : exceptions that are checked for by the java compiler

                                                                    AclNotFoundException, ActivationException, AlreadyBoundException,

                                                                    ApplicationException, AWTException, BackingStoreException,

                                                                    BadAttributeValueExpException, BadBinaryOpValueExpException,

                                                                    BadLocationException, BadStringOperationException,

                                                                    BrokenBarrierException, CertificateException, ClassNotFoundException,

                                                                    CloneNotSupportedException, DataFormatException,

                                                                    DatatypeConfigurationException, DestroyFailedException,

                                                                    ExecutionException, ExpandVetoException, FontFormatException,

                                                                    GeneralSecurityException, GSSException, IllegalAccessException,

                                                                    IllegalClassFormatException, InstantiationException,

                                                                    InterruptedException, IntrospectionException,

                                                                    InvalidApplicationException, InvalidMidiDataException,

                                                                    InvalidPreferencesFormatException, InvalidTargetObjectTypeException,

                                                                    InvocationTargetException, IOException, JAXBException, JMException,

                                                                    KeySelectorException, LastOwnerException, LineUnavailableException,

                                                                    MarshalException, MidiUnavailableException, MimeTypeParseException,

                                                                    MimeTypeParseException, NamingException, NoninvertibleTransformException,

                                                                    NoSuchFieldException, NoSuchMethodException, NotBoundException,

                                                                    NotOwnerException, ParseException, ParserConfigurationException,

                                                                    PrinterException, PrintException, PrivilegedActionException,

                                                                    PropertyVetoException, RefreshFailedException, RemarshalException,

                                                                    RuntimeException, SAXException, ScriptException, ServerNotActiveException,

                                                                    SOAPException, SQLException, TimeoutException, TooManyListenersException,

                                                                    TransformerException, TransformException, UnmodifiableClassException,

                                                                    UnsupportedAudioFileException, UnsupportedCallbackException,

                                                                    UnsupportedFlavorException, UnsupportedLookAndFeelException,

                                                                    URIReferenceException, URISyntaxException, UserException, XAException,

                                                                    XMLParseException, XMLSignatureException, XMLStreamException, XPathException
                                                            </exceptionsViz>
                                                    <CommonExceptions>

                                                            ArithmeticException: An arithmetic operation occurs with no answer (Division by Zero)

                                                            ClassNotFoundException: A class is called for that doesn't exist

                                                            IllegalArgumentException: A method has been passed an illegal argument

                                                            IndexOutOfBoundsException:
                                                                    Thrown when an index for an array, string is called for, but doesn't exist

                                                            InputMismatchException: (Part of NoSuchElementException)
                                                                    User enters the wrong data type into a Scanner method

                                                            IOException: An I/O operation failed

                                                    </CommonExceptions>
                                                    <Libraries>
                                                            import java.util.Exception;	//for exception to get noted.
                                                    </Libraries>
                                                </Exception>
                                                <ImportantLibs>
                                                                        import java.util.*;	//for all

                                                                        import java.util.Scanner; // Library that allows us to capture user input

                                                                        import java.util.*; // Allows me to check for InputMismatchException

                                                                        import java.io.*; // Allows for system input and output through data streams, serialization and the file system
                                                </ImportantLibs>
                                                <Inheritance>
                                                    <Superclass>
                                                            for subclasses make copies of it and make some changes.
                                                            protected- so that fields are transparent to children.
                                                                    to allow subclasses to be able to access methods or fields
                                                                    private their would be no way for subclasses to call this method
                                                            If unsuitable for child, it can override the defn in parent.
                                                            If parent wants to disable changes
                                                                    protected final means no1 should change it but accessible
                                                            call super's constructor using super(attribs)
                                                                    to get the default values of parents from child constructor.
                                                            using superclass ref to point subclass object possible because all methods of parent belong to child also
                                                                    This is polymorphism- Dynamic Method Dispatch- but if the parent's called method is also defined in child- child's version is used- more specific!
                                                                    can't call child's methods only. If you want to use it then typecast it back and do eth of child.
                                                            <Eg>
                                                                eg- Animal will act as a Super class for other Animals
                                                            </Eg>
                                                    </Superclass>
                                                </Inheritance>
                                                <Interface>
                                                            In Java, can't inherit from multiple classes
                                                            adding functionality thru interfaces.
                                                                    they are adjectives- to modify the noun-class.
                                                                    which method they must implement.
                                                                            public abstract methods by default. no need to specify.
                                                                    you can have public final attribs there- default don't need to specify also.
                                                            its compact nth much to it.

                                                            copy all methods to class that implements an interface (adding interface to its behavior)
                                                                    eg- Gear, ABC interface to real engine working.
                                                                    because you must implement the abstract methods.
                                                                    why public? must be as visible as interface so need to be public (can't be more restrictive).
                                                            any method can call these (interface) methods implemented by class and get response.
                                                    <AbstractClass>
                                                            whenever class where every method is not implementable.
                                                                    means to say you can't create objects for those classes- because not well defined method.
                                                            values of var not constants.
                                                            public abstract method at least 1.
                                                            write down extend that class for the implementing class.
                                                                    must implement abstract method.
                                                    </AbstractClass>
                                                    <ObjectClass>
                                                    Every class is implementation of object class by default.
                                                            so Object obj = new Vehicle();
                                                            obj.getSpeed()- is invalid so cast it b4 printing it.
                                                            obj.equals(veh);	//different vehicles.
                                                            obj.hashCode();		//unique code for every object.
                                                                                    //we will use it in hardcore coding life.
                                                            obj.getClass();		//smart to know whose object it it.
                                                            obj.getClass().getName();	//doesn't write 'class'
                                                                    //use to check if 2 objects are essentially same class' objects
                                                            obj.getClass().getSuperClass();		//who was superclass for it
                                                            override- toString- to tell how to implement for any class.
                                                                    obj.toString();
                                                    Making a clone of a class by implementing clonable interface.
                                                            need to catch it within try catch block- some goofy stuff.
                                                    </ObjectClass>
                                                </Interface>
                                                <Thread>
                                                A class run method which want to fork (for independent execution)should extend Thread class and implement run method (for DMM).
                                                    <ThreadClassMethods>
                                                            with method start
                                                                    forks a new thread
                                                                    Dynamic method dispatch calls run method of the child class that extends it.
                                                            method run
                                                                    overridden by the child class implementation.
                                                                    if threads generated happen to invoke a class method at the same time (influencing static variables or so-common). they may spoil others' work.
                                                        use synchronized keyword with the method- but slows java down dramatically.
                                                        or make object of ReentrantLock class and call lock and unlock methods in beginning and end.
                                                                import java.util.concurrent.locks.ReentrantLock;
                                                                    shares all the local variables, but objects pointed to are same.
                                                            sleeps(1000);
                                                                    process sleeps 4 1000ms. use anywhere anything. It's static
                                                            Synchronize- Concurrency
                                                                    use synchronize keyword with the method when 2 threads access same variable.
                                                            join()- when parent thread should wait until the referred thread is dead.
                                                            activeCount();	// thread active at present
                                                                    Iterate thru threads
                                                                    Thread[] listOfThreads = new Thread[Thread.activeCount()];
                                                            Thread.enumerate(listOfThreads);
                                                                    enumerate fills the Thread array with all active threads
                                                                    Cycle through all the active threads and print out their names

                                                                    for(Thread i : listOfThreads){
                                                                            System.out.println(i.getName());
                                                                    }
                                                            Priority
                                                                    Thread i.getPriority(); 
                                                                    i.setPriority(5);//1-10highest.
                                                    </ThreadClassMethods>
                                                    <ScheduledThreadPoolExecutor>
                                                            to schedule when certain events be triggered.
                                                            ScheduledThreadPoolExecutor eventPool = new ScheduledThreadPoolExecutor(5);
                                                            eventPool.scheduleAtFixedRate(new CheckSystemTime(), 0, 2, SECONDS);
                                                            shutdown();	//closes all the active threads at once including the main.
                                                    </ScheduledThreadPoolExecutor>
                                                    <Runnable>
                                                            extends should not be wasted- only 1 inherit from class!!
                                                            Make the forking class implement Runnable interface and implement run() method in there.
                                                            From calling method for fork- make an instance of thread class with runnable as parameter. call start method of this thread instance.
                                                                    Thread captures the forking class' object and gets it referred to by Runnable interface. when Runnable.run(); is invoked- forking class starts.
                                                    </Runnable>
                                                    <uncat>
                                                        Threads doing repetetive work of making a table- make it in constructor outside.
                                                                don't let threads do the same things!
                                                        What is most appropriate number of threads
                                                        Thread safety
                                                                when threads share a resource (updation)
                                                        Singleton call by threads- call static method of class which resets it member static boolean variable.
                                                        Done- synchronized is taken from method level to statements level- thereby reducing time taken by 100 operations in 1 place- depends on probability of 2 threads in same window at the time.
                                                        lesser points were getting written cuz simultaneous write call by different threads make mess.
                                                        synchronized method works but all statements in sync block doesn't- so scaled to 60K, even method didn't work
                                                        inserted 60K records works for both 11 thread and 121 threads but with synchronized for method not statements.
                                                        Synchronized may contain thread-unsafe methods- which give other threads chance to enter- used Semaphore mutex and problem was solved.
                                                                surprisingly removing the mutex from other class gave back 60k.
                                                                maybe cuz static variable of same name- getting confused.
                                                        Threads too many or too less
                                                            should end together else bottleneck for others (clogged system resources!!)
                                                            try it out- stackoverflow
                                                            Configurable threads to be spawned by performance check and spawning/closing as per need.
                                                    </uncat>
                                                </Thread>
                                                <Misc>

                                                // Allows you to convert from string to date or vice versa

                                                import java.text.SimpleDateFormat;
                                                        SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd");	//str to date
                                                p = new P(new Q()){
                                                        overrideMethod()
                                                        {}
                                                };	//makes a Q class object with method which overrides parent class.


                                                </Misc>
                                            </Concepts>
                                            <DS> 
                                                <Array>
                                                    <Declaration>
                                                        int[] myIntArray = new int[3];
                                                        int[] myIntArray = {1,2,3};
                                                        int[] myIntArray = new int[]{1,2,3};
                                                    </Declaration>
                                                    <libraries>
                                                            import java.util.Arrays;
                                                            also- import org.apache.commons.lang3.ArrayUtils;
                                                                    for indexOf(arr,a)
                                                     </libraries>
                                                    <Desc>
                                                            An array is a variable that can hold a bunch of values
                                                            Think of an array as a big box filled with other boxes
                                                            Each box has a number on it called an index that you use to access its specific value
                                                    </Desc>
                                                    <Rules>
                                                            An array can contain only values of the same type
                                                            An arrays size can't be changed once it is set
                                                            An array is an object
                                                    </Rules>
                                                    <Attribs>
                                                            length- for size
                                                    </Attribs>
                                                    <Methods>
                                                            <HLL> 
                                                                    attrib length
                                                            </HLL>
                                                            <Content>
                                                                    thru index,print using for loop,enhanced forLoop,binarySearch,printarray at once using toString.
                                                                    <enhancedForLoop>
                                                                        for(int row : numberArray)	// for(itemDataType tempVariable : arrayName)
                                                                        {
                                                                            System.out.print(row);
                                                                        }
                                                                        System.out.println("\n");
                                                                    </enhancedForLoop>
                                                                    <print>
                                                                        printing using toString(arr)- You can print out the whole array at once with toString
                                                                            System.out.println(Arrays.toString(numberCopy));
                                                                     </print>
                                                                    <binarySearch>
                                                                        returns the index for the searched for value
                                                                            If it doesn't find it it returns a negative number
                                                                            int whereIs50 = Arrays.binarySearch(numsToSort, 50);
                                                                            System.out.println(whereIs50);
                                                                    </binarySearch>
                                                            </Content> 
                                                            <Modification> 
                                                                    thru index,sort,fill,copyOf.
                                                            <copyOf> You can copy an array in a couple of ways
                                                                    Arrays.copyOf(arrayToCopy, numberToCopyFromBeginning);

                                                                    int[] numberCopy = Arrays.copyOf(numberArray, 5);
                                                                    for(int num : numberCopy)
                                                                    {
                                                                        System.out.print(num);
                                                                    }
                                                                    System.out.println("\n");

                                                                    Range of array
                                                                            You can copy an array from one index to another with copyOfRange
                                                                            int[] numberCopy = Arrays.copyOf(numberArray, 1, 5);	//???copyOfRange?
                                                            </copyOf>
                                                            <Fill>
                                                                    to define a default value
                                                                    Arrays.fill(arrayName, valueToFill);
                                                                    valueToFill must be the same for each element in the array
                                                            </Fill>
                                                            <Sort>
                                                                    Arrays.sort(numArr);
                                                            </Sort>
                                                            </Modification>
                                                            <Convert> 
                                                                    <toString>
                                                                            Convert Array into a String (comma separated?)
                                                                            System.out.println(Arrays.toString(numsToSort));
                                                                    </toString>
                                                            </Convert>
                                                    </Methods>        
                                                    <Declaration>
                                                    an array with the dataType[] arrayName
                                                            dataType[] arrayName = new dataType[sizeOfArray];
                                                            int[] randomArray; 	randomArray = new int[20];
                                                            int[] numberArray = new int[10];
                                                    </Declaration> 
                                                    <Assignment>
                                                            Individually, randomArray[1] = 2;

                                                            (time of creation)- set its values from the start 
                                                                    String[] stringArray = {"Just", "Random", "Words"};

                                                            add values with a loop- arrayName.length returns the number of elements in the array
                                                                    for(int i = 0; i < numberArray.length; i++)
                                                                        numberArray[i] = i;

                                                            <Eg>
                                                            Draws 41 lines on the screen
                                                                    int k = 1;
                                                                    while(k <= 41){ System.out.print('-'); k++; }
                                                                    System.out.println();
                                                                </Eg>

                                                            <Eg>Cycles through all of the boxes in the array and prints them
                                                            for(int j = 0; j < numberArray.length; j++)
                                                            {
                                                                System.out.print("| " + j + " ");
                                                            }
                                                            System.out.println("|");
                                                                    </Eg>
                                                    </Assignment>
                                                    <MultidimensionalArray>
                                                            All boxes packed into a bigger box- arr[10] into arr[3][10]- every arr[i] is a bigger box.
                                                            To but arrays in an array just add another []
                                                            <Attribs> length- for high level size,ie no of rows- arr[5][6]-5
                                                                    arr[i].length- for next level size,ie no of cols- arr[5][6]-6
                                                        </Attribs>
                                                        <Declaration>
                                                                    String[][] multiDArray = new String[10][10];
                                                            </Declaration>
                                                            <Eg> Adding values to a multidimensional array

                                                            for(int i = 0; i < multiDArray.length; i++)
                                                                for(int j = 0; j < multiDArray[i].length; j++)
                                                                            multiDArray[i][j] = i + " " + j;
                                                            </Eg>
                                                            <enhancedForLoop>
                                                                    for(String[] rows : multiDArray)
                                                                    {
                                                                        for(String column : rows)
                                                                                    System.out.print("| " + column + " ");
                                                                            System.out.println("|");
                                                                    }
                                                            </enhancedForLoop>
                                                            <fill>
                                                                    int[] moreNumbers = new int[100];
                                                                    Arrays.fill(moreNumbers, 2);

                                                                    char[][] boardGame = new char[10][10];
                                                                    for(char[] row : boardGame)
                                                                    {
                                                                        Arrays.fill(row, '*');
                                                                    }
                                                            </fill>
                                                    </MultidimensionalArray>
                                                </Array>
                                                <String>
                                                        A String is an object unlike the other primitive data types
                                                        A String is immutable, which means every time you change
                                                        a String a new version is created in memory.
                                                                Solution is StringBuilder, why it's a prob.
                                                    <Instantiation>
                                                                String randomString = "I'm just a random string";
                                                    </Instantiation>
                                                    <EscapeCodes>
                                                                If you want to use quotes in a string escape it with \
                                                                Always surround Strings with quotes " " and not Apostrophes ' '
                                                                String gotToQuote ="He said, \"I'm here\"";

                                                                /* Other common Escape Codes
                                                                 * \n : Newline
                                                                 * \b : Backspace
                                                                 * \' : Apostrophe
                                                                 * \" : Quote
                                                                 * \\ : Backslash
                                                                 */
                                                    </EscapeCodes>
                                                    <Method>
                                                                <HLL>
                                                                        length(),getClass();	//can't use getClass on char (it's a primitive type)
                                                                        length() returns the number of characters in a String
                                                                        System.out.println("Length of string: " + letters.length());
                                                                </HLL>
                                                                <Content>
                                                                        <Containment>
                                                                                charAt,Substring,indexOf,startWith,endsWith,contains.
                                                                                compare strings with equals or equalsIgnoreCase
                                                                                <charAt> 
                                                                                returns the character in a string
                                                                                        System.out.println("2nd Character: " + letters.charAt(1));
                                                                                </charAt>
                                                                                <contains>
                                                                                returns a boolean depending on whether the String contains the String you pass it
                                                                                        System.out.println(letters.contains("abc"));
                                                                                </contains>
                                                                                        <endsWith>
                                                                                        checks if the String ends with the String you pass
                                                                                        System.out.println(letters.endsWith("de"));
                                                                                </endsWith>
                                                                                <startsWith>
                                                                                works similar to endsWith()
                                                                                </startsWith>
                                                                                <indexOf>
                                                                                        returns the 1st index that matches the String passed
                                                                                        You can also specify the index to start searching from
                                                                                                System.out.println(letters.indexOf("cd"));
                                                                                                indexOf(StringToLookFor, IndexStartPosition)
                                                                                        </indexOf>
                                                                                <lastIndexOf>
                                                                                 works like indexOf except it starts from the end of the String you are searching
                                                                                </lastIndexOf>
                                                                        </Containment>
                                                                        <Comparison>
                                                                                compare,compareTo,
                                                                                        compareTo returns 0 if strings are equal
                                                                                                Returns a negative number if letters comes before moreLetters
                                                                                                Returns a positive number if letters comes after moreLetters
                                                                                                There is also a compareToIgnoreCase()
                                                                                                        System.out.println(letters.compareTo(moreLetters));
                                                                                        if(uppercaseStr.equals(lowercaseStr))
                                                                                            System.out.println("They're equal");
                                                                                        if(uppercaseStr.equalsIgnoreCase(lowercaseStr))
                                                                                                System.out.println("Same letters");			
                                                                        </Comparison>
                                                                </Content>
                                                                <Modification>
                                                                 +,replace,trim.
                                                                        <adding>
                                                                                with a +
                                                                                System.out.println(randomString + " " + gotToQuote);

                                                                                add other data type to the string with a +
                                                                                int numTwo = 2;
                                                                                System.out.println(randomString + " " + numTwo);
                                                                                System.out.println(str1+' '+str2);
                                                                        </adding>
                                                                        <replace>
                                                                                replace() replaces every occurrence of the first String with the second String you provide
                                                                                System.out.println(letters.replace("abc", "xy"));
                                                                        </replace>
                                                                        <trim>
                                                                                trim() gets rid of leading and trailing white space
                                                                                String randString = "   abc   ";
                                                                                System.out.println(randString.trim());
                                                                        </trim>
                                                                        <substring>
                                                                        returns a String starting at the first index through the last index provided
                                                                        System.out.println(letters.substring(1,4));
                                                                        </substring>
                                                                                <toUpperCase> 
                                                                                        converts all letters into uppercase
                                                                                        System.out.println(letters.toUpperCase());
                                                                                </toUpperCase>
                                                                                <toLowerCase></toLowerCase>
                                                                 </Modification>
                                                                <Conversion>
                                                                        <DT2String>
                                                                                String byteString = Byte.toString(bigByte);
                                                                                        String shortString = Short.toString(bigByte);
                                                                                        String intString = Integer.toString(bigInt);
                                                                                        String longString = Long.toString(bigByte);
                                                                                        String floatString = Float.toString(bigByte);
                                                                                        String doubleString = Double.toString(bigByte);
                                                                                        String booleanString = Boolean.toString(bigByte);
                                                                                        String charString = Character.toString(randomChar);//don't need to do this.
                                                                                        String str = Array.toString(arr);	//[1, 2, 3]
                                                                        </DT2String>
                                                                        <String2DT>
                                                                        Integer.parseInt("12Home");
                                                                        convert from String to primitives with parse{DataType}
                                                                                        int stringToInt = Integer.parseInt(intString);
                                                                                        parseSort, parseLong, parseByte, parseDouble,
                                                                                        parseBoolean, parseFloat
                                                                        </String2DT>
                                                                        <String2Array>
                                                                                split(",");
                                                                            String[] letterArray = letters.split("");
                                                                            You can create an array of Strings with split()
                                                                                    You define how to break up the String using a delimiter
                                                                                            If you had 123,456 and used the delimiter "," you would create the array [123,456]
                                                                        </String2Array>
                                                                        <toCharArray>
                                                                        inserts every character in the string into separate indexes in an array
                                                                        char[] charArray = letters.toCharArray();
                                                                        System.out.println(Arrays.toString(charArray));
                                                                        </toCharArray>
                                                                        <array2String>
                                                                                toString() converts the array into a String to print it
                                                                                System.out.println(Arrays.toString(letterArray));
                                                                        </array2String> 
                                                                </Conversion>
                                                        </Method>
                                                    <StringBuilder>
                                                            If you manipulate Strings a lot use a StringBuilder
                                                            It has a fixed space in memory
                                                                    StringBuilder randSB = new StringBuilder("A random string");
                                                            <Method>
                                                                    <capacity>capacity() returns the number of indexs for the SB
                                                                            System.out.println(randSB.capacity());
                                                                            </capacity>
                                                                            <ensureCapacity> increases the capacity for the SB
                                                                                    randSB.ensureCapacity(60);
                                                                                    System.out.println(randSB.capacity());
                                                                            </ensureCapacity>
                                                                            <length>
                                                                            returns the number of characters in the SB
                                                                                    System.out.println(randSB.length());
                                                                            </length>
                                                                            <trimToSize>
                                                                                    forces capacity to equal length
                                                                                    randSB.trimToSize();
                                                                            </trimToSize>
                                                                            <insert>
                                                                                    inserts at the index you provide anything
                                                                                            System.out.println(randSB.insert(1, "nother"));
                                                                            </insert>
                                                                            <append>        	
                                                                            adds anything to the end of a SB
                                                                                permanent effect on object
                                                                                    System.out.println(randSB.append(" again"));
                                                                            </append>
                                                                            <delete>
                                                                                    removes part of the SB from first index to the last
                                                                                    System.out.println(randSB.delete(15, 21));
                                                                            </delete>
                                                                            <deleteCharAt> 
                                                                                deleteCharAt(index) is used to delete individual chars
                                                                            </deleteCharAt>
                                                                            <toString>
                                                                            toString converts a SB into a String
                                                                                    String oldSB = randSB.toString();
                                                                            </toString>
                                                                            <others>
                                                                    /* StringBuilders also have the same methods as Strings
                                                                     * charAt(), indexOf(), lastIndexOf(), subString()
                                                                     */
                                                                            </others>
                                                            </Method>
                                                    </StringBuilder>
                                                </String>
                                                <Collections>
                                                    Collection classes were created to make it easy to keep track of groups of objects.
                                                    <ArrayList>
                                                        resizes itself automatically (diff from array)
                                                        easy to add to and delete from
                                                        <Library> 
                                                                import java.util.ArrayList; // The ArrayList library
                                                                import java.util.Iterator; // The Iterator Library

                                                        </Library>
                                                        <Methods>
                                                                <HLL>
                                                                size- arrayListName.size() returns the size of the ArrayList
                                                                </HLL>
                                                                <Content>
                                                                get,print(enhancedforloop),Iterator,hasNext,Contains,ContainsAll,isEmpty.
                                                                        <get>
                                                                        get(1)-retrieve values in an ArrayList with get
                                                                                for( int i = 0; i < names.size(); i++)
                                                                                    System.out.println(names.get(i));
                                                                        </get>
                                                                        <contains> returns a boolean value based off of whether
                                                                        ArrayList contains the specified object
                                                                        if(names.contains(paulYoung))
                                                                                {
                                                                                    System.out.println("Paul is here");
                                                                                }
                                                                        </contains>
                                                                        <containsAll> checks if everything in one ArrayList is in another ArrayList
                                                                                if(names.containsAll(nameCopy))
                                                                                {
                                                                                    System.out.println("Everything in nameCopy is in names");
                                                                                }
                                                                        </containsAll>
                                                                        <isEmpty> returns a boolean value based on if the ArrayList is empty
                                                                        if (names.isEmpty())
                                                                            System.out.println("The ArrayList is empty");
                                                                        </isEmpty>
                                                                        <EnhancedForLoop> 
                                                                            Enhanced for with an ArrayList
                                                                            for(String i : names)
                                                                            {
                                                                                System.out.println(i);
                                                                            }
                                                                            System.out.println(); // Creates a newline
                                                                        </EnhancedForLoop> 
                                                                        <Iterator>
                                                                            Before the enhanced for you had to use an iterator to print out values in an ArrayList
                                                                            Creates an iterator object with methods that allow you to iterate through the values in the ArrayList
                                                                            Iterator indivItems = names.iterator();
                                                                            hasNext- When hasNext is called it returns true or false
                                                                                    depending on whether there are more items in the list
                                                                                    while(indivItems.hasNext())
                                                                                    {
                                                                                        // next retrieves the next item in the ArrayList
                                                                                        System.out.println(indivItems.next());
                                                                                    }
                                                                        </Iterator>
                                                                        <print>
                                                                        print out the ArrayList itself the toString method is called
                                                                        System.out.println(names);
                                                                        </print>
                                                                </Content>
                                                                <Modification> add(),set,remove,removeRange,clear
                                                                        <add>
                                                                                add elements to an ArrayList
                                                                                        names.add("John Smith");
                                                                                        names.add("Mohamed Alami");
                                                                                can add an element in a specific position
                                                                                names.add(2, "Jack Ryan");
                                                                        </add>
                                                                        <set> replace a value using the set method
                                                                        names.set(0, "John Adams");
                                                                 </set>
                                                                <remove> an item with remove
                                                                        names.remove(3);
                                                                </remove>
                                                                <removeRange>
                                                                                eg- remove the first and second item with
                                                                                names.removeRange(0, 1);
                                                                 </removeRange>
                                                                 <Clear> deletes everything in the ArrayList
                                                                        names.clear();
                                                                 </Clear>
                                                                </Modification>
                                                                <ConversionCopy>
                                                                        // toArray converts the ArrayList into an array of objects
                                                                        moreNames = nameCopy.toArray();

                                                                        // toString converts items in the array into a String
                                                                        System.out.println(Arrays.toString(moreNames));
                                                                        <copy>
                                                                // addAll adds everything in one ArrayList to another
                                                                        nameCopy.addAll(names);
                                                                        System.out.println(nameCopy);

                                                                        String paulYoung = "Paul Young";

                                                                        // You can add variable values to an ArrayList
                                                                        names.add(paulYoung);
                                                               </copy>
                                                                </ConversionCopy>
                                                        </Methods>
                                                        <Instantiation>
                                                                ArrayList arrayListOne;	//Instance Variable
                                                                arrayListOne = new ArrayList();		//contents default to "object" class type.
                                                                                Declaring size and data type is not necessary
                                                                        can define the datatype of elements
                                                                                <!-- ArrayList<String> names = new ArrayList<String>(); -->
                                                        </Instantiation>
                                                    </ArrayList>
                                                    <LinkedList>
                                                            a collection based on a Linked List

                                                            particularly good when you expect to perform many additions and deletions with a collection
                                                            When using a linked list you don't have to move items around when you add or delete an item
                                                            aren't particularly suited to providing access based off of index searches like an array though
                                                            Each object in a linked list contains a pointer to the objects that proceed and follow it.
                                                            When you change an ArrayList a new array is created by it.

                                                        <Library>
                                                                import java.util.Arrays;
                                                                import java.util.LinkedList; // LinkedList Library methods
                                                        </Library>
                                                        <Instantiation>
                                                                Can Create a LinkedList that contains Strings
                                                                        LinkedList linkedListOne = new LinkedList();
                                                                        <!--LinkedList<String> names = new LinkedList<String>();-->
                                                                Can Copy
                                                        </Instantiation>
                                                        <Method>
                                                            <HLL>
                                                                    Size- Get the number of items in the list with size
                                                                            System.out.println("How many values: " + names.size());
                                                            </HLL>
                                                            <Modification>
                                                                add,addLast,addFirst;set;remove,removeFirstOccurrence,clear,poll,pollLast (deletes and fetches)
                                                                    push puts a new element on the front of the list
                                                                    nameCopy.push("Noah Peeters");
                                                                    pop removes an element on the front of the list
                                                                            nameCopy.pop();
                                                                                    clear() deletes everything in the Linked List    	
                                                            names.clear();
                                                            add to add items to the Linked List
                                                                            names.add("Ahmed Bennani");
                                                                            names.add("Ali Syed");
                                                            addLast places the object last in the list
                                                                            names.addLast("Nathan Martin");
                                                            addFirst places the object first in the list
                                                                    names.addFirst("Joshua Smith");
                                                            define what position to place the object in
                                                                    names.add(0, "Noah Peeters");
                                                            You replace a value in an index with set()
                                                                    names.set(2, "Paul Newman");
                                                            remove items either by providing the index, or the value
                                                                            names.remove(4);
                                                                    names.remove("Joshua Smith");
                                                                    removeFirst() removes the first element
                                                                    removeLast() removes the last element
                                                                            removeFirstOccurrence(Object) removes the first Object that matches what you passed
                                                                    poll() returns the first value and deletes it from the list
                                                                            System.out.println("Remove first element: " + nameCopy.poll());
                                                                    pollLast() returns the last value and deletes it from the list
                                                                            System.out.println("Remove last element: " + nameCopy.pollLast());
                                                            </Modification>
                                                            <Content> 
                                                                get(1),getFirst,getLast,contains,containsAll,isEmpty,printLL (no conversion) and forLoop,indexOf,peek,poll,pollLast(deletes and fetches),push,pop
                                                                <contains>
                                                                if(names.contains("Noah Peeters"))
                                                                        System.out.println("\nNoahs Here");
                                                                </contains>
                                                                <containsAll>
                                                                    Check if everything in one list is in another
                                                                            if(names.containsAll(nameCopy))
                                                                                System.out.println("\nCollections are the same");
                                                                </containsAll>
                                                                <IndexOf>
                                                                    IndexOf- Return the index for an object with indexOf
                                                                        System.out.println("\nIndex of Ali is: " + names.indexOf("Ali Syed"));
                                                                </IndexOf>
                                                                <IsEmpty>
                                                                Check if a list is empty with isEmpty()
                                                                        System.out.println("List Empty: " + names.isEmpty());	//true/false
                                                                </IsEmpty>
                                                                <peek> 
                                                                retrieves the first element, but doesn't throw an error if there is no element to retrieve
                                                                        System.out.println("Look without error: " + names.peek());
                                                                </peek>
                                                                <poll> 
                                                                returns the first value and deletes it from the list
                                                                                System.out.println("Remove first element: " + nameCopy.poll());
                                                                </poll>
                                                                <pollLast> returns the last value and deletes it from the list
                                                                        System.out.println("Remove last element: " + nameCopy.pollLast());
                                                                </pollLast>
                                                                <enhancedFor>
                                                                 to print them out
                                                                        for(String name : names)
                                                                            System.out.println(name);
                                                                </enhancedFor>
                                                                <get>
                                                                You can retrieve values with get()
                                                                        System.out.println("\nFirst Index: " + names.get(0));
                                                                </get>
                                                                <getFirst>
                                                                Retrieve the first value with getFirst()
                                                                        System.out.println("\nFirst Index: " + names.getFirst());
                                                                </getFirst>
                                                                <getLast>
                                                                Retrieve the Last value with getLast()
                                                                        System.out.println("\nLast Index: " + names.getLast());
                                                                </getLast>
                                                                <print>
                                                                Print out the LinkedList itself the toString method is called
                                                                        System.out.println("\nnameCopy: " + nameCopy);
                                                                </print>
                                                            </Content>
                                                            <Conversion>
                                                                    <toArray>
                                                                            Check if an object is in the list with contains()
                                                                            toArray converts the LinkedList into an array of objects
                                                                            nameArray = names.toArray();
                                                                    </toArray>
                                                                    <toString> 
                                                                    converts items in the array into a String
                                                                                    System.out.println(Arrays.toString(nameArray));
                                                                    </toString>
                                                                    <Copy>
                                                                        <!--    LinkedList<String> nameCopy = new LinkedList<String>(names);-->
                                                                    </Copy>
                                                            </Conversion>
                                                        </Method>
                                                    </LinkedList>
                                                    <uncat>
                                                        only 1 record- cuz had .clear() for the map which gets written to csv.
                                                    </uncat>
                                                </Collections>
                                            </DS>
                                            <PersistentStorage>
                                                BinaryFile
                                                ImageIO
                                                ObjectOutputStream
                                                XML APIs
                                                <File>
                                                File
                                                        import java.io.*;

                                                        static File randomDir, randomFile, randomFile2;
                                                        Creates a File object in memory

                                                                randomDir = new File("/Users/derekbanas/Documents/workspace3/Java Code/Random");

                                                        Make a directory

                                                                randomDir.mkdir();

                                                        // Make a file object in memory for file named random.txt
                                                        // Make a file object and define where to save it in the file system
                                                                randomFile = new File("random.txt");
                                                                randomFile2 = new File("/Users/derekbanas/Documents/workspace3/Java Code/Random/random2.txt");


                                                        createNewFile creates the file in the file system

                                                                randomFile.createNewFile();
                                                                randomFile2.createNewFile();

                                                        Return the path for the file

                                                                filePath = randomFile.getCanonicalPath();

                                                                createNewFile and getCanonicalPath have to be called in a try block to catch IOException

                                                        // Check to see if the file exists in the current directory

                                                                randomFile.exists(){

                                                            System.out.println("File Exists");

                                                        is readable
                                                                randomFile.canRead();

                                                        is writable
                                                                randomFile.canWrite();
                                                        File location: " + filePath;
                                                        File name
                                                                randomFile.getName();


                                                        Parent directory
                                                                randomFile.getParent();
                                                                parentDirectory = randomFile2.getParent();
                                                                    // Since you created the file without defining a path this returns null 
                                                                    // This returns the parent because it was defined
                                                        Is this a directory
                                                                randomDir.isDirectory();

                                                        list all the files
                                                                provides a string array containing all files

                                                                String[] filesInDir = randomDir.list();

                                                                for(String fileName : filesInDir){
                                                                        System.out.println(fileName + "\n");
                                                                }


                                                        Is this a file: " + randomFile.isFile();

                                                        Is this hidden: " + randomFile.isHidden();



                                                        "Last modified: " + randomFile.lastModified();
                                                                // Milliseconds since Jan 1, 1970 when modified
                                                        Return size of file
                                                                randomFile.length();

                                                        Changes the name of the file

                                                                randomFile2.renameTo(new File("/Users/derekbanas/Documents/workspace3/Java Code/Random/random3.txt"));

                                                        Output the full path for the file unless the path wasn't defined when the File was created

                                                                System.out.println("New Name: " + randomFile2.toString());

                                                        You call delete to delete a file

                                                                if(randomFile.delete()){
                                                                    System.out.println("File Deleted");
                                                                }

                                                        Array of Files under directory
                                                                // I could get an array of File objects from the directory

                                                                File[] filesInDir = randomDir.listFiles();

                                                        Delete a Directory

                                                                for(File fileName : filesInDir){
                                                                    fileName.delete();
                                                                }

                                                                // You can only delete a directory if it is empty

                                                                if(randomDir.delete()){
                                                                    System.out.println("Directory Deleted");
                                                                }

                                                Creates a file chooser at the location specified

                                                        JFileChooser fileChooser = new JFileChooser(randomDir);

                                                Opens the file chooser

                                                        fileChooser.showOpenDialog(this);

                                                How to Write into a File??

                                                // A character stream is just a series of characters Important information is normally separated by a comma, space, or tab.
                                                Create an array of type Customer
                                                        Customer[] customers = getCustomers();
                                                            // Creates an array of Customer Objects

                                                            private static Customer[] getCustomers(){

                                                                Customer[] customers = new Customer[5];

                                                                customers[0] = new Customer("John", "Smith", 21);

                                                                customers[1] = new Customer("Sally", "Smith", 30);

                                                                customers[2] = new Customer("Paul", "Ryan", 21);

                                                                customers[3] = new Customer("Mark", "Jacobs", 21);

                                                                customers[4] = new Customer("Steve", "Nash", 21);

                                                                return customers;

                                                            }

                                                PrintWriter is used to write characters to a file in this situation

                                                        FILE listOfNames = createFile("/Users/derekbanas/Documents/workspace3/Java Code/src/customers.txt");
                                                        PrintWriter infoToWrite = new PrintWriter(
                                                                                        new BufferedWriter(
                                                                                                new FileWriter(listOfNames))); 

                                                                        // FileWriter is used to write streams of characters to a file

                                                                        // BufferedWriter gathers a bunch of characters and then writes them all at one time (Speeds up the Program)

                                                                        // PrintWriter is used to write characters to the console, file

                                                        for(Customer person : customers){
                                                                createCustomers(person, custOutput);
                                                        }


                                                        Closes the connection to the PrintWriter
                                                                custOutput.close();

                                                        // Writes the string to the file
                                                                custOutput.println(custInfo);
                                                BufferedReader- to Read from file
                                                        // Read info from the file and write it to the screen
                                                                // Open a new file connection for reading
                                                                File listOfNames = new File("/Users/derekbanas/Documents/workspace3/Java Code/src/customers.txt");

                                                                BufferedReader getInfo = new BufferedReader(

                                                                    new FileReader(listOfNames));
                                                                        // FileReader reads character files

                                                                        // BufferedReader reads as many characters as possible


                                                                        getInfo.readLine();
                                                                                // readLine returns null when the end of the file is reached
                                                                                // Reads a whole line from the file and saves it in a String
                                                                                String[] indivCustData = custInfo.split(" ");
                                                                                int custAge = Integer.parseInt(indivCustData[2]);

                                                        // Can be thrown by FileReader
                                                        BufferReader is separate for every file and needs to be closed b4 outputting.

                                                Possible Exceptions
                                                        catch (FileNotFoundException e) {}

                                                        catch(IOException e){}
                                                FileRead
                                                    Path filePath = new File(ClientProperties.getRowkeyFilePath()).toPath();
                                                    Charset charset = Charset.defaultCharset();        
                                                    List< String > stringList = Files.readAllLines(filePath, charset);
                                                </File>
                                                <JDBC>
                                                JDBC
                                                Hydrabad (Java application)- sw (DB App) gold present very cheap (1Re per kg)
                                                        A translator (Driver software) to communicate to them in their local language.
                                                        connectivity- road (connection) built to reach there- build a road to reach there.
                                                                some vehicle (statement object) to use that connection- place my requirement (SQL Query) on the vehicle with money.
                                                                the box (Result set) of product is kept in vehicle
                                                        @road gold story is JDBC.
                                                        Java application wants to connect with DB- different terminology- the converter to act as middleman is driver software.
                                                                connection is established to reach out to DB. We place sql query on statement object and sent over connection to DB and returns result set.
                                                                Driver- converts java calls into DB calls and vv.
                                                        1. first arrange for driver- class.forname("oracle.jdbc.OracleDriver")- loading or registering ojdbc6.jar.
                                                                after jdbc 4.0 it is done automatically from class path.
                                                        2. Connection con = DriverManager.getConnection("jdbc:oracle:thin@localhost:1521:WE", "scott","tiger");
                                                        3. Statement st = con.createStatement();
                                                        4. ResultSet rs = st.executeQuery("Select * from gold_diamond");
                                                            stmt.executeQuery("query;");
                                                        5. while(rs.next())
                                                                sop(rs.getString("item")+rs.getInt("name"));
                                                Setup JDBC in Eclipse

                                                        There are a couple of ways to setup JDBC in Eclipse. First You need to get JDBC Connector.

                                                        The easiest way on Macs and PCs is to configure the build path in Eclipse:

                                                            In Eclipse Right click on your Project folder
                                                            Click Build Path and Configure Build Path
                                                            Click the Library tab
                                                            Click Add External jars and locate the file named mysql-connector-java-5.1.19-bin.jar

                                                        Setup JDBC the Easy Way on Macs

                                                        Just copy the jar file above to the directory /System/Library/Java/Extensions. That is it!

                                                        Setup JDBC on PCs by Adding to the ClassPath

                                                            Open Control Panel and double click on System
                                                            Click the Advanced Tab
                                                            Click Environment Variables
                                                            At the end of the classpath add ;c:\the location of mysql-connector-java-5.1.19-bin.jar




                                                        // The API for accessing and processing data stored in a database

                                                Libraries

                                                        import java.sql.*;

                                                connection object is used to provide access to a database
                                                        Connection conn = null;

                                                        Class.forName("com.mysql.jdbc.Driver");
                                                                // The driver allows you to query the database with Java

                                                                // forName dynamically loads the class for you

                                                        conn = DriverManager.getConnection("jdbc:mysql://localhost/customer","mysqladm","turtledove");
                                                                // DriverManager is used to handle a set of JDBC drivers

                                                                // getConnection establishes a connection to the database

                                                                // You must also pass the userid and password for the database


                                                        Statement sqlState = conn.createStatement();
                                                                // Statement objects executes a SQL query

                                                                // createStatement returns a Statement object


                                                                String selectStuff = "Select first_name from customer";
                                                                        // This is the query I'm sending to the database



                                                                ResultSet rows = sqlState.executeQuery(selectStuff);
                                                                        // A ResultSet contains a table of data representing the

                                                                        // results of the query. It can not be changed and can

                                                                        // only be read in one direction



                                                                         while(rows.next()){	
                                                                                // next is used to iterate through the results of a query

                                                                                System.out.println(rows.getString("first_name"));

                                                                            }

                                                                        }



                                                        catch (SQLException ex) {}

                                                        catch (ClassNotFoundException e) {}








                                                How to Load the Database

                                                You’ll need to do the following to read info from the database:

                                                    Open MySQL and create a database with CREATE DATABASE samp_db;
                                                    Type the following USE samp_db;

                                                Exit MySQL and download these files:

                                                    create_president.sql
                                                    insert_president.sql

                                                Then execute these to commands in your terminal (outside of MySQL):

                                                    mysql5 -u YOURUSERID -p < YOUR create_president.sql LOCATION
                                                    mysql5 -u YOURUSERID -p < YOUR insert_president.sql LOCATION

                                                Use your USERID and PASSWORD. Point to the locations for where you saved the files above. That’s it.

                                                Code from the Video
                                                </JDBC>
                                            </PersistentStorage>
                                            <IO>
                                                Logger- refer maintenance tag.
                                                Properties file
                                                FileReader- 
                                                        Precaution- no trailing space after semi-colon. Else array size is mistaken- solved using trim() b4 calling.
                                                CommandLine arguments- captured in args of main
                                                        using options- org.apache.commons.cli.Option
                                                JSONParsing
                                                        IOUtils.toString(new FileInputStream(fileName));
                                                        (JSONObject) JSONSerializer.toJSON(jsonTxt);

                                                        getJSONObject throws error on no output but getString doesn't- it safely comes back saying null.
                                                                catch (ClassCastException e) {
                                                                        logger.info("Can't typecast from JSON to String- check your cascade path is too short!");
                                                                } catch (JSONException e) {
                                                                        logger.info("JSONObject not found- check the cascade complex parts");
                                                                } catch (Exception e) {
                                                                        e.printStackTrace();
                                                                }
                                            </IO>
                                        </ObjectOriented>
                                        <uncat>
                                            QueryObject is dangling pointer problem- No!!
                                            Aggregation won't cause dangling pointer only composition can.
                                            Misbehaving API- after adding external sources, just ensure import statements refer to complete pathname thru ctrl+shift+T.
                                            Singleton connection object in thread envt
                                                a flag to make singleton class object- didn't work
                                                cuz different workspaces for those static variables.
                                            class file not executable so no virus and source code ppl may not wanna share so has an edge.
                                            java.exe is the executable that has binary code to run on cpu - that is the file we invoke thru command prompt.
                                                    it is this file that knows how to interpret class file to execute it as user wanted - JIT are all its feat.
                                        </uncat>
                                    </Java>
                                </OOPL>
                                <Others> 
                                    About - 
                                        These don't make functions compulsory for program but consume lots of functions in real world practice.
                                        They facilitate loops and variable updates and system states and so are not declarative or functional in strict sense 
                                            but application wise can be thought so with liniency for programmers to have more facilities.
                                            R and Javascript do support specifying only "what" and not just "how" but declarative means that you go with "what".
                                                any procedural programming language can write a declarative progrma but that doesn't make it declarative. We are talking paradigm.
                                            it's like every PL want to support any many features as possible and don't care so much of corroborating to drawn lines in acads.
                                                and features are much more than paradigms - event driven paradigm should rather be thought of as a language feature.
                                    R Language - strictly speaking
                                    <Javascript>
                                        About - Good Links
                                            https://softwareengineering.stackexchange.com/questions/127672/is-javascript-a-functional-programming-language
                                            https://www.quora.com/JavaScript-is-Object-oriented-or-Functional-programming-language
                                        Syntax
                                            Variables
                                            Operators
                                            conditional - if else, switch.
                                            iterative - while, for, for in, controls.
                                            Functions - 
                                                nested function (scope limited), 
                                                function constructor (created at runtime - new Function("x","y","x*y").
                                                function literal - anonymous function - can be assigned to a variable.
                                            Objects - Objects, numbers, boolean, string, arrays, date, Math, Regex, DOM.
                                        Features
                                            Closure
                                            <JavaBrains>
                                                <Intro></Intro>
                                                <ObjectsAndPrototypes></ObjectsAndPrototypes>
                                                <ScopesAndClosures>
                                                    IIFE
                                                    Read Write
                                                    Windows object
                                                    Compilation Interpretation
                                                    Global Scope
                                                    Hoisting
                                                    strict mode
                                                    closures
                                                    callback
                                                    Module pattern
                                                    Aysnc
                                                </ScopesAndClosures>
                                            </JavaBrains>
                                    </Javascript>
                                    <Typescript>
                                        Syntax
                                            Types - any, 
                                                builtin - number, string, boolean, void, null, undefined.
                                                user defined - arrays, enums, classes, interfaces.
                                            Variables
                                            Operators
                                            Conditional
                                            Iterative
                                            Functions
                                            Types Detailed - Number, string, arrays, tuples, Union, Interface, Class, Object, namespace, module, ambient.
                                        Featurs
                                            Generics
                                            Decorators
                                            <JavaBrains>
                                                Declarations
                                                Arrays Tuples
                                                type errasure error behavior
                                                typing with functions, implicit typing, any and union types
                                                classes, methods, constructor
                                                inheritance, polymorphism, interface, ducktyping
                                                member visibility, readonly modifier, enums, generics.
                                                Modules, compiler args, tsconfig, npm project
                                                dependencies, model classes creation, 
                                                api request creation. Call service and troubleshooting.
                                                convert response to model object
                                                callbacks and handling repo response
                                                chaining calls and accepting command line args
                                            </JavaBrains>
                                    </Typescript>
                                    Misplaced - NodJS, Express, Lerna, Mocha Chai, NPM.
                                    <Python>
                                        Link
                                            https://www.edureka.co/community/31489/is-python-fully-object-oriented
                                            https://www.tutorialspoint.com/is-python-object-oriented-or-procedural
                                        Installing python in centos	
                                                yum install -y centos-release-SCL
                                                yum install -y python27
                                                Verify- whereis python, which python, import sys;sys.executable;sys.exec_prefix;
                                        Removing python
                                                a bad idea- many apps might depend on it!
                                        Yum Gone Bad
                                                St yum goes bad after upgrading python-
                                                        find / -type f -executable -name 'python2*'
                                                                import yum (check which one returns success)
                                                                ln -s /usr/bin/python2.x /usr/bin/python- update python link to use 2.x which has yum package inside
                                                                OR edit usr/bin/yum- Replace #!/usr/bin/python2.6 (aptly) and rm -rf /usr/bin/python; ln -s /usr/local/bin/python2.7 /usr/bin/python 
                                                                        (but this one doesn't work if yum not a package inside!!)
                                                                python 3 doesn't support yum!!
                                        Download python3.6.exe- follow the wizard- customized version- install for all users in progra~1
                                                set the envt variables to python.exe and Scripts/pip.exe
                                                Use IDLE
                                        Ubuntu Python install
                                                download from https://www.python.org/ftp/python/3.6.1/
                                                tar xvf Python*.tar.gz (it's not gunzipped)
                                                cd Python-2.7.6
                                                ./configure --prefix=/usr/local
                                                make && make altinstall 
                                                        (vs install- replacing the system installed version command with new one)
                                                update $PATH
                                        Python pick a random word
                                                >>> import random
                                                >>> a = ["Stack", "Overflow", "rocks"]
                                                >>> print(random.choice(a))
                                        Install anaconda
                                                start Jupyter- web ui opens and use spyder for RStudio like IDE shell.
                                        Upgrade pip- python -m pip install -U pip setuptools
                                                pip install file.whl
                                        <TP>
                                            Python is a general-purpose interpreted, interactive, object-oriented, and high-level programming language
                                                    highly readable, English keywords frequently instead of punctuations (unlike other languages)- fewer syntactical constructions
                                                    interpreted - processed at runtime by the interpreter; not need to compile
                                                    Interactive - with interpreter while running. Python prompt supported.
                                                            allows interactive testing and debugging of snippets of code.
                                                    Object-Oriented - to encapsulate your code.
                                                    Beginner's Language - supports the development of a wide range of applications from simple text processing to WWW browsers to games.
                                                    characteristics
                                                            All Language types - supports functional and structured programming methods as well as OOP.
                                                            scripting language - can be used as a scripting language or can be compiled to byte-code for building large applications.
                                                                    scripting languages do not require the compilation step and are rather interpreted.
                                                            dynamic data types and checking - high-level dynamic data types and supports dynamic type checking
                                                            garbage collection - automatic
                                                            easy integrated - with C, C++, COM, ActiveX, CORBA, and Java
                                                    Applications of Python
                                                            Applications of Python, read, maintain, portable, 
                                                            wide variety of hardware platforms and has the same interface on all platforms.
                                                            Extendable - add your own low-level modules to the Python interpreter.
                                                            Databases - interfaces available for all.
                                                            GUI Programming
                                                            Scalable
                                                    Installation
                                                            binary file installation 
                                                                    If the binary code for your platform is not available, you need a C compiler to compile the source code manually. Compiling the source code offers more flexibility in terms of choice of features that you require in your installation.
                                                                    cmd = path %path%;C:\Python and press Enter.
                                                            Linux - download, extract, set file edit, run ./configure script, make, make install.
                                                                    installs Python at standard location /usr/local/bin and its libraries at /usr/local/lib/pythonXX
                                                                    export PATH="$PATH:/usr/local/bin/python"
                                                    Run
                                                            python [options] [file_name] - without file name prompt opens for run.
                                                    IDE
                                                            Unix − IDLE is the very first Unix IDE for Python.
                                                            PythonWin is the first Windows interface for Python
                                                    Language
                                                            Blocks
                                                                    Class starts with caps, underscore in start indicates private, underscore in end that it is language specific special name.
                                                                    Blocks of code are denoted by line indentation, which is rigidly enforced. continuous lines indented with same number of spaces would form a block
                                                                            number of spaces in the indentation is variable, but all statements within the block must be indented the same amount
                                                            Multiline
                                                                    total = item_one + \
                                                                            item_two + \
                                                                            item_three
                                                                    days = ['Monday', 'Tuesday', 'Wednesday',
                                                                            'Thursday', 'Friday']
                                                            String constants
                                                                    word = 'word'
                                                                    sentence = "This is a sentence."
                                                                    paragraph = """This is a paragraph. It is
                                                                    made up of multiple lines and sentences."""
                                                            Comments
                                                                    # First comment
                                                                    print "Hello, Python!" # second comment
                                                                    '''
                                                                    This is a multiline
                                                                    comment.
                                                                    '''
                                                            Input
                                                                    raw_input("\n\nPress the enter key to exit.")
                                                            Multiple statements in single line
                                                                    import sys; x = 'foo'; sys.stdout.write(x + '\n')
                                                            Compound or complex statement
                                                                    header:
                                                                            suite
                                        </TP>
                                    </Python>
                                </Others>
                            </Types>
                        </StructuredPL>
                        Non-structured - uses goto and branch tables, etc - oldie style.
                    </ImperativePL>
                    <DeclarativePL>
                        Criteria - style of building the structure and elements of computer programs—that expresses the logic of a computation without describing its control flow.
                            specify the "what" and not "how". Eg - Database Query Language - SQL.
                            don't support variable update - don't support statements but only computational declarations. We are supposed to solve problem only using that.
                            Equivalent of if else is ternary conditional operator and loop is recursion - you are gonna declare computations and not make any control statement.
                        considers programs as theories of a formal logic, and computations as deductions in that logic space
                        <FunctionalPL>
                            no operators,only functions and no sequential exec.
                            type of Declarative language.
                            seeks to describe what you want done rather than specify how you want something done.
                            requires orders of magnitude less code than imperative programming
                            fewer points of failure, less code to test, and a more productive (and, many would say, happier) programming life
                            Criteria 
                                Procedure : Imperative :: Functional : Declarative.
                                Solve problem in terms of functions. Program not necessarily composed of functions but a set of functions solve a problem.
                            Pillars of Functional Progamming
                                ref - https://sigma.software/about/media/pillars-functional-programming-part-1
                                Immutability - object has no state; changing state makes it new object.
                                Purity - no side effect - always same result for args.
                                First-class functions - higher order if function data types can be passed as arg and returned but create function at runtime makes it first class.
                                    From OO perspective, Function as data type can be thought as - consider a function signature as an interface, while every function with such signature is a respective implementation of such interface.
                                        so polymorphism is just change of data types value.
                                    THE AFTERMATH
                                        Closures
                                        Partial Application
                                        Lazy evaluation
                                Recursion - iteration involves state change of loop variable so always use recursion.
                            Eg - LISP.
                            Eg - Haskell - no update, no if else, no loops, but functional support for all I/O console, file, operators, etc.
                        </FunctionalPL>
                        <LogicBasedLanguages>
                            Model system on rules and infer from them.
                            Eg- Prolog.
                            Eg - 
                            canfly(X) :- bird(X), not abnormal(X).
                            abnormal(X) :-  wounded(X).
                            bird(john).
                            bird(mary).
                            wounded(john).
                            :- canfly(X)
                        </LogicBasedLanguages>
                        DomainSpecific - SQL
                        Funtional Reactive
                    </DeclarativePL>
                    scripting languages do not require the compilation step and are rather interpreted.
                </ProgrammingParadigms>
            </Programming>
            Exit Criteria - Unit Testing and Component Testing
                Unit Testing
                    Code Review, Path traced, Conditional, Loop testing, Dataflow testing, Error Testing
                Component Testing - replace code with real life entities - it's end result on GUI for eg.
            <Misc>
                Responsive graphics coding
                    https://www.youtube.com/watch?v=N60lBZDEwJ8
                    https://www.youtube.com/watch?v=-sYRiqVWi3Y
                    https://www.youtube.com/watch?v=S6X_MON1b44
                    https://www.youtube.com/watch?v=gvasFrzjpsI
            </Misc>
        </CodingImplementation>
        <Integration>
            <Build>
                What
                Why
                How- Concept- Topological Sort on dependencies.
                    <Make>

                    </Make>
                    <ANT>

                    </ANT>
                    <Maven>
                            why
                                    building tool similar to ant
                                            multiple jars problem- let's say I am developing a web application, hibernate and spring- make all jars available- bundle for deployment.
                                            Dependencies and versions- compatibility issues- 
                                                    intel comes from remote repositories and mvn talks to them thru internet.
                                                            contains archetype info (folder structure) and dependency info (other jars)
                                            Project structure- web app- folder structure be proper
                                            Buidling publish and deploy
                                    project management tool- helps in dependency management
                            How
                                    download binary zip file- unzip it
                                    set up envt variables- export M2_HOME=/home/saur/java/apache-maven-2
                                            export PATH=/home/saur/java/apache-maven-2/bin:${PATH}
                                            check- mvn --version
                                    Make project
                                            maven plugin for eclipse
                                                    Help > install software > all available sites > maven > integration with eclipse > install
                                                    pom.xml > right click > maven > Add Dependency, Add Plugin, etc;
                                                            Run As > maven build > maven install > maven clean etc.
                                                    Mew maven > uncheck skip archetype > use filters- give coordinates
                                                            pom.xml gui tabs to edit
                                                            pom.xml > mvn build... > Goals: jetty:run on base dir- project > run.
                                                            jetty scanning for changes in code so no heck rebilding code.
                                            mkdir myapp & cd myapp & mvn archetype:generate- for first time, all plugins are downloaded (archetypes)
                                                    list of archetype- models of project structures- different type apps. (106 default) 
                                                            (download that archetype info)- layout of files, folder structure.
                                                            Eg- j2ee14 for webapp.
                                                    version take latest
                                                    Maven coordinates- 
                                                            for artifact identification- for 7 to consume ours later (an ecosystem)
                                                            Group id = package for components (eg- org.kaushik)
                                                            artifact id = App/Project name (eg- MavenTestApp)- output of our project. We at siemens bam may have 5 artifact ids.
                                                            version- 1.0-snapshot (default)- 1.0 cuz starting and snapshot means under devp. mark as release on release.
                                                    package property- taken as groupid (fine)
                                                    Name- project name for id.
                                                    Result- created MavenTestApp- containing pom.xml and dir structure for app.
                                                            src folder contains main and Test (JUnits)- packaging as per groupId.
                                                            pom.xml- conf for build life cycle- latter encompass previous one and rely on their success.
                                                                    valide- not called but checks configuration in order and code in place.
                                                                    mvn compile
                                                                            downloads all dependencies mentioned- along with further dependencies.
                                                                            first time may take a while- all compilation is done
                                                                            recursive dependencies are taken care of
                                                                            makes jars available inside of directory structure
                                                                            mvn clean- to remove all .class files.
                                                                            scope- compile is default for artifact coordinates of dependency (meaning dependency should be available at compile time)
                                                                            use build/plugins/plugin tags for configuring specific compiler version (overriding defaults)
                                                                                    using plugins make it modular architecture- easy addition/removal.
                                                                                    Since maven 3- java e5 is standard, it was e4 before that.
                                                                                            Eg- you use 1.4 plugin to compiler java generics- mvn compile will fail.
                                                                                    using jetty to deploy using plugins
                                                                                            org.mortbay.jetty, maven-jetty-plugin, 6.1.10
                                                                                            mvn jetty:run- which plugin and what it should do.
                                                                                            open the webpage and it will tell context to listen to. It has deployed application inside jetty container.
                                                                                    using eclipse- mvn eclipse:eclipse- happy with defaults- so no need to write
                                                                                            no need of import- directly use as if a eclipse created project.
                                                                                            Project > Properties > Build Path > Libraries > Add Variable > M2_REPO = .m2/repository
                                                                    mvn test- all test cases are run.
                                                                    mvn package
                                                                            packages all main (and not test) folder's contents into jar form in target folder
                                                                            also runs test cases in junit test cases- automatically.
                                                                            generates build package- jar file in our case.
                                                                            install the artifact into the local repo- means any project refering to our artifact will pull ours from local repo.
                                                                            vs ant build- specify all 5 classes or use wild cards- mention every single step.
                                                                            look at target directory- surefire directory for test.
                                                                            war generate- upload war inside tomcat welcome page using Manager App button.
                                                                    install- installs into local maven repository (not server)
                                                                            takes all downloaded material to .m2 directory in your home folder.
                                                                    deploy- to deploy your artifact to remote repository for others to download and use
                                                            java -cp target/MavenTestApp-1.0-SNAPSHOT.jar org.saurabh.App
                                                            <uncat>
                                                                Practical knowledge thru hands on
                                                                    mvn- can't find 1.6 jdk- added dependency
                                                                            you can't imagine problem of downloading dependencies
                                                                    Maven- version 3.3.9
                                                                            mvn clean install from where pom.xml- don't close project- .m2 where packages are downloaded- parallel to workspace. parent of parent
                                                                                    Use maven central for names- use infy network to download.
                                                                    <dependency>
                                                                            <groupId>jdk.tools</groupId>
                                                                            <artifactId>jdk.tools</artifactId>
                                                                            <version>1.8.0_112</version>
                                                                            <scope>system</scope>
                                                                            <systemPath>C:/Program Files/Java/jdk1.8.0_112/lib/tools.jar</systemPath>
                                                                    </dependency>
                                                                    pom.xml Overview sometimes says a mistake that is not factual- like this artifact not read but checkout in maven dependencies folder it exists
                                                                            check build path and you may encounter problem- sometimes it's just jdk.tools is not right.
                                                                            mvn install- may throw error if we are using build classpath outside of pom- gotta comment it out for exec (for now)
                                                                                    strategy remove possible error causing agents and add them one by one. So, you know what stage it fails.
                                                                                    Reinstall mvn install for DAG to be made!!
                                                                    Maven to application jar
                                                                            maven clean install jar
                                                                            archive- Main-Class:package.name
                                                                            OR add plugin in the pom.xml file- refer as below- this includes maven dependencies inside
                                                                                    <plugin>
                                                                                            <groupId>org.apache.maven.plugins</groupId>
                                                                                            <artifactId>maven-assembly-plugin</artifactId>
                                                                                            <version>${maven.assembly.version}</version>
                                                                                            <configuration>
                                                                                                    <archive>
                                                                                                      <manifest>
                                                                                                            <Main-Class>com.saurabh.Client</Main-Class>
                                                                                                      </manifest>
                                                                                                    </archive>
                                                                                                    <descriptorRefs>
                                                                                                            <descriptorRef>jar-with-dependencies</descriptorRef>
                                                                                                    </descriptorRefs>
                                                                                                    <appendAssemblyId>false</appendAssemblyId>
                                                                                            </configuration>
                                                                                            <executions>
                                                                                                    <execution>
                                                                                                            <phase>package</phase>
                                                                                                            <goals>
                                                                                                                    <goal>single</goal>
                                                                                                            </goals>
                                                                                                    </execution>
                                                                                            </executions>
                                                                                    </plugin>
                                                                                    ${maven.assembly.version}- comes from the property tag in the pom.xml
                                                                    mongo 3.4.2 was not working- it was downloaded jar visible in maven dependency folder but error in classpath
                                                                            changing version to 3.4.1 solved the problem- maybe some dirty download was a problem.
                                                                    Access mvn command capability from 172 test network
                                                                            Added proxy tag in settings.xml file in maven package inside proxies
                                                                            <proxies>
                                                                                            <!-- proxy
                                                                                            | Specification for one proxy, to be used in connecting to the network.
                                                                                            | -->
                                                                                    <proxy>
                                                                                      <id>optional</id>
                                                                                      <active>true</active>
                                                                                      <protocol>http</protocol>
                                                                                      <username></username>
                                                                                      <password></password>
                                                                                      <host></host>
                                                                                      <port></port>
                                                                                      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
                                                                                    </proxy>
                                                                            </proxies>
                                                                    maven pom errors- maven clean install in the directory resolves it.
                                                                            mvn clean install is more powerful at download then depending on save of file
                                                                                    even eclipse mvn clean install is not fully dependable- if you are using a proxy to access mvn.
                                                                            pom.xml continues to show error even after maven dependencies shows corresponding jar- remove and add- the error goes
                                                                                    but anyway we are not dependent on it for building or execution.

                                                                    adding jar to local repo
                                                                            http://stackoverflow.com/questions/27991382/how-to-add-a-new-jar-file-as-a-dependency-to-pom-xml-of-java-maven-web-project
                                                                    Maven Projects
                                                                            use pre-existing maven project and modify it by removing classes
                                                                            Configure- convert to maven
                                                                            new maven project
                                                                    update dependency in pom.xml- save should download, if it doesn't-
                                                                            download using mvn clean install from gui and best from cli.
                                                                            after doing it from cli, pom.xml still shows error for which we don't care but can be taken care by removing & saving and adding & saving the dependency once more.
                                                                    uncat
                                                                            Missing Maven dependencies 'folder' on classpath- 
                                                                                    add to .classpath and it should show up on Build path library tab.
                                                                                            <classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
                                                                                                            <attributes>
                                                                                                                    <attribute name="maven.pomderived" value="true"/>
                                                                                                                    <attribute name="org.eclipse.jst.component.nondependency" value=""/>
                                                                                                            </attributes>
                                                                                            </classpathentry> 
                                                                                    ?Project Context Menu > Maven > Disable Maven Nature.
                                                                                    Maven->Update Project Configuration
                                                                                    mvn eclipse:clean then mvn eclipse:eclipse
                                                                                    properties -> Deployment Assembly -> Add -> Java Build Path Entries
                                                                                            select maven dependencies here
                                                                                    Right click on project->maven->update project
                                                                                    maven doesn't read eclipse set classpath- so all config folders and jar dependencies are not visible
                                                                                            solution- 
                                                                                                    use src/resources folder for all config folders
                                                                                                    and use maven dependencies or register those jars with maven (like tools.jar for jdk.tools)
                                                                                                    copy the folders and add to classpath using -cp
                                                                                    Maven error- failed to delete .jar cuz open in some program like 7z
                                                                                    maven error- If pom.xml not in directory there then error- project missing
                                                                                    clicking on command prompt stops the maven download, ctrl+C resumes it
                                                            </uncat>
                    </Maven>
            </Build>
            <GIT>
                <cmd>
                    <What>
                        Keeps track of files/programs
                            REL final_essay.s, final_essay2.s, definite_essay, last_essay.s
                    </What>
                    <Why>
                        let's you manage versions of files (source code)
                        return back to previous version.
                    </Why>
                    <How>
                        <Installation>
                            git-scm.com/downloads -> wizard -> bash (UNIX style)
                            //I need faster processor- could have told a story
                            Confirmation
                                git --version
                            create an account
                                name and email- git config --global user.name "Saurabh Devgun"\n
                                git config --global user.email "s.d@gmail.com"
                                git config --list - tells all the settings
                                git config user.email- to see my email
                                git help- help menu for more info
                                        git help commit- browser page opens- learn!
                        </Installation>
                        <INIT>
                            What? Starts tracking a folder.
                                Terms- Working copy, Staging area, Local Repo, Remote Repo
                                working copy (HDD copy) > staging area (these are ready for committed)> repository (local) > repository (remote)
                            How
                                pwd- which drive to look at
                                    go there thru cd ~ (home) (bash thinks user/saurabh it is), cd .., cd foldernames
                                    ls
                                    navigate to the folder and pwd- your folder stated.
                                git init
                                    initialized git repository here
                                    no noticable changes but git will keep track
                                To Remove init git file just delete it
                                    rm -rf .git
                                    rmdir .git or rmdir /s .git
                        </INIT>
                        <StagingArea>
                            add
                                What? add all changes made to Local/working copy (HDD) of git project (Tracked folder) to "staging area"
                                How?
                                    Make a file in the folder, make changes to a file, etc
                                        git diff --staged
                                            compare with working copy with staging area.
                                    git status- some modifications were made by you
                                    git add . - add all changes made to git project- added a file
                                        git add first.txt
                                    git diff- all differences between repository and working copy- will be shown
                                        red earlier and green by you updations
                                        file by file- changes will be shown.
                            Unstage Files
                                git reset HEAD
                                bring file back from staging area to working copy (still modified)
                        </StagingArea>
                        <LocalRepository>
                            Commit- 
                                What? remember a change made to GIT local repository as a name
                                How?
                                    move to the git folder
                                    git status- to check if contents have moved to staging area.
                                    git commit -m "Message" - some checkpoint to remember to revert or so.
                                    Variation
                                        commit directly to repository (bypassing staging area)
                                            git commit -am "bypass staging area"
                                                for all at once- if not all, don't use it.
                                    How?
                                        what makes the program work- 
                                            ls -la (all hidden stuff)
                                            hidden for reason (project may be messed up)
                            Commit Log
                                git log- all history is shown
                                git log --author="Saurabh"- commits from Saurabh
                                    for no1, no results
                            Delete Files from Local Repo
                                    git rm third.txt- removed both working copy and repository
                                    git status- deleted but didn't commit it (staging area)
                                    git commit -m "this is deleted for sure"
                            Rename Files in Local Repo
                                rename the working copy- as you would
                                    git status- deleted first.txt and created home.txt
                                    git add home.txt
                                    git rm first.txt
                                    git status- ok, you renamed it!
                                    git commit ...
                                Easy way
                                    git mv second.txt pudding.txt
                                        changes the working copy automatically.
                                        git mv pudding.txt LoveNotes/patty.txt- renamed in another folder
                                    git status
                                    git commit
                            Check out- Git it?
                                What- undo changes from repository (Local Repo to Working Copy)
                                Why
                                    7 made changes and committed to local repo (or even remote repo) wrongly
                                        a new person messed up- fired!
                                How
                                    git status- modified files shown (in working copy not repository!)
                                    git checkout -- index.html
                                            checkout- from repository to working copy
                                            --  means not branch but file taken out
                            Getting Old Versions from Repo
                                Why?
                                    first commit > Second > Third Commit
                                        so second is appended after third
                                        These are points in time- don't want to delete
                                        get to second without deleting third. so can get back to third
                                            i.e first commit > Second > Third Commit > Second
                                How
                                    git commit -am "second commit"
                                    git commit -am "dumb"
                                    git log- name, date, message- to choose from
                                    git checkout 01e7   -- index.html
                                        go to version starting with 01e7 and get copy of index.html file from there.
                                        old file (from local repo) is back to working copy.
                                    git reset --hard f414f31- current branch to point to the older commit
                                        git reset --hard HEAD will do is to throw away any uncommitted changes you have
                                        git clean -f
                        </LocalRepository>
                        <RemoteRepo>
                            What- GIT is program to keep track of project in computer (GITHUB)
                            Why
                                make public projects- publish for world to see- suggest changes!
                                    can download to local computer and submit for you
                                    7 deleted unnecessary comment or bugs from your project.
                            How
                                New Repository -> name to project; public (anyone can see)- Open Source vs Private (costs 7$/month!)
                                    uncheck initialize directory- cuz git init did it!
                                        git init
                                        git add .
                                        git commit -m "sth"
                                        git log
                                Publish on GITHUB
                                    copy the link of your repository- ending with .git
                                        connections with public computer
                                    git remote add (githubRepo) (link)
                                        any name you want to give for remote repository
                                        git remote- to name our remote repo
                                        Eg- git remote add origin www.github.com/saurabh-devgun-iiitb/ACT
                                    git push -u (githbuRepo) master
                                        pushing to the server
                                        -u all files in here
                                        push into remote repo from master local copy
                                        authenticate you- only you can upload it there.
                                Remove Remote URL
                                    git remote rm/remove (Destination)- remove a remote URL from your repository.
                                    eg- git remote rm origin- doesn't delete the remote repo from server but its tracking.
                                Change the Remote Repo URL
                                    git remote set-url origin git://new.url.here
                        </RemoteRepo>
                        <Eg>
                        Make a website
                            cd Desktop/Dogs
                            git status- nth to keep track of
                            git init
                            git status- all files to be added
                            git add .
                            git commit -m "first commit"
                        </Eg>
                    </How>
                    Upto chapter 18 Done
                </cmd>
                <GUI></GUI>
                <IDE>
                    <Eclipse>
                    Theory
                            specific components of GIT using eclipse
                                    we editing files in working dir with eclipse.
                                            Development PC- working directory shared and we edit them with eclipse.
                                            JGIT- does magic of GIT 
                                    Remote repository to maintain- save history of development for teams
                                    Local Repo- maintain info as servers and working directory.
                                        JGIT provided thru Eclipse.
                                        this interacts with Local more frequently than with remote.
                            Remote Server will save eth in one place. We have a local repo.
                                    None of the Repo runs the show. Included with JGIT (with eclipse).
                                    we will check-in and out of local repository.
                                    occasionally, remote server will pull and push the changes.
                    Creating a Repository: GIT and Eclipse
                            Create a Local Repo
                                    Project->Team->Share Project (Create Repository)->git->choose git path and "LocalRepo" name=>View changes
                                            can't save! The project has moved to the GIT path. See alt+Enter (Properties) of project.
                                            reopen the windows
                                            To see all project related files->open navigator view.
                            GitIgnore
                                    Navigator View->bin->team->Ignore. 
                                        .gitIgnore filesadded to project (contains files to ignore)
                                        we don't want to save bin .class files.
                            Get GIT perspective- 
                                add views
                                        show  views- GIT->Repository, staging, Team->History. (to view git related queries)
                                add Toolbars
                                    Windows->customize perspective->actionSetAvailability-> check GIT; ?commandGroupAvailability->Toolbar visibility->GIT checked. (to see GIT perspective)
                            Commit
                                    Project->Team->commit/commit & Push (message)  //check-in the checkbox files.
                                            My Local Repository is updated; seen in GIT repositories->Local->version.
                                            I have not created Online- so GIT hub repository not populated
                                    Commit Button on GIT toolbar.
                                    New hash is being generated to tell a difference from remote or other branch (later)
                            History viewing
                                    GIT Repo->Project->Show In->History
                            Create Remote
                                    github.com[->create account]->new repository->public->create->copy url of git project.
                                    GIT Repo -> Remotes -> Create Remote->"origin"->change url->enter the url of git project (from previous step)-> autopopulation->1time user-pwd->finish
                                        ->Configure Push->add Ref->master dropdown in src and dest and add spec->checkbox check and finish.
                                    To see Remote Tracking hash- we must add paste URI path or import the project as a client or etc.
                            Push
                                Using GIT Repository View -> Origin
                                    Need? Double click and see the difference. Different Hash codes also.
                                    Remote->origin->red arrowed->push->ok. 
                                    GIT Repo->Local->master->push branch->okok.
                                    Toolbar->Push Changes to Upstream Button.

                                    Hash Number becomes same.
                     Checking out an existing project
                            download existing repo and store in locally. You have the link.
                            SetUp
                                    Import->GIT->Projects from GIT->URI->uri path,host,repo path,credentials, checkbox->master branch->master local destination,directory for imported Project (workspace independent)->path to original name server as origin->Import Existing Project->Finish.
                            Get GIT Perspective.
                                    Branches->Remote Tracking follows Remote Branch (master branch in origin)
                            Show in History.
                    Making Changes
                            Make a separate local branch
                                    Remote Tracking->Give some branch name "try1" Checkbox-Merge checked->Tick shows current branch you are working on.
                            Interrupted by high priority task? 
                                    Partial Commit- Commit branch "try1" and get different Hash Code- last change happened.
                                    Do high priority task- From origin/master make a new branch "try2" (Changes in try1 not visible, we are behind try1)->Make changes->commit and refresh.
                                            Merge- Select master branch->right click try2 -> merge-> Ok (same hash codes they get)
                                            master-> push.
                                    Back to try1->make changes->(try switching->Prompt "Ok")/Commit
                                            Merge try1 to master-> History shows merging branches->Ok and Push.
                    Version Control- Pushing Changes between Repositories		
                            Remote->Create Repo. Separate Repos and we merge b4 release.
                            Move specific version back.
                            Project->Team->ShowIn History-> history of project thru eyes of git.
                                    Get local branch v52 of a version from a history row- "create branch"
                                    Origin->Push Branch->Don't wanna put that into public. SO, don't.
                                    Local Branch v52-> Push Branch- Push it to Origin->Push destination- refs/heads/master -> all changes OK.
                    Useful Repo
                        EBay- rahulk7494
                        Testing- san7988
                        Testing- sujitkc
                        saurabh-devgun-iiitb
                                            <Uncat>
                                                    Pop up message on eclipse start that java path not found in a directory- solution- eclipse.ini for java path
                                            </Uncat>
                    </Eclipse>
                </IDE>
                <SomeAccounts>
                    github.com/ShreyasDawkhare
                    sujitkc
                    san7988
                    rahulk7494
                    buckyroberts
                </SomeAccounts>
                <uncat>
                    Merging 2 remote branches
                        created a new remote branch using web
                        cloned it
                        checkedout other remote branch- git fetch, git checkout remoteBranch(Now local)
                        invoked a merge request
                        solved the conflicts- meaning of different git signs on eclipse
                        commit and push
                </uncat>
            </GIT>
            Exit Criteria - System Integration Testing Done.
                What I implemented promises to deliver as per design (integration testing)
                Integration testing is actually a “level” of testing rather than a “Type” of testing.
                writing code snippets to test the integrated modules, so it is basically a white box testing technique
                Integrate/combine the unit tested module one by one and test the behavior as a combined unit.
                        test the interfaces between the units/modules (or java class)
                        combinational behavior, and validate whether the requirements are implemented correctly or not.
                #Are features being served well thru interactions of classes.
                #Components Testings = Testing the functionalities of a class.
                Using DFD, we can perform integration testing as top down or bottom up or sandwich.
                In OOAD we did integration testing.
                Traceability matrix, non-functional reqt, compliance verification
                end to end processing of programs, threads, transactions
                cause effect testing, boundary value, security
                Black box
                        Test case Objective - Check the interface link between the Login and Mailbox module
                                Test Case Description - Enter login credentials and click on the Login button	
                                Expected Result - To be directed to the Mail Box
                        Check the interface link between the Mailbox and Delete Mails Module	
                                From Mail box select the an email and click delete button	
                                Selected email should appear in the Deleted/Trash folder
        </Integration>
        <Testing>
            System Testing and UAT performed here.
            <what>
            Testing- is what client expected (systems testing)
                cover all classes of scenarios- desirable effect.
                Eg- for society, Supreme courts.
            </what>
            <TestCaseGeneration>
                <Why>
                    Any Software system- we want to be sure that it works all the time for all inputs.
                        7's life at stake.
                </Why>
                <How>
                        <AutomatedFormalVerification>
                                prove with logic that program works all the time.
                        </AutomatedFormalVerification>
                        <TestCase>
                                What- test for different cases of data input to be fairly confident.
                                <Steps>
                                        <TestCaseGeneration>
                                                <ShortnotesBySir>
                                                Test case generation- is challenging.
                                                        Requirements- they can't be incomplete, ambiguous, inconsistent
                                                            Formal Specification- to study the navigation behavior
                                                                    done thru statechart variant.
                                                                    This models different flows the application can take.					
                                                                    Flatten out the hierarchy
                                                                    Study data flows b/w web pages.
                                                                            Define- when var is assigned memory
                                                                            Use- when var value is retrieved.
                                                                            the transition- denoted by event[,guard,action]
                                                            Abstract out of PL and figure out its control flow diagram/graph.
                                                                    we want to test for different blocks of code
                                                                            that control comes there.
                                                                            when control comes- it behaves as specified
                                                                    Means test for all paths on the CFG- exponential number of path to reach a block/node.
                                                        Test for a block to get active- figure out shortest route-dijkstra's route.
                                                                that routes has many decision block- may even be functions that return true or false in condn.
                                                                this makes it pretty challenging.
                                                                find out the propositional statement that brings me to the specified block.
                                                                        Eg- for B1: s1 be T,S2 be T and S3 be F- so s1 AND s2 AND s3'.
                                                                        PATH PREDICATE- This propositional statement- is given to SMT solvers 
                                                                                SMT (satisfy modulo theory) Solvers(essentially theorem provers/constraint solvers) generate apt test cases based on propositional statement.
                                                                                        atoms truth value is not known in advance and stay in SMT language and it can generate it
                                                                                        There are theorem solvers- which use AI for proving atoms and connecting the pieces thru propositional logic.
                                                                                This path predicate is not always simple to calculate (is to be automated).
                                                                                        Consider, automation
                                                                                        Consider, updates in the values of the variables involved for first order logic statements.
                                                                                        Consider, looping, where in the propositional statement- the atoms ANDed need to use mathematical variable and not program variable.
                                                                                                The number of paths increase a lot- it can take 1 loop and exit, 2,3,..
                                                                                                The language has to be kept in the language that SMT expects.
                                                                                                Eg- i<4 ^ i<5 = but values of i changes for all blocks.
                                                                                                        Need to say I<4 ^ I+1<5. if loop and value updates.
                                                                        This path predicate is generate by Symbolic Execution Engine (SEE) essentially an interpreter.
                                                                                Gets as input- CFG (control flow graph) and the path we want to put under test.
                                                                                        ALL paths are generated by ATG which get as input- CFG and coverage criteria.
                                                </ShortnotesBySir>
                                                <How>
                                                    <Manual></Manual>
                                                    <ACT>
                                                        ACT
                                                        why? pervasive use of web apps- rigor for designing and testing is important.
                                                        apps
                                                                widely used for life-critical software systems, e.g. automotive and aerospace
                                                                not used in webapps due to cost consideration.
                                                        <FormalSpecification>
                                                                What?
                                                                    more abstract and succinct (readable) than implementation (textbox/dropbox it's name,etc)
                                                                        Why? same specification can be used to generate test cases for a number of versions of system.
                                                                    eg- hospital mgmt system, student information system.
                                                                why? 
                                                                    great potential for automation in testing
                                                                How?
                                                                elicit customer requirements by helping remove ambiguity, inconsistency and incompleteness
                                                                Present it in form of a statechart
                                                                    what? variant of statechart to model navigation behavior.
                                                                    Related Models- Formal, informal, semi-formals
                                                                        Automata, Statechart, UML & OCL, alloy, Di-Graph, CFG, SDL, XML, etc
                                                                        STAL (Structured Test Automation Language) used for ACT.
                                                                            Map Identifiable elements in model to JUnit executable Java code.
                                                                            domain specific language to model the navigation aspect of the web application
                                                                                have used a UI mapping XML file to generate concrete test cases for Selenium
                                                                    UML State Diagram
                                                                        First Flatten the hierarchies
                                                                        States- basic, composite states (contain other states as substates)
                                                                            Eg- Active state is composite state.
                                                                                on this transition- the registered_Users and logged_Users are initially set to null sets.
                                                                                active to inactive is shutdown transaction.
                                                                                Inactive states- not yet started operating.
                                                                        Transitions represented by (Trigger, Guard, Action)
                                                                            mathematical notations are being used.
                                                                            Event/ Trigger- mandatory 
                                                                            OBSERVATION- [cross-interaction] data dependency- data flow across interactions
                                                                                    definition is a location where a value for a variable is stored in memory
                                                                                    use is a location where a variable's value is accessed
                                                                Model Navigation behavior using formal specification language- Statechart.
                                                                    SYSTEM : sys{
                                                                        STATE : s1{
                                                                            DESC : d1		
                                                                            INPUT : i1,i2,i3
                                                                            CLICKABLE : c1,c2
                                                                        }
                                                                        STATE : s2{
                                                                            DESC : d2
                                                                            INPUT : i4,i5
                                                                            CLICKABLE : c3,c4,c5
                                                                        } 
                                                                        STATE : s3{
                                                                            DESC : d3
                                                                            INPUT : i4,i5
                                                                            CLICKABLE : c3,c4,c5
                                                                        }
                                                                        TRANSITION: t1{
                                                                            SOURCE : s1
                                                                            DEST : s2
                                                                            TRIGGER : c2
                                                                            GUARD : int(i1) < int(i2) || int(i2) + (i3) > 20 && i3 != "" && isInt(i2) && i2.contains(@)
                                                                            ACTI : save A(i1,i2)
                                                                        }
                                                                        TRANSITION : t2{
                                                                            SOURCE : s1
                                                                            DEST : s3
                                                                            TRIGGER : c2
                                                                            GUARD : t=10
                                                                            ACTI : t=11
                                                                        }
                                                                    }

                                                                TODO Later

                                                                        Our ACT Tool should remember/store [concrete test] input values (for a state to enable a certain transition)
                                                                        Test case consists of atomic interactions- input/output with system
                                                                        values input in an interaction matters for other
                                                                                Eg- for login, the user needs to be registered first (previous interaction)- passwd match!
                                                                        solution- using symbolic execution widely used (ahead)


                                                        </FormalSpecification>
                                                        <FrontEnd>
                                                            What?
                                                                generation of test paths from statechart model (and Model Checking, Graph coverage algorithm)
                                                            How?
                                                                Model checking (AFV) is used to determining whether system model satisfies certain properties.
                                                                    can also be used to generate test cases and is one of the ways of doing model based testing
                                                                NuSMV
                                                                    Flattened Statechart --transform into--> SMV program
                                                                    Trap properties for navigation [are] written in CTL formulas
                                                                    NuSMV (Symbolic Model Verifier) tool is executed which generates counter examples.
                                                                Test paths generated by formulating a temporal logic specification as a trap property to be verified
                                                                    Trap property is negation of original temporal logic specification.
                                                                    A counter example is generated from trap property.
                                                                        is generated if the model does not satisfy the temporal logic formula
                                                                        is an execution trace that will take the model from its initial state to a state where the violation occurs.
                                                                    All test paths from counter eg.
                                                                    Eg- CTL Specification property for specifying that active-Patient Dashboard is reach-able from the initial state is written as EF(state=active-Patient Dashboard)
                                                                        it is negated to obtain trap property : !EF(state=active-Patient_Dashboard)
                                                                        for various requirements of webapp, write trap properties
                                                                            Eg- top page is reachable from all pages; node coverage criterion.
                                                            Generates syntactic paths thru statecharts.                                                    
                                                        </FrontEnd>
                                                        <AbstractTestCaseGeneration>
                                                            {input values for web pages} have to be computed which will lead the execution through the desired path
                                                            assume, front-end generates a path: t1t4t5- u.text !BELONGS RU (vacuous true). for t5- u.text BELONGS RU (use same value)
                                                            <SymbolicExecution>
                                                                [for] generating input values to guide the execution along a particular path
                                                                ACT carries symbolic execution along a given path- corresponding path predicate is computed.
                                                            </SymbolicExecution>
                                                            <SMTSolvers>
                                                                The Path predicate is given to SMT solver to generate test input values.
                                                            </SMTSolvers>
                                                        </AbstractTestCaseGeneration>
                                                        <Mapping>
                                                                What? Mapping abstract input variable values to concrete input values.
                                                                Why? for generating executable test cases- the implementation details are included.
                                                                        the result from abstract specification is abstract test cases.
                                                                state of art- involves a non-trivial manual step of translation (abstract to concrete) => reduced automation benefit.
                                                                        Also, 14,5,6 have done.
                                                                                6- ASM to model web apps -> abstract test sequences --translatorScans (guided by rules described by template)--> values of event variables (extracted) -> concrete Sahi scripts (generated)
                                                                                        eg- rule- SUBMIT(name) ::= < < _click(_submit("name")); > >
                                                                                        Eg- abstract test sequence
                                                                                                [ currentState=EMPTY
                                                                                                currentPage=INDEX
                                                                                                event=TEXT USERNAME ]
                                                                                                [ currentState=USERNAME
                                                                                                event=TEXT PASSWORD ]
                                                                                                [ currentState=USERPASSW
                                                                                                event=SUBMIT SUBMIT ]
                                                                                                [ currentState=EMPTY
                                                                                                currentPage=MAIN ]
                                                                                        Eg- concrete sahi scripts
                                                                                                navigateTo(\index.php");
                                                                                                setValue( textbox(\username"),\admin");
                                                                                                setValue( textbox(\password"),\admin");
                                                                                                click( submit(\submit"));
                                                                                                assertEqual(\main.php",top.location.href);
                                                                Solution- use a novel mapping approach
                                                                    by sharing data across different interactions with the web application
                                                                    abstract test cases generated are converted to Selenium RC JUnit concrete test cases using the Mappings XML file
                                                                    Others- FSM for testing,
                                                                        recorded user interaction data to construct Finite State model (test for AJAX Functionality)
                                                                        model checking for control flow and data flow coverage.
                                                        </Mapping>
                                                        <Execute>
                                                                execute on test execution framework (selenium RC JUNIT) in debug mode 
                                                                compare results to theoretical results by ACT
                                                        </Execute>
                                                        <Reports>
                                                            <ProblemStatement>
                                                                Automating User Acceptance Testing
                                                                    State of Art- Manually user browses/surfs through the site or manually all test cases are generated which are executed by Selenium like framework.
                                                                    Proposed Solution- A framework that converts User Requirements presented as a State Navigation chart to a set of test cases executable on selenium like tool.
                                                            </ProblemStatement>
                                                            <Requirements>
                                                                Use case- Values for web pages
                                                                    Input- A state navigation diagram (specifications given)
                                                                    Output- The software should spit out values to be inputted for every web page.
                                                                FOE/ Activity Chart
                                                                    Set Path is set in ANT build tool for the input file.
                                                                        Wrong Path/ Invalid File
                                                                        Valid File but Incomplete/Inconsistent description
                                                                            Gives a customized error detailing the error for rectification.
                                                                        Valid File And Conforms to standards
                                                                            Outputs a file with a set of Test cases (Test Suite)- as a sequence of states (along with user inputs at all states)
                                                                            The Input file is used to direct Selenium API to run the App in the Debug mode (not messing with DB)- any non-conformity is reported to the user in tool.
                                                            </Requirements>
                                                            <Design>
                                                                Structured Design- 
                                                                    Test Cases Generation
                                                                        Front End- Generate Test Paths (Graph Coverage Algo)
                                                                        Abstract Test Case Generation
                                                                            Symbolic Execution- Generate Path Predicate for All Test Cases.
                                                                            SMT Solving- From Path Predicate to generation of Input Values.
                                                                        Mapping Abstract to Concrete- Using XML.
                                                                        Execution using Test Exec Framework (& comparing with theoretical expected Results- Reporting on screen)
                                                                DFD (SA)
                                                                    User --StatechartFile--> Parser --Entities(GraphRelated)--> Front End --TestPaths--> Symbolic Execution --PathPredicates--> SMT Solvers --InputValues--> Mapping --ConcreteValues--> Test Execution Framework --ReportFallacy--> User
                                                                Class Diagram
                                                                    Parser
                                                                        Model/ Entities- Graph, Edges, Nodes, Transition, etc.
                                                                        View- ClientView
                                                                        Controller/Action- CUP Parser Framework
                                                                    Front End
                                                                        Model/Entities- TestPath
                                                                        C- FrontEnd                                                                        
                                                                    Symbolic Execution
                                                                        M- PathPredicates
                                                                        C- SymbolicExec
                                                                    SMTSolver
                                                                        M- StateValues
                                                                        C- Framework/ ValuesGenerator
                                                                            Persistence- StateValuesStore
                                                                    Mapping
                                                                        M- [Concrete]StateValues
                                                                        C- Abstract2ConcreteMapping
                                                                            Persistence- MappingXMLReader, [Concrete]StateValueStore
                                                                    TestExecutionFramework- 
                                                                        M- SeleniumSpecificCommands, TestPath (prev)
                                                                        V- ClientView (prev)
                                                                        C- Executer
                                                                            Framework- SeleniumAPIExecuter
                                                                Sequence Diagram

                                                            </Design>
                                                            <Implementation>
                                                                JUnit
                                                                @Ignore for ignoring test case for a method- @Test is compulsory for test.
                                                                add library junit- select class in project explorer- make new junit class
                                                                JUnit3 not working, Sir- cuz JUNIT 4 is reqd for annotations, jar also worked fine! JUnit follows sequential execution.
                                                                package name doesn't permit java as a namespace.
                                                            </Implementation>
                                                            <Integration>
                                                                Integration- github.
                                                            </Integration>
                                                            <Verification>
                                                                Selenium
                                                                http://www.seleniumhq.org/- download server, java client, for 3- Mozilla Geckodriver
                                                                    Shift+right click- copy as path- to copy path to a file to clipboard to be pasted somewhere.
                                                                    Selenium in Python- https://www.youtube.com/watch?v=V69wc4Tmwjc

                                                                    WebDriver driver = new ChromeDriver();			//set downloaded ChromeDriver.exe on envt path
                                                                    Mozilla software but not publisher name not mentioned- very risky- do official downloads
                                                                    dimensions and getSize() not working- started working after doing firefox update.

                                                                    Parsing the html for data is not the best idea cuz UI is likely to change with versions
                                                                            If you will select a li tag after clicking a button- you should ask selenium also to do the same else elementNotClickable exception.

                                                                    JSoup can't click- only parses the html- so gotta use selenium junit htmlUnitDriver.
                                                                    Reference tutorial- https://www.youtube.com/watch?v=hbxRgpMTif8&list=PLUY1lsOTtPeLPAkMpl8EFIDqWgv1QTXST
                                                            </Verification>
                                                            <Deployment></Deployment>
                                                            <Maintenance>
                                                                    <Javadocs>
                                                                    comments on top of methods and classes > Project > generate javadocs
                                                                    </Javadocs>
                                                                    <Logger>
                                                                    Logger is debug by default.
                                                                    all
                                                                    trace- while maintenace guy does hands on- on control flow
                                                                        use i++ at strategic positions to find mischievous statement
                                                                    logger.debug for maintenance team (high level technical problem pinned)- preparation for runtime debugging
                                                                    info- when user wants to know flow of events and where's it blocked
                                                                    warn- user only wants to know warnings not flow of events. little sensitive user.
                                                                    error- tell me only when it's not working.
                                                                    fatal- high attention reqd. application closes or must TODO sth
                                                                    sysout- not a level but just to know- it is user message to display on console
                                                                    More
                                                                            Logger.info- correspond to traversal thru different features of a code- thereby checkpointing for users to call and tell problem
                                                                            logger.debug- correspond to developer to checkpoint to pinpoint problematic method/ class.
                                                                            logger.trace- correspond to Data flow thru the code and confirm the values at different stages of execution.
                                                                    Made UMLs
                                                                        INFO is formed from FOE, activity diagram
                                                                        DEBUG is formed from sequence diagram.
                                                                                can use structured chart- covers upper layers as info and lower as debug, further lower as trace.
                                                                                                                                        uncat
                                                                                                                                                logger.debug("Thread with ID '{}'  inserted {} records", Thread.currentThread().getName(), batchInserts);
                                                                                                                                                In projects, You gotta know the execution trace and verification of every step (info, debug) in execution
                                                                                                                                                        how to include all in 1 execution to different files maybe.
                                                                    </Logger>
                                                            </Maintenance>
                                                        </Reports>
                                                    </ACT>
                                                </How>
                                        </TestCaseGeneration>
                                        <TestCaseExecution>
                                            What? 
                                                Used in debug mode execution
                                                    Why? we don't want to mess with production database, invariants.
                                            How? Execute the test cases obtained thru manually, QTP or Selenium tool is used.
                                        </TestCaseExecution>
                                        <TestCaseEvaluation>
                                            Test case evaluation- comparing the expected and actual outcome
                                            If outcome is programs- testing to be same is NP complete.
                                        </TestCaseEvaluation>
                                </Steps>
                        </TestCase>
                </How>
            </TestCaseGeneration>
            <SystemTesting>
                Deployment/Selling/Showcase your app- put to practice- does it solve the problems it promised?
                User Acceptance Testing
                    Selenium
                        HTML Performnace Scripts load time.
                            long start = System.currentTimeMillis();
                            driver.get("Some url");
                            long finish = System.currentTimeMillis();
                            ----
                            WebDriverWait wait = new WebDriverWait(driver, 10);
                            wait.until(ExpectedConditions.presenceOfElementLocated(By.id("u_0_l")));
                            pageLoad.stop();
            </SystemTesting>
            <UserAcceptanceTesting>
                Done by user himself - covering all business scenarios, Flow of Events for all business scenarios, etc.
            </UserAcceptanceTesting>
        </Testing>
        <Deployment>
            Docker, Kubernetes, etc.
            as Product or as a Service.
        </Deployment>
        <Maintenance>
            Maintenance- support for the solution- client faces a prob?
            comments
            javadocs in eclipse
            log.debug
        </Maintenance>
    </DevpCycleOfAnything>
</SoftwareEngineering>